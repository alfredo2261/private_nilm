wandb: Currently logged in as: nilm (use `wandb login --relogin` to force relogin)
True
1.10.2
patience:  20
training_home:  [142, 145, 183, 335, 387, 526, 690, 950, 1240, 1249, 1417, 2126, 2358, 2561, 3344, 3383, 3488, 3700, 3976, 3996]
test_home:  [142]
wandb: Tracking run with wandb version 0.12.14
wandb: Run data is saved locally in /home/Alfredo/private_nilm/src_3/wandb/run-20220418_120242-17n6hq5m
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run earthy-snowflake-45
wandb: ‚≠êÔ∏è View project at https://wandb.ai/nilm/march7_FL_trials
wandb: üöÄ View run at https://wandb.ai/nilm/march7_FL_trials/runs/17n6hq5m
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
wandb: Network error (ReadTimeout), entering retry loop.
wandb: ERROR Error while calling W&B API: Error 1040: Too many connections (<Response [500]>)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
LSTM(
  (conv1): Conv1d(1, 30, kernel_size=(10,), stride=(1,))
  (conv2): Conv1d(30, 30, kernel_size=(8,), stride=(1,))
  (conv3): Conv1d(30, 40, kernel_size=(6,), stride=(1,))
  (conv4): Conv1d(40, 50, kernel_size=(5,), stride=(1,))
  (conv5): Conv1d(50, 50, kernel_size=(5,), stride=(1,))
  (linear1): Linear(in_features=11000, out_features=1024, bias=True)
  (linear2): Linear(in_features=1024, out_features=1, bias=True)
  (relu): ReLU()
  (leaky): LeakyReLU(negative_slope=0.01)
  (dropout): Dropout(p=0.2, inplace=False)
)
Window Length:  249
trigger times: 0
Loss after 139392 batches: 1.0121
Time to train on one home:  301.8074724674225
trigger times: 0
Loss after 239616 batches: 0.9178
Time to train on one home:  274.5428259372711
trigger times: 0
Loss after 379008 batches: 0.5923
Time to train on one home:  290.35217475891113
trigger times: 0
Loss after 518400 batches: 0.9122
Time to train on one home:  289.52570128440857
trigger times: 0
Loss after 654336 batches: 0.6085
Time to train on one home:  289.3449778556824
trigger times: 0
Loss after 793728 batches: 0.9685
Time to train on one home:  295.01214814186096
trigger times: 0
Loss after 933120 batches: 0.9995
Time to train on one home:  293.18108582496643
trigger times: 0
Loss after 1072512 batches: 0.9934
Time to train on one home:  127.83981561660767
trigger times: 0
Loss after 1211904 batches: 0.9903
Time to train on one home:  58.28920912742615
trigger times: 0
Loss after 1351296 batches: 1.0269
Time to train on one home:  55.94969844818115
trigger times: 0
Loss after 1490688 batches: 0.8562
Time to train on one home:  57.454657316207886
trigger times: 0
Loss after 1630080 batches: 0.9778
Time to train on one home:  56.61320638656616
trigger times: 0
Loss after 1769472 batches: 0.5855
Time to train on one home:  56.553439140319824
trigger times: 0
Loss after 1908864 batches: 0.9498
Time to train on one home:  56.49933648109436
trigger times: 0
Loss after 1997568 batches: 0.9866
Time to train on one home:  51.529457092285156
trigger times: 0
Loss after 2136960 batches: 0.4567
Time to train on one home:  56.72668981552124
trigger times: 0
Loss after 2276352 batches: 0.9921
Time to train on one home:  55.97415590286255
trigger times: 0
Loss after 2415744 batches: 1.0051
Time to train on one home:  56.895896434783936
trigger times: 0
Loss after 2548224 batches: 1.0032
Time to train on one home:  108.5283408164978
trigger times: 0
Loss after 2687616 batches: 0.9678
Time to train on one home:  277.89384150505066
train_results:  [0.8901078716447787]
Round_0_average_test_results:  [array([ 9.52216596e-01, -1.73126830e-03,  4.47091333e-01,  1.13669599e+00,
        6.39169915e-01,  5.61526778e+01,  4.30961328e+03])]
average_updates:  [0.0014961164]
max_updates:  [31.968266]
trigger times: 0
Loss after 2827008 batches: 0.9928
Time to train on one home:  285.49994802474976
trigger times: 0
Loss after 2927232 batches: 0.9797
Time to train on one home:  265.02099776268005
trigger times: 0
Loss after 3066624 batches: 0.7176
Time to train on one home:  282.09624886512756
trigger times: 0
Loss after 3206016 batches: 0.9117
Time to train on one home:  283.8026762008667
trigger times: 0
Loss after 3341952 batches: 0.7004
Time to train on one home:  281.81701612472534
trigger times: 0
Loss after 3481344 batches: 0.9961
Time to train on one home:  282.7886815071106
trigger times: 0
Loss after 3620736 batches: 1.0019
Time to train on one home:  284.98174381256104
trigger times: 0
Loss after 3760128 batches: 0.9911
Time to train on one home:  282.89939069747925
trigger times: 0
Loss after 3899520 batches: 1.0020
Time to train on one home:  284.7560770511627
trigger times: 0
Loss after 4038912 batches: 1.0254
Time to train on one home:  282.8344225883484
trigger times: 0
Loss after 4178304 batches: 0.9266
Time to train on one home:  284.1578528881073
trigger times: 0
Loss after 4317696 batches: 1.0042
Time to train on one home:  282.9842417240143
trigger times: 0
Loss after 4457088 batches: 0.7316
Time to train on one home:  284.8044738769531
trigger times: 0
Loss after 4596480 batches: 0.9575
Time to train on one home:  284.2232027053833
trigger times: 0
Loss after 4685184 batches: 1.0062
Time to train on one home:  261.8643436431885
trigger times: 0
Loss after 4824576 batches: 0.6010
Time to train on one home:  283.8160388469696
trigger times: 0
Loss after 4963968 batches: 0.9993
Time to train on one home:  283.4779443740845
trigger times: 0
Loss after 5103360 batches: 1.1789
Time to train on one home:  283.62290716171265
trigger times: 0
Loss after 5235840 batches: 0.9805
Time to train on one home:  280.6181240081787
trigger times: 0
Loss after 5375232 batches: 0.9939
Time to train on one home:  280.9200699329376
train_results:  [0.8901078716447787, 0.9349105318779605]
Round_1_average_test_results:  [array([ 9.52216596e-01, -1.73126830e-03,  4.47091333e-01,  1.13669599e+00,
        6.39169915e-01,  5.61526778e+01,  4.30961328e+03]), array([ 9.51792307e-01, -1.28613861e-03,  4.47151714e-01,  1.13631152e+00,
        6.38885893e-01,  5.61336848e+01,  4.30769824e+03])]
average_updates:  [0.0014961164, 0.0005013158]
max_updates:  [31.968266, 33.740818]
trigger times: 0
Loss after 5514624 batches: 0.8984
Time to train on one home:  280.92882776260376
trigger times: 0
Loss after 5614848 batches: 0.8760
Time to train on one home:  264.45252323150635
trigger times: 0
Loss after 5754240 batches: 0.5934
Time to train on one home:  284.39897561073303
trigger times: 0
Loss after 5893632 batches: 0.8453
Time to train on one home:  280.2549877166748
trigger times: 0
Loss after 6029568 batches: 0.6666
Time to train on one home:  279.5648612976074
trigger times: 0
Loss after 6168960 batches: 0.8976
Time to train on one home:  278.6997628211975
trigger times: 0
Loss after 6308352 batches: 0.9946
Time to train on one home:  280.83163833618164
trigger times: 0
Loss after 6447744 batches: 1.0032
Time to train on one home:  278.84307503700256
trigger times: 0
Loss after 6587136 batches: 1.0143
Time to train on one home:  280.8780400753021
trigger times: 0
Loss after 6726528 batches: 1.0274
Time to train on one home:  282.6184592247009
trigger times: 0
Loss after 6865920 batches: 0.9267
Time to train on one home:  282.2536361217499
trigger times: 0
Loss after 7005312 batches: 0.9860
Time to train on one home:  280.01594519615173
trigger times: 0
Loss after 7144704 batches: 0.6039
Time to train on one home:  281.39792823791504
trigger times: 0
Loss after 7284096 batches: 0.9771
Time to train on one home:  279.6091237068176
trigger times: 0
Loss after 7372800 batches: 1.0010
Time to train on one home:  261.7432713508606
trigger times: 0
Loss after 7512192 batches: 0.5100
Time to train on one home:  283.50254487991333
trigger times: 0
Loss after 7651584 batches: 1.0114
Time to train on one home:  283.6676416397095
trigger times: 0
Loss after 7790976 batches: 0.9543
Time to train on one home:  284.2825982570648
trigger times: 0
Loss after 7923456 batches: 0.9900
Time to train on one home:  280.0068202018738
trigger times: 0
Loss after 8062848 batches: 1.0089
Time to train on one home:  284.4785740375519
train_results:  [0.8901078716447787, 0.9349105318779605, 0.8893140983429584]
Round_2_average_test_results:  [array([ 9.52216596e-01, -1.73126830e-03,  4.47091333e-01,  1.13669599e+00,
        6.39169915e-01,  5.61526778e+01,  4.30961328e+03]), array([ 9.51792307e-01, -1.28613861e-03,  4.47151714e-01,  1.13631152e+00,
        6.38885893e-01,  5.61336848e+01,  4.30769824e+03]), array([9.36284278e-01, 1.49899782e-02, 4.54178315e-01, 1.12543021e+00,
       6.28500669e-01, 5.55961488e+01, 4.23767627e+03])]
average_updates:  [0.0014961164, 0.0005013158, 0.00018288675]
max_updates:  [31.968266, 33.740818, 30.241287]
trigger times: 0
Loss after 8202240 batches: 0.8541
Time to train on one home:  282.47678542137146
trigger times: 0
Loss after 8302464 batches: 0.7996
Time to train on one home:  264.4433822631836
trigger times: 0
Loss after 8441856 batches: 0.5608
Time to train on one home:  281.62487864494324
trigger times: 0
Loss after 8581248 batches: 0.7667
Time to train on one home:  282.3326368331909
trigger times: 0
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
wandb: Network error (ReadTimeout), entering retry loop.
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
wandb: Network error (ReadTimeout), entering retry loop.
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
Loss after 8717184 batches: 0.5174
Time to train on one home:  283.608118057251
trigger times: 0
Loss after 8856576 batches: 0.8497
Time to train on one home:  281.7647957801819
trigger times: 0
Loss after 8995968 batches: 1.0004
Time to train on one home:  286.6395103931427
trigger times: 0
Loss after 9135360 batches: 0.9966
Time to train on one home:  285.7746629714966
trigger times: 0
Loss after 9274752 batches: 0.9924
Time to train on one home:  284.39518785476685
trigger times: 0
Loss after 9414144 batches: 0.9769
Time to train on one home:  283.4727861881256
trigger times: 0
Loss after 9553536 batches: 0.8608
Time to train on one home:  282.7375888824463
trigger times: 0
Loss after 9692928 batches: 0.9371
Time to train on one home:  281.4358410835266
trigger times: 0
Loss after 9832320 batches: 0.4520
Time to train on one home:  286.4055595397949
trigger times: 0
Loss after 9971712 batches: 0.8707
Time to train on one home:  286.21178126335144
trigger times: 0
Loss after 10060416 batches: 0.9784
Time to train on one home:  262.5950539112091
trigger times: 0
Loss after 10199808 batches: 0.4172
Time to train on one home:  285.18414092063904
trigger times: 0
Loss after 10339200 batches: 1.0126
Time to train on one home:  286.759170293808
trigger times: 0
Loss after 10478592 batches: 0.8445
Time to train on one home:  284.1659414768219
trigger times: 0
Loss after 10611072 batches: 0.9501
Time to train on one home:  281.03908109664917
trigger times: 0
Loss after 10750464 batches: 0.9683
Time to train on one home:  284.46453499794006
train_results:  [0.8901078716447787, 0.9349105318779605, 0.8893140983429584, 0.8303114544677012]
Round_3_average_test_results:  [array([ 9.52216596e-01, -1.73126830e-03,  4.47091333e-01,  1.13669599e+00,
        6.39169915e-01,  5.61526778e+01,  4.30961328e+03]), array([ 9.51792307e-01, -1.28613861e-03,  4.47151714e-01,  1.13631152e+00,
        6.38885893e-01,  5.61336848e+01,  4.30769824e+03]), array([9.36284278e-01, 1.49899782e-02, 4.54178315e-01, 1.12543021e+00,
       6.28500669e-01, 5.55961488e+01, 4.23767627e+03]), array([8.55359603e-01, 9.98603921e-02, 5.01749697e-01, 1.03969376e+00,
       5.74347807e-01, 5.13607763e+01, 3.87254926e+03])]
average_updates:  [0.0014961164, 0.0005013158, 0.00018288675, 0.00024222009]
max_updates:  [31.968266, 33.740818, 30.241287, 30.320036]
trigger times: 0
Loss after 10889856 batches: 0.7714
Time to train on one home:  288.7842516899109
trigger times: 0
Loss after 10990080 batches: 0.7476
Time to train on one home:  266.0397548675537
trigger times: 0
Loss after 11129472 batches: 0.5046
Time to train on one home:  283.2258791923523
trigger times: 0
Loss after 11268864 batches: 0.7423
Time to train on one home:  284.42962408065796
trigger times: 0
Loss after 11404800 batches: 0.5114
Time to train on one home:  282.51981711387634
trigger times: 0
Loss after 11544192 batches: 0.8156
Time to train on one home:  284.9976074695587
trigger times: 0
Loss after 11683584 batches: 1.0074
Time to train on one home:  283.3298456668854
trigger times: 0
Loss after 11822976 batches: 0.9979
Time to train on one home:  284.55413722991943
trigger times: 0
Loss after 11962368 batches: 1.0013
Time to train on one home:  286.040278673172
trigger times: 0
Loss after 12101760 batches: 0.9973
Time to train on one home:  283.92910838127136
trigger times: 0
Loss after 12241152 batches: 0.8506
Time to train on one home:  285.1808156967163
trigger times: 0
Loss after 12380544 batches: 0.8936
Time to train on one home:  281.5202944278717
trigger times: 0
Loss after 12519936 batches: 0.3749
Time to train on one home:  281.4439277648926
trigger times: 0
Loss after 12659328 batches: 0.8215
Time to train on one home:  281.6764259338379
trigger times: 0
Loss after 12748032 batches: 1.0025
Time to train on one home:  259.6303651332855
trigger times: 0
Loss after 12887424 batches: 0.3521
Time to train on one home:  281.5145671367645
trigger times: 0
Loss after 13026816 batches: 0.9347
Time to train on one home:  283.47441482543945
trigger times: 0
Loss after 13166208 batches: 0.7649
Time to train on one home:  281.61942410469055
trigger times: 0
Loss after 13298688 batches: 0.8565
Time to train on one home:  281.08796072006226
trigger times: 0
Loss after 13438080 batches: 0.8441
Time to train on one home:  279.8652467727661
train_results:  [0.8901078716447787, 0.9349105318779605, 0.8893140983429584, 0.8303114544677012, 0.789609422315808]
Round_4_average_test_results:  [array([ 9.52216596e-01, -1.73126830e-03,  4.47091333e-01,  1.13669599e+00,
        6.39169915e-01,  5.61526778e+01,  4.30961328e+03]), array([ 9.51792307e-01, -1.28613861e-03,  4.47151714e-01,  1.13631152e+00,
        6.38885893e-01,  5.61336848e+01,  4.30769824e+03]), array([9.36284278e-01, 1.49899782e-02, 4.54178315e-01, 1.12543021e+00,
       6.28500669e-01, 5.55961488e+01, 4.23767627e+03]), array([8.55359603e-01, 9.98603921e-02, 5.01749697e-01, 1.03969376e+00,
       5.74347807e-01, 5.13607763e+01, 3.87254926e+03]), array([9.05172458e-01, 4.76312171e-02, 4.72409496e-01, 1.06276552e+00,
       6.07673428e-01, 5.25005190e+01, 4.09724801e+03])]
average_updates:  [0.0014961164, 0.0005013158, 0.00018288675, 0.00024222009, 0.000111818066]
max_updates:  [31.968266, 33.740818, 30.241287, 30.320036, 17.480745]
trigger times: 0
Loss after 13577472 batches: 0.7807
Time to train on one home:  281.7783136367798
trigger times: 0
Loss after 13677696 batches: 0.7476
Time to train on one home:  263.97548174858093
trigger times: 0
Loss after 13817088 batches: 0.4907
Time to train on one home:  279.979288816452
trigger times: 0
Loss after 13956480 batches: 0.7400
Time to train on one home:  283.6356575489044
trigger times: 0
Loss after 14092416 batches: 0.4953
Time to train on one home:  281.8493740558624
trigger times: 0
Loss after 14231808 batches: 0.7797
Time to train on one home:  282.2015199661255
trigger times: 0
Loss after 14371200 batches: 0.9733
Time to train on one home:  283.88617181777954
trigger times: 0
Loss after 14510592 batches: 0.9973
Time to train on one home:  283.3251259326935
trigger times: 0
Loss after 14649984 batches: 0.9947
Time to train on one home:  284.51130533218384
trigger times: 0
Loss after 14789376 batches: 1.0030
Time to train on one home:  282.3027505874634
trigger times: 0
Loss after 14928768 batches: 0.8651
Time to train on one home:  282.94938683509827
trigger times: 0
Loss after 15068160 batches: 0.8623
Time to train on one home:  264.7093720436096
trigger times: 0
Loss after 15207552 batches: 0.3402
Time to train on one home:  283.11876010894775
trigger times: 0
Loss after 15346944 batches: 0.7654
Time to train on one home:  281.63050293922424
trigger times: 0
Loss after 15435648 batches: 0.9812
Time to train on one home:  260.8656780719757
trigger times: 0
Loss after 15575040 batches: 0.2753
Time to train on one home:  283.14890360832214
trigger times: 0
Loss after 15714432 batches: 0.8950
Time to train on one home:  282.3504321575165
trigger times: 0
Loss after 15853824 batches: 0.5160
Time to train on one home:  283.00767755508423
trigger times: 0
Loss after 15986304 batches: 0.8036
Time to train on one home:  281.44422936439514
trigger times: 0
Loss after 16125696 batches: 0.7251
Time to train on one home:  284.2936894893646
train_results:  [0.8901078716447787, 0.9349105318779605, 0.8893140983429584, 0.8303114544677012, 0.789609422315808, 0.7515671798110131]
Round_5_average_test_results:  /home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
wandb: Network error (ReadTimeout), entering retry loop.
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
[array([ 9.52216596e-01, -1.73126830e-03,  4.47091333e-01,  1.13669599e+00,
        6.39169915e-01,  5.61526778e+01,  4.30961328e+03]), array([ 9.51792307e-01, -1.28613861e-03,  4.47151714e-01,  1.13631152e+00,
        6.38885893e-01,  5.61336848e+01,  4.30769824e+03]), array([9.36284278e-01, 1.49899782e-02, 4.54178315e-01, 1.12543021e+00,
       6.28500669e-01, 5.55961488e+01, 4.23767627e+03]), array([8.55359603e-01, 9.98603921e-02, 5.01749697e-01, 1.03969376e+00,
       5.74347807e-01, 5.13607763e+01, 3.87254926e+03]), array([9.05172458e-01, 4.76312171e-02, 4.72409496e-01, 1.06276552e+00,
       6.07673428e-01, 5.25005190e+01, 4.09724801e+03]), array([ 1.04076022e+00, -9.45863736e-02,  4.75184746e-01,  1.05202791e+00,
        6.98417531e-01,  5.19700819e+01,  4.70909149e+03])]
average_updates:  [0.0014961164, 0.0005013158, 0.00018288675, 0.00024222009, 0.000111818066, 0.00025767586]
max_updates:  [31.968266, 33.740818, 30.241287, 30.320036, 17.480745, 27.394987]
trigger times: 0
Loss after 16265088 batches: 0.7812
Time to train on one home:  280.6074664592743
trigger times: 0
Loss after 16365312 batches: 0.6888
Time to train on one home:  262.88745856285095
trigger times: 0
Loss after 16504704 batches: 0.4440
Time to train on one home:  278.82727122306824
trigger times: 0
Loss after 16644096 batches: 0.7142
Time to train on one home:  283.9115581512451
trigger times: 0
Loss after 16780032 batches: 0.4593
Time to train on one home:  281.97988295555115
trigger times: 0
Loss after 16919424 batches: 0.7664
Time to train on one home:  282.2817192077637
trigger times: 0
Loss after 17058816 batches: 0.9195
Time to train on one home:  281.9912691116333
trigger times: 0
Loss after 17198208 batches: 0.9965
Time to train on one home:  284.4265856742859
trigger times: 0
Loss after 17337600 batches: 0.8847
Time to train on one home:  284.3509421348572
trigger times: 0
Loss after 17476992 batches: 0.9964
Time to train on one home:  281.334107875824
trigger times: 0
Loss after 17616384 batches: 0.8476
Time to train on one home:  284.4626169204712
trigger times: 0
Loss after 17755776 batches: 0.8058
Time to train on one home:  284.2364168167114
trigger times: 0
Loss after 17895168 batches: 0.2672
Time to train on one home:  282.21786665916443
trigger times: 0
Loss after 18034560 batches: 0.6292
Time to train on one home:  281.4793953895569
trigger times: 0
Loss after 18123264 batches: 1.0012
Time to train on one home:  260.81459045410156
trigger times: 0
Loss after 18262656 batches: 0.2138
Time to train on one home:  286.4643626213074
trigger times: 0
Loss after 18402048 batches: 0.8534
Time to train on one home:  285.99214482307434
trigger times: 0
Loss after 18541440 batches: 0.4541
Time to train on one home:  284.55583477020264
trigger times: 0
Loss after 18673920 batches: 0.8039
Time to train on one home:  282.86101388931274
trigger times: 0
Loss after 18813312 batches: 0.7223
Time to train on one home:  284.11696219444275
train_results:  [0.8901078716447787, 0.9349105318779605, 0.8893140983429584, 0.8303114544677012, 0.789609422315808, 0.7515671798110131, 0.7124707276299076]
Round_6_average_test_results:  [array([ 9.52216596e-01, -1.73126830e-03,  4.47091333e-01,  1.13669599e+00,
        6.39169915e-01,  5.61526778e+01,  4.30961328e+03]), array([ 9.51792307e-01, -1.28613861e-03,  4.47151714e-01,  1.13631152e+00,
        6.38885893e-01,  5.61336848e+01,  4.30769824e+03]), array([9.36284278e-01, 1.49899782e-02, 4.54178315e-01, 1.12543021e+00,
       6.28500669e-01, 5.55961488e+01, 4.23767627e+03]), array([8.55359603e-01, 9.98603921e-02, 5.01749697e-01, 1.03969376e+00,
       5.74347807e-01, 5.13607763e+01, 3.87254926e+03]), array([9.05172458e-01, 4.76312171e-02, 4.72409496e-01, 1.06276552e+00,
       6.07673428e-01, 5.25005190e+01, 4.09724801e+03]), array([ 1.04076022e+00, -9.45863736e-02,  4.75184746e-01,  1.05202791e+00,
        6.98417531e-01,  5.19700819e+01,  4.70909149e+03]), array([9.28993395e-01, 2.28990063e-02, 5.02865218e-01, 1.00393184e+00,
       6.23454193e-01, 4.95941407e+01, 4.20364998e+03])]
average_updates:  [0.0014961164, 0.0005013158, 0.00018288675, 0.00024222009, 0.000111818066, 0.00025767586, 0.0005027919]
max_updates:  [31.968266, 33.740818, 30.241287, 30.320036, 17.480745, 27.394987, 31.969082]
trigger times: 0
Loss after 18952704 batches: 0.7693
Time to train on one home:  286.6931188106537
trigger times: 0
Loss after 19052928 batches: 0.6949
Time to train on one home:  268.83541345596313
trigger times: 0
Loss after 19192320 batches: 0.4332
Time to train on one home:  284.1062545776367
trigger times: 0
Loss after 19331712 batches: 0.6936
Time to train on one home:  282.1631603240967
trigger times: 0
Loss after 19467648 batches: 0.4837
Time to train on one home:  281.16866421699524
trigger times: 0
Loss after 19607040 batches: 0.6845
Time to train on one home:  279.3300824165344
trigger times: 0
Loss after 19746432 batches: 0.9453
Time to train on one home:  279.67352318763733
trigger times: 0
Loss after 19885824 batches: 0.9835
Time to train on one home:  281.2551305294037
trigger times: 0
Loss after 20025216 batches: 1.1563
Time to train on one home:  281.8987717628479
trigger times: 0
Loss after 20164608 batches: 0.9828
Time to train on one home:  284.0819547176361
trigger times: 0
Loss after 20304000 batches: 0.7860
Time to train on one home:  282.11776089668274
trigger times: 0
Loss after 20443392 batches: 0.7485
Time to train on one home:  280.82255458831787
trigger times: 0
Loss after 20582784 batches: 0.2425
Time to train on one home:  280.9122829437256
trigger times: 0
Loss after 20722176 batches: 0.6053
Time to train on one home:  282.34666752815247
trigger times: 0
Loss after 20810880 batches: 1.0054
Time to train on one home:  259.8059208393097
trigger times: 0
Loss after 20950272 batches: 0.1921
Time to train on one home:  283.04723262786865
trigger times: 0
Loss after 21089664 batches: 0.8322
Time to train on one home:  282.2116103172302
trigger times: 0
Loss after 21229056 batches: 0.4207
Time to train on one home:  281.906756401062
trigger times: 0
Loss after 21361536 batches: 0.8052
Time to train on one home:  281.59355330467224
trigger times: 0
Loss after 21500928 batches: 0.6679
Time to train on one home:  281.8329815864563
train_results:  [0.8901078716447787, 0.9349105318779605, 0.8893140983429584, 0.8303114544677012, 0.789609422315808, 0.7515671798110131, 0.7124707276299076, 0.7066488653874816]
Round_7_average_test_results:  [array([ 9.52216596e-01, -1.73126830e-03,  4.47091333e-01,  1.13669599e+00,
        6.39169915e-01,  5.61526778e+01,  4.30961328e+03]), array([ 9.51792307e-01, -1.28613861e-03,  4.47151714e-01,  1.13631152e+00,
        6.38885893e-01,  5.61336848e+01,  4.30769824e+03]), array([9.36284278e-01, 1.49899782e-02, 4.54178315e-01, 1.12543021e+00,
       6.28500669e-01, 5.55961488e+01, 4.23767627e+03]), array([8.55359603e-01, 9.98603921e-02, 5.01749697e-01, 1.03969376e+00,
       5.74347807e-01, 5.13607763e+01, 3.87254926e+03]), array([9.05172458e-01, 4.76312171e-02, 4.72409496e-01, 1.06276552e+00,
       6.07673428e-01, 5.25005190e+01, 4.09724801e+03]), array([ 1.04076022e+00, -9.45863736e-02,  4.75184746e-01,  1.05202791e+00,
        6.98417531e-01,  5.19700819e+01,  4.70909149e+03]), array([9.28993395e-01, 2.28990063e-02, 5.02865218e-01, 1.00393184e+00,
       6.23454193e-01, 4.95941407e+01, 4.20364998e+03]), array([ 1.01101411e+00, -6.39637580e-02,  4.95592509e-01,  1.02114372e+00,
        6.78878305e-01,  5.04444060e+01,  4.57734800e+03])]
average_updates:  [0.0014961164, 0.0005013158, 0.00018288675, 0.00024222009, 0.000111818066, 0.00025767586, 0.0005027919, 4.8914666e-05]
max_updates:  [31.968266, 33.740818, 30.241287, 30.320036, 17.480745, 27.394987, 31.969082, 28.451975]
trigger times: 0
Loss after 21640320 batches: 0.6978
Time to train on one home:  283.14980697631836
trigger times: 0
Loss after 21740544 batches: 0.6689
Time to train on one home:  266.923362493515
trigger times: 0
Loss after 21879936 batches: 0.4133
Time to train on one home:  278.86616826057434
trigger times: 0
Loss after 22019328 batches: 0.6589
Time to train on one home:  277.7197823524475
trigger times: 0
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
wandb: Network error (ReadTimeout), entering retry loop.
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
wandb: Network error (ReadTimeout), entering retry loop.
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
Loss after 22155264 batches: 0.4223
Time to train on one home:  279.0993986129761
trigger times: 0
Loss after 22294656 batches: 0.6937
Time to train on one home:  279.4628186225891
trigger times: 0
Loss after 22434048 batches: 0.8588
Time to train on one home:  282.2428765296936
trigger times: 0
Loss after 22573440 batches: 0.9817
Time to train on one home:  281.2217571735382
trigger times: 0
Loss after 22712832 batches: 0.7946
Time to train on one home:  281.3191661834717
trigger times: 0
Loss after 22852224 batches: 0.9943
Time to train on one home:  281.34944558143616
trigger times: 0
Loss after 22991616 batches: 0.7990
Time to train on one home:  283.0718038082123
trigger times: 0
Loss after 23131008 batches: 0.7050
Time to train on one home:  283.8131821155548
trigger times: 0
Loss after 23270400 batches: 0.2306
Time to train on one home:  280.14991569519043
trigger times: 0
Loss after 23409792 batches: 0.5576
Time to train on one home:  281.0034749507904
trigger times: 0
Loss after 23498496 batches: 1.0282
Time to train on one home:  262.6817979812622
trigger times: 0
Loss after 23637888 batches: 0.1668
Time to train on one home:  283.36705803871155
trigger times: 0
Loss after 23777280 batches: 0.8372
Time to train on one home:  283.19526624679565
trigger times: 0
Loss after 23916672 batches: 0.3356
Time to train on one home:  280.50892901420593
trigger times: 0
Loss after 24049152 batches: 0.7990
Time to train on one home:  278.53760600090027
trigger times: 0
Loss after 24188544 batches: 0.6239
Time to train on one home:  282.04272389411926
train_results:  [0.8901078716447787, 0.9349105318779605, 0.8893140983429584, 0.8303114544677012, 0.789609422315808, 0.7515671798110131, 0.7124707276299076, 0.7066488653874816, 0.6633709092111791]
Round_8_average_test_results:  [array([ 9.52216596e-01, -1.73126830e-03,  4.47091333e-01,  1.13669599e+00,
        6.39169915e-01,  5.61526778e+01,  4.30961328e+03]), array([ 9.51792307e-01, -1.28613861e-03,  4.47151714e-01,  1.13631152e+00,
        6.38885893e-01,  5.61336848e+01,  4.30769824e+03]), array([9.36284278e-01, 1.49899782e-02, 4.54178315e-01, 1.12543021e+00,
       6.28500669e-01, 5.55961488e+01, 4.23767627e+03]), array([8.55359603e-01, 9.98603921e-02, 5.01749697e-01, 1.03969376e+00,
       5.74347807e-01, 5.13607763e+01, 3.87254926e+03]), array([9.05172458e-01, 4.76312171e-02, 4.72409496e-01, 1.06276552e+00,
       6.07673428e-01, 5.25005190e+01, 4.09724801e+03]), array([ 1.04076022e+00, -9.45863736e-02,  4.75184746e-01,  1.05202791e+00,
        6.98417531e-01,  5.19700819e+01,  4.70909149e+03]), array([9.28993395e-01, 2.28990063e-02, 5.02865218e-01, 1.00393184e+00,
       6.23454193e-01, 4.95941407e+01, 4.20364998e+03]), array([ 1.01101411e+00, -6.39637580e-02,  4.95592509e-01,  1.02114372e+00,
        6.78878305e-01,  5.04444060e+01,  4.57734800e+03]), array([ 1.03028181e+00, -8.36749825e-02,  4.93759080e-01,  1.03686593e+00,
        6.91455352e-01,  5.12210818e+01,  4.66214897e+03])]
average_updates:  [0.0014961164, 0.0005013158, 0.00018288675, 0.00024222009, 0.000111818066, 0.00025767586, 0.0005027919, 4.8914666e-05, 2.3332452e-05]
max_updates:  [31.968266, 33.740818, 30.241287, 30.320036, 17.480745, 27.394987, 31.969082, 28.451975, 26.181953]
trigger times: 0
Loss after 24327936 batches: 0.7102
Time to train on one home:  288.03540682792664
trigger times: 0
Loss after 24428160 batches: 0.6416
Time to train on one home:  262.6256265640259
trigger times: 0
Loss after 24567552 batches: 0.4122
Time to train on one home:  279.80201148986816
trigger times: 0
Loss after 24706944 batches: 0.6084
Time to train on one home:  281.9026532173157
trigger times: 0
Loss after 24842880 batches: 0.3941
Time to train on one home:  280.06838512420654
trigger times: 0
Loss after 24982272 batches: 0.6387
Time to train on one home:  280.9018166065216
trigger times: 0
Loss after 25121664 batches: 0.8197
Time to train on one home:  280.27965903282166
trigger times: 0
Loss after 25261056 batches: 1.0019
Time to train on one home:  281.29663133621216
trigger times: 0
Loss after 25400448 batches: 0.7508
Time to train on one home:  281.7307279109955
trigger times: 0
Loss after 25539840 batches: 0.9820
Time to train on one home:  282.70367980003357
trigger times: 0
Loss after 25679232 batches: 0.7186
Time to train on one home:  283.83631134033203
trigger times: 0
Loss after 25818624 batches: 0.6642
Time to train on one home:  280.7840082645416
trigger times: 0
Loss after 25958016 batches: 0.2082
Time to train on one home:  284.7420470714569
trigger times: 0
Loss after 26097408 batches: 0.5045
Time to train on one home:  280.69387125968933
trigger times: 0
Loss after 26186112 batches: 0.9918
Time to train on one home:  259.7232310771942
trigger times: 0
Loss after 26325504 batches: 0.1617
Time to train on one home:  280.8560245037079
trigger times: 0
Loss after 26464896 batches: 0.8204
Time to train on one home:  283.36724376678467
trigger times: 0
Loss after 26604288 batches: 0.3554
Time to train on one home:  279.0633990764618
trigger times: 0
Loss after 26736768 batches: 0.6999
Time to train on one home:  278.1447067260742
trigger times: 0
Loss after 26876160 batches: 0.5664
Time to train on one home:  281.411878824234
train_results:  [0.8901078716447787, 0.9349105318779605, 0.8893140983429584, 0.8303114544677012, 0.789609422315808, 0.7515671798110131, 0.7124707276299076, 0.7066488653874816, 0.6633709092111791, 0.6325365912487749]
Round_9_average_test_results:  [array([ 9.52216596e-01, -1.73126830e-03,  4.47091333e-01,  1.13669599e+00,
        6.39169915e-01,  5.61526778e+01,  4.30961328e+03]), array([ 9.51792307e-01, -1.28613861e-03,  4.47151714e-01,  1.13631152e+00,
        6.38885893e-01,  5.61336848e+01,  4.30769824e+03]), array([9.36284278e-01, 1.49899782e-02, 4.54178315e-01, 1.12543021e+00,
       6.28500669e-01, 5.55961488e+01, 4.23767627e+03]), array([8.55359603e-01, 9.98603921e-02, 5.01749697e-01, 1.03969376e+00,
       5.74347807e-01, 5.13607763e+01, 3.87254926e+03]), array([9.05172458e-01, 4.76312171e-02, 4.72409496e-01, 1.06276552e+00,
       6.07673428e-01, 5.25005190e+01, 4.09724801e+03]), array([ 1.04076022e+00, -9.45863736e-02,  4.75184746e-01,  1.05202791e+00,
        6.98417531e-01,  5.19700819e+01,  4.70909149e+03]), array([9.28993395e-01, 2.28990063e-02, 5.02865218e-01, 1.00393184e+00,
       6.23454193e-01, 4.95941407e+01, 4.20364998e+03]), array([ 1.01101411e+00, -6.39637580e-02,  4.95592509e-01,  1.02114372e+00,
        6.78878305e-01,  5.04444060e+01,  4.57734800e+03]), array([ 1.03028181e+00, -8.36749825e-02,  4.93759080e-01,  1.03686593e+00,
        6.91455352e-01,  5.12210818e+01,  4.66214897e+03]), array([ 1.03036389e+00, -8.36579238e-02,  4.76341343e-01,  1.02926483e+00,
        6.91444467e-01,  5.08455883e+01,  4.66207546e+03])]
average_updates:  [0.0014961164, 0.0005013158, 0.00018288675, 0.00024222009, 0.000111818066, 0.00025767586, 0.0005027919, 4.8914666e-05, 2.3332452e-05, 2.8471635e-05]
max_updates:  [31.968266, 33.740818, 30.241287, 30.320036, 17.480745, 27.394987, 31.969082, 28.451975, 26.181953, 26.636108]
trigger times: 0
Loss after 27015552 batches: 0.6932
Time to train on one home:  281.34705090522766
trigger times: 0
Loss after 27115776 batches: 0.6307
Time to train on one home:  264.2556309700012
trigger times: 0
Loss after 27255168 batches: 0.3942
Time to train on one home:  282.09925961494446
trigger times: 0
Loss after 27394560 batches: 0.5617
Time to train on one home:  280.96391320228577
trigger times: 0
Loss after 27530496 batches: 0.3576
Time to train on one home:  278.9633982181549
trigger times: 0
Loss after 27669888 batches: 0.6018
Time to train on one home:  257.1157546043396
trigger times: 0
Loss after 27809280 batches: 0.8106
Time to train on one home:  284.39122462272644
trigger times: 0
Loss after 27948672 batches: 1.0064
Time to train on one home:  284.74954319000244
trigger times: 0
Loss after 28088064 batches: 0.7192
Time to train on one home:  282.8795793056488
trigger times: 0
Loss after 28227456 batches: 0.9274
Time to train on one home:  284.3403296470642
trigger times: 0
Loss after 28366848 batches: 0.6674
Time to train on one home:  /home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
wandb: Network error (ReadTimeout), entering retry loop.
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
283.97578144073486
trigger times: 0
Loss after 28506240 batches: 0.6287
Time to train on one home:  284.678307056427
trigger times: 0
Loss after 28645632 batches: 0.2010
Time to train on one home:  282.21809792518616
trigger times: 0
Loss after 28785024 batches: 0.4987
Time to train on one home:  283.35511207580566
trigger times: 0
Loss after 28873728 batches: 1.0047
Time to train on one home:  257.8527762889862
trigger times: 0
Loss after 29013120 batches: 0.1392
Time to train on one home:  280.1973624229431
trigger times: 0
Loss after 29152512 batches: 0.8243
Time to train on one home:  278.55311274528503
trigger times: 0
Loss after 29291904 batches: 0.3033
Time to train on one home:  280.92461490631104
trigger times: 0
Loss after 29424384 batches: 0.7130
Time to train on one home:  277.65069556236267
trigger times: 0
Loss after 29563776 batches: 0.5252
Time to train on one home:  282.53426218032837
train_results:  [0.8901078716447787, 0.9349105318779605, 0.8893140983429584, 0.8303114544677012, 0.789609422315808, 0.7515671798110131, 0.7124707276299076, 0.7066488653874816, 0.6633709092111791, 0.6325365912487749, 0.6104207014088734]
Round_10_average_test_results:  [array([ 9.52216596e-01, -1.73126830e-03,  4.47091333e-01,  1.13669599e+00,
        6.39169915e-01,  5.61526778e+01,  4.30961328e+03]), array([ 9.51792307e-01, -1.28613861e-03,  4.47151714e-01,  1.13631152e+00,
        6.38885893e-01,  5.61336848e+01,  4.30769824e+03]), array([9.36284278e-01, 1.49899782e-02, 4.54178315e-01, 1.12543021e+00,
       6.28500669e-01, 5.55961488e+01, 4.23767627e+03]), array([8.55359603e-01, 9.98603921e-02, 5.01749697e-01, 1.03969376e+00,
       5.74347807e-01, 5.13607763e+01, 3.87254926e+03]), array([9.05172458e-01, 4.76312171e-02, 4.72409496e-01, 1.06276552e+00,
       6.07673428e-01, 5.25005190e+01, 4.09724801e+03]), array([ 1.04076022e+00, -9.45863736e-02,  4.75184746e-01,  1.05202791e+00,
        6.98417531e-01,  5.19700819e+01,  4.70909149e+03]), array([9.28993395e-01, 2.28990063e-02, 5.02865218e-01, 1.00393184e+00,
       6.23454193e-01, 4.95941407e+01, 4.20364998e+03]), array([ 1.01101411e+00, -6.39637580e-02,  4.95592509e-01,  1.02114372e+00,
        6.78878305e-01,  5.04444060e+01,  4.57734800e+03]), array([ 1.03028181e+00, -8.36749825e-02,  4.93759080e-01,  1.03686593e+00,
        6.91455352e-01,  5.12210818e+01,  4.66214897e+03]), array([ 1.03036389e+00, -8.36579238e-02,  4.76341343e-01,  1.02926483e+00,
        6.91444467e-01,  5.08455883e+01,  4.66207546e+03]), array([ 1.01711925e+00, -6.97420673e-02,  4.84234813e-01,  1.01335571e+00,
        6.82565243e-01,  5.00596792e+01,  4.60220730e+03])]
average_updates:  [0.0014961164, 0.0005013158, 0.00018288675, 0.00024222009, 0.000111818066, 0.00025767586, 0.0005027919, 4.8914666e-05, 2.3332452e-05, 2.8471635e-05, 0.00012932767]
max_updates:  [31.968266, 33.740818, 30.241287, 30.320036, 17.480745, 27.394987, 31.969082, 28.451975, 26.181953, 26.636108, 28.733593]
trigger times: 0
Loss after 29703168 batches: 0.6630
Time to train on one home:  280.2043311595917
trigger times: 0
Loss after 29803392 batches: 0.6234
Time to train on one home:  263.24084663391113
trigger times: 0
Loss after 29942784 batches: 0.3734
Time to train on one home:  280.87030959129333
trigger times: 0
Loss after 30082176 batches: 0.5226
Time to train on one home:  283.99660539627075
trigger times: 0
Loss after 30218112 batches: 0.3392
Time to train on one home:  276.81165194511414
trigger times: 0
Loss after 30357504 batches: 0.6126
Time to train on one home:  281.47572660446167
trigger times: 0
Loss after 30496896 batches: 0.7920
Time to train on one home:  282.7839210033417
trigger times: 0
Loss after 30636288 batches: 0.9972
Time to train on one home:  281.6638548374176
trigger times: 0
Loss after 30775680 batches: 0.7009
Time to train on one home:  277.93074131011963
trigger times: 0
Loss after 30915072 batches: 0.9169
Time to train on one home:  282.0551769733429
trigger times: 0
Loss after 31054464 batches: 0.6193
Time to train on one home:  281.43644976615906
trigger times: 0
Loss after 31193856 batches: 0.5975
Time to train on one home:  281.12831807136536
trigger times: 0
Loss after 31333248 batches: 0.1859
Time to train on one home:  279.2798316478729
trigger times: 0
Loss after 31472640 batches: 0.4632
Time to train on one home:  280.5296006202698
trigger times: 0
Loss after 31561344 batches: 1.0088
Time to train on one home:  259.032666683197
trigger times: 0
Loss after 31700736 batches: 0.1274
Time to train on one home:  282.07164216041565
trigger times: 0
Loss after 31840128 batches: 0.7994
Time to train on one home:  279.8953149318695
trigger times: 0
Loss after 31979520 batches: 0.2660
Time to train on one home:  278.79442024230957
trigger times: 0
Loss after 32112000 batches: 0.7425
Time to train on one home:  277.6004321575165
trigger times: 0
Loss after 32251392 batches: 0.4808
Time to train on one home:  279.13767194747925
train_results:  [0.8901078716447787, 0.9349105318779605, 0.8893140983429584, 0.8303114544677012, 0.789609422315808, 0.7515671798110131, 0.7124707276299076, 0.7066488653874816, 0.6633709092111791, 0.6325365912487749, 0.6104207014088734, 0.5915938224837515]
Round_11_average_test_results:  [array([ 9.52216596e-01, -1.73126830e-03,  4.47091333e-01,  1.13669599e+00,
        6.39169915e-01,  5.61526778e+01,  4.30961328e+03]), array([ 9.51792307e-01, -1.28613861e-03,  4.47151714e-01,  1.13631152e+00,
        6.38885893e-01,  5.61336848e+01,  4.30769824e+03]), array([9.36284278e-01, 1.49899782e-02, 4.54178315e-01, 1.12543021e+00,
       6.28500669e-01, 5.55961488e+01, 4.23767627e+03]), array([8.55359603e-01, 9.98603921e-02, 5.01749697e-01, 1.03969376e+00,
       5.74347807e-01, 5.13607763e+01, 3.87254926e+03]), array([9.05172458e-01, 4.76312171e-02, 4.72409496e-01, 1.06276552e+00,
       6.07673428e-01, 5.25005190e+01, 4.09724801e+03]), array([ 1.04076022e+00, -9.45863736e-02,  4.75184746e-01,  1.05202791e+00,
        6.98417531e-01,  5.19700819e+01,  4.70909149e+03]), array([9.28993395e-01, 2.28990063e-02, 5.02865218e-01, 1.00393184e+00,
       6.23454193e-01, 4.95941407e+01, 4.20364998e+03]), array([ 1.01101411e+00, -6.39637580e-02,  4.95592509e-01,  1.02114372e+00,
        6.78878305e-01,  5.04444060e+01,  4.57734800e+03]), array([ 1.03028181e+00, -8.36749825e-02,  4.93759080e-01,  1.03686593e+00,
        6.91455352e-01,  5.12210818e+01,  4.66214897e+03]), array([ 1.03036389e+00, -8.36579238e-02,  4.76341343e-01,  1.02926483e+00,
        6.91444467e-01,  5.08455883e+01,  4.66207546e+03]), array([ 1.01711925e+00, -6.97420673e-02,  4.84234813e-01,  1.01335571e+00,
        6.82565243e-01,  5.00596792e+01,  4.60220730e+03]), array([ 1.07538237e+00, -1.31099930e-01,  4.93224313e-01,  1.02482464e+00,
        7.21715563e-01,  5.06262432e+01,  4.86617893e+03])]
average_updates:  [0.0014961164, 0.0005013158, 0.00018288675, 0.00024222009, 0.000111818066, 0.00025767586, 0.0005027919, 4.8914666e-05, 2.3332452e-05, 2.8471635e-05, 0.00012932767, 0.00011767796]
max_updates:  [31.968266, 33.740818, 30.241287, 30.320036, 17.480745, 27.394987, 31.969082, 28.451975, 26.181953, 26.636108, 28.733593, 28.518435]
trigger times: 0
Loss after 32390784 batches: 0.6214
Time to train on one home:  284.41551184654236
trigger times: 0
Loss after 32491008 batches: 0.6187
Time to train on one home:  266.8181641101837
trigger times: 0
Loss after 32630400 batches: 0.3636
Time to train on one home:  285.7138991355896
trigger times: 0
Loss after 32769792 batches: 0.5032
Time to train on one home:  281.82133388519287
trigger times: 0
Loss after 32905728 batches: 0.3356
Time to train on one home:  279.6568615436554
trigger times: 0
Loss after 33045120 batches: 0.5925
Time to train on one home:  284.14848804473877
trigger times: 0
Loss after 33184512 batches: 0.7568
Time to train on one home:  283.47942638397217
trigger times: 0
Loss after 33323904 batches: 0.9768
Time to train on one home:  279.2039020061493
trigger times: 0
Loss after 33463296 batches: 0.6682
Time to train on one home:  281.85778975486755
trigger times: 0
Loss after 33602688 batches: 0.9087
Time to train on one home:  281.219929933548
trigger times: 0
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
wandb: Network error (ReadTimeout), entering retry loop.
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
wandb: Network error (ReadTimeout), entering retry loop.
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
Loss after 33742080 batches: 0.5673
Time to train on one home:  277.986603975296
trigger times: 0
Loss after 33881472 batches: 0.5700
Time to train on one home:  281.63270473480225
trigger times: 0
Loss after 34020864 batches: 0.1712
Time to train on one home:  280.5572934150696
trigger times: 0
Loss after 34160256 batches: 0.3934
Time to train on one home:  281.45175290107727
trigger times: 0
Loss after 34248960 batches: 1.0070
Time to train on one home:  256.1413872241974
trigger times: 0
Loss after 34388352 batches: 0.1162
Time to train on one home:  280.88577365875244
trigger times: 0
Loss after 34527744 batches: 0.7512
Time to train on one home:  280.3969624042511
trigger times: 0
Loss after 34667136 batches: 0.2778
Time to train on one home:  280.5177254676819
trigger times: 0
Loss after 34799616 batches: 0.6911
Time to train on one home:  259.5685555934906
trigger times: 0
Loss after 34939008 batches: 0.4484
Time to train on one home:  278.659264087677
train_results:  [0.8901078716447787, 0.9349105318779605, 0.8893140983429584, 0.8303114544677012, 0.789609422315808, 0.7515671798110131, 0.7124707276299076, 0.7066488653874816, 0.6633709092111791, 0.6325365912487749, 0.6104207014088734, 0.5915938224837515, 0.566966826466148]
Round_12_average_test_results:  [array([ 9.52216596e-01, -1.73126830e-03,  4.47091333e-01,  1.13669599e+00,
        6.39169915e-01,  5.61526778e+01,  4.30961328e+03]), array([ 9.51792307e-01, -1.28613861e-03,  4.47151714e-01,  1.13631152e+00,
        6.38885893e-01,  5.61336848e+01,  4.30769824e+03]), array([9.36284278e-01, 1.49899782e-02, 4.54178315e-01, 1.12543021e+00,
       6.28500669e-01, 5.55961488e+01, 4.23767627e+03]), array([8.55359603e-01, 9.98603921e-02, 5.01749697e-01, 1.03969376e+00,
       5.74347807e-01, 5.13607763e+01, 3.87254926e+03]), array([9.05172458e-01, 4.76312171e-02, 4.72409496e-01, 1.06276552e+00,
       6.07673428e-01, 5.25005190e+01, 4.09724801e+03]), array([ 1.04076022e+00, -9.45863736e-02,  4.75184746e-01,  1.05202791e+00,
        6.98417531e-01,  5.19700819e+01,  4.70909149e+03]), array([9.28993395e-01, 2.28990063e-02, 5.02865218e-01, 1.00393184e+00,
       6.23454193e-01, 4.95941407e+01, 4.20364998e+03]), array([ 1.01101411e+00, -6.39637580e-02,  4.95592509e-01,  1.02114372e+00,
        6.78878305e-01,  5.04444060e+01,  4.57734800e+03]), array([ 1.03028181e+00, -8.36749825e-02,  4.93759080e-01,  1.03686593e+00,
        6.91455352e-01,  5.12210818e+01,  4.66214897e+03]), array([ 1.03036389e+00, -8.36579238e-02,  4.76341343e-01,  1.02926483e+00,
        6.91444467e-01,  5.08455883e+01,  4.66207546e+03]), array([ 1.01711925e+00, -6.97420673e-02,  4.84234813e-01,  1.01335571e+00,
        6.82565243e-01,  5.00596792e+01,  4.60220730e+03]), array([ 1.07538237e+00, -1.31099930e-01,  4.93224313e-01,  1.02482464e+00,
        7.21715563e-01,  5.06262432e+01,  4.86617893e+03]), array([ 1.01247784e+00, -6.47441366e-02,  4.93082791e-01,  1.02191834e+00,
        6.79376237e-01,  5.04826722e+01,  4.58070529e+03])]
average_updates:  [0.0014961164, 0.0005013158, 0.00018288675, 0.00024222009, 0.000111818066, 0.00025767586, 0.0005027919, 4.8914666e-05, 2.3332452e-05, 2.8471635e-05, 0.00012932767, 0.00011767796, 5.3394397e-05]
max_updates:  [31.968266, 33.740818, 30.241287, 30.320036, 17.480745, 27.394987, 31.969082, 28.451975, 26.181953, 26.636108, 28.733593, 28.518435, 26.741669]
trigger times: 0
Loss after 35078400 batches: 0.5895
Time to train on one home:  280.4208505153656
trigger times: 0
Loss after 35178624 batches: 0.6105
Time to train on one home:  262.11198472976685
trigger times: 0
Loss after 35318016 batches: 0.3514
Time to train on one home:  282.7342963218689
trigger times: 0
Loss after 35457408 batches: 0.4491
Time to train on one home:  284.8309278488159
trigger times: 0
Loss after 35593344 batches: 0.3103
Time to train on one home:  280.35532903671265
trigger times: 0
Loss after 35732736 batches: 0.5693
Time to train on one home:  282.370267868042
trigger times: 0
Loss after 35872128 batches: 0.7646
Time to train on one home:  280.82590413093567
trigger times: 0
Loss after 36011520 batches: 0.9736
Time to train on one home:  286.1417706012726
trigger times: 0
Loss after 36150912 batches: 0.6191
Time to train on one home:  282.7835600376129
trigger times: 0
Loss after 36290304 batches: 0.9026
Time to train on one home:  286.005291223526
trigger times: 0
Loss after 36429696 batches: 0.5472
Time to train on one home:  281.50602889060974
trigger times: 0
Loss after 36569088 batches: 0.5230
Time to train on one home:  283.0059792995453
trigger times: 0
Loss after 36708480 batches: 0.1590
Time to train on one home:  282.92798495292664
trigger times: 0
Loss after 36847872 batches: 0.3598
Time to train on one home:  280.6919503211975
trigger times: 0
Loss after 36936576 batches: 0.9908
Time to train on one home:  260.35846638679504
trigger times: 0
Loss after 37075968 batches: 0.1042
Time to train on one home:  284.2978436946869
trigger times: 0
Loss after 37215360 batches: 0.7471
Time to train on one home:  280.7923285961151
trigger times: 0
Loss after 37354752 batches: 0.2748
Time to train on one home:  282.20427775382996
trigger times: 0
Loss after 37487232 batches: 0.6168
Time to train on one home:  278.6930742263794
trigger times: 0
Loss after 37626624 batches: 0.4306
Time to train on one home:  281.5461964607239
train_results:  [0.8901078716447787, 0.9349105318779605, 0.8893140983429584, 0.8303114544677012, 0.789609422315808, 0.7515671798110131, 0.7124707276299076, 0.7066488653874816, 0.6633709092111791, 0.6325365912487749, 0.6104207014088734, 0.5915938224837515, 0.566966826466148, 0.5446662006085178]
Round_13_average_test_results:  [array([ 9.52216596e-01, -1.73126830e-03,  4.47091333e-01,  1.13669599e+00,
        6.39169915e-01,  5.61526778e+01,  4.30961328e+03]), array([ 9.51792307e-01, -1.28613861e-03,  4.47151714e-01,  1.13631152e+00,
        6.38885893e-01,  5.61336848e+01,  4.30769824e+03]), array([9.36284278e-01, 1.49899782e-02, 4.54178315e-01, 1.12543021e+00,
       6.28500669e-01, 5.55961488e+01, 4.23767627e+03]), array([8.55359603e-01, 9.98603921e-02, 5.01749697e-01, 1.03969376e+00,
       5.74347807e-01, 5.13607763e+01, 3.87254926e+03]), array([9.05172458e-01, 4.76312171e-02, 4.72409496e-01, 1.06276552e+00,
       6.07673428e-01, 5.25005190e+01, 4.09724801e+03]), array([ 1.04076022e+00, -9.45863736e-02,  4.75184746e-01,  1.05202791e+00,
        6.98417531e-01,  5.19700819e+01,  4.70909149e+03]), array([9.28993395e-01, 2.28990063e-02, 5.02865218e-01, 1.00393184e+00,
       6.23454193e-01, 4.95941407e+01, 4.20364998e+03]), array([ 1.01101411e+00, -6.39637580e-02,  4.95592509e-01,  1.02114372e+00,
        6.78878305e-01,  5.04444060e+01,  4.57734800e+03]), array([ 1.03028181e+00, -8.36749825e-02,  4.93759080e-01,  1.03686593e+00,
        6.91455352e-01,  5.12210818e+01,  4.66214897e+03]), array([ 1.03036389e+00, -8.36579238e-02,  4.76341343e-01,  1.02926483e+00,
        6.91444467e-01,  5.08455883e+01,  4.66207546e+03]), array([ 1.01711925e+00, -6.97420673e-02,  4.84234813e-01,  1.01335571e+00,
        6.82565243e-01,  5.00596792e+01,  4.60220730e+03]), array([ 1.07538237e+00, -1.31099930e-01,  4.93224313e-01,  1.02482464e+00,
        7.21715563e-01,  5.06262432e+01,  4.86617893e+03]), array([ 1.01247784e+00, -6.47441366e-02,  4.93082791e-01,  1.02191834e+00,
        6.79376237e-01,  5.04826722e+01,  4.58070529e+03]), array([ 1.06565810e+00, -1.20056864e-01,  4.56055542e-01,  1.03418879e+00,
        7.14669366e-01,  5.10888313e+01,  4.81866971e+03])]
average_updates:  [0.0014961164, 0.0005013158, 0.00018288675, 0.00024222009, 0.000111818066, 0.00025767586, 0.0005027919, 4.8914666e-05, 2.3332452e-05, 2.8471635e-05, 0.00012932767, 0.00011767796, 5.3394397e-05, 1.4270191e-06]
max_updates:  [31.968266, 33.740818, 30.241287, 30.320036, 17.480745, 27.394987, 31.969082, 28.451975, 26.181953, 26.636108, 28.733593, 28.518435, 26.741669, 25.546679]
trigger times: 0
Loss after 37766016 batches: 0.6073
Time to train on one home:  283.14328598976135
trigger times: 0
Loss after 37866240 batches: 0.5826
Time to train on one home:  264.04958152770996
trigger times: 0
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
Loss after 38005632 batches: 0.3413
Time to train on one home:  280.92221236228943
trigger times: 0
Loss after 38145024 batches: 0.4196
Time to train on one home:  281.66860795021057
trigger times: 0
Loss after 38280960 batches: 0.2827
Time to train on one home:  282.1997768878937
trigger times: 0
Loss after 38420352 batches: 0.5378
Time to train on one home:  282.279639005661
trigger times: 0
Loss after 38559744 batches: 0.7331
Time to train on one home:  282.5346541404724
trigger times: 0
Loss after 38699136 batches: 0.9975
Time to train on one home:  284.1324348449707
trigger times: 0
Loss after 38838528 batches: 0.6331
Time to train on one home:  282.18381094932556
trigger times: 0
Loss after 38977920 batches: 0.9060
Time to train on one home:  280.56856775283813
trigger times: 0
Loss after 39117312 batches: 0.4831
Time to train on one home:  282.28098320961
trigger times: 0
Loss after 39256704 batches: 0.5034
Time to train on one home:  280.1518828868866
trigger times: 0
Loss after 39396096 batches: 0.1446
Time to train on one home:  279.86890745162964
trigger times: 0
Loss after 39535488 batches: 0.3522
Time to train on one home:  279.6445469856262
trigger times: 0
Loss after 39624192 batches: 0.9805
Time to train on one home:  259.9839050769806
trigger times: 0
Loss after 39763584 batches: 0.0988
Time to train on one home:  283.839613199234
trigger times: 0
Loss after 39902976 batches: 0.7143
Time to train on one home:  282.39938592910767
trigger times: 0
Loss after 40042368 batches: 0.2427
Time to train on one home:  285.07514572143555
trigger times: 0
Loss after 40174848 batches: 0.5652
Time to train on one home:  281.48270082473755
trigger times: 0
Loss after 40314240 batches: 0.3782
Time to train on one home:  284.2651035785675
train_results:  [0.8901078716447787, 0.9349105318779605, 0.8893140983429584, 0.8303114544677012, 0.789609422315808, 0.7515671798110131, 0.7124707276299076, 0.7066488653874816, 0.6633709092111791, 0.6325365912487749, 0.6104207014088734, 0.5915938224837515, 0.566966826466148, 0.5446662006085178, 0.5252033630079355]
Round_14_average_test_results:  [array([ 9.52216596e-01, -1.73126830e-03,  4.47091333e-01,  1.13669599e+00,
        6.39169915e-01,  5.61526778e+01,  4.30961328e+03]), array([ 9.51792307e-01, -1.28613861e-03,  4.47151714e-01,  1.13631152e+00,
        6.38885893e-01,  5.61336848e+01,  4.30769824e+03]), array([9.36284278e-01, 1.49899782e-02, 4.54178315e-01, 1.12543021e+00,
       6.28500669e-01, 5.55961488e+01, 4.23767627e+03]), array([8.55359603e-01, 9.98603921e-02, 5.01749697e-01, 1.03969376e+00,
       5.74347807e-01, 5.13607763e+01, 3.87254926e+03]), array([9.05172458e-01, 4.76312171e-02, 4.72409496e-01, 1.06276552e+00,
       6.07673428e-01, 5.25005190e+01, 4.09724801e+03]), array([ 1.04076022e+00, -9.45863736e-02,  4.75184746e-01,  1.05202791e+00,
        6.98417531e-01,  5.19700819e+01,  4.70909149e+03]), array([9.28993395e-01, 2.28990063e-02, 5.02865218e-01, 1.00393184e+00,
       6.23454193e-01, 4.95941407e+01, 4.20364998e+03]), array([ 1.01101411e+00, -6.39637580e-02,  4.95592509e-01,  1.02114372e+00,
        6.78878305e-01,  5.04444060e+01,  4.57734800e+03]), array([ 1.03028181e+00, -8.36749825e-02,  4.93759080e-01,  1.03686593e+00,
        6.91455352e-01,  5.12210818e+01,  4.66214897e+03]), array([ 1.03036389e+00, -8.36579238e-02,  4.76341343e-01,  1.02926483e+00,
        6.91444467e-01,  5.08455883e+01,  4.66207546e+03]), array([ 1.01711925e+00, -6.97420673e-02,  4.84234813e-01,  1.01335571e+00,
        6.82565243e-01,  5.00596792e+01,  4.60220730e+03]), array([ 1.07538237e+00, -1.31099930e-01,  4.93224313e-01,  1.02482464e+00,
        7.21715563e-01,  5.06262432e+01,  4.86617893e+03]), array([ 1.01247784e+00, -6.47441366e-02,  4.93082791e-01,  1.02191834e+00,
        6.79376237e-01,  5.04826722e+01,  4.58070529e+03]), array([ 1.06565810e+00, -1.20056864e-01,  4.56055542e-01,  1.03418879e+00,
        7.14669366e-01,  5.10888313e+01,  4.81866971e+03]), array([ 1.09075590e+00, -1.47237860e-01,  4.82341197e-01,  1.03251999e+00,
        7.32012615e-01,  5.10063928e+01,  4.93560691e+03])]
average_updates:  [0.0014961164, 0.0005013158, 0.00018288675, 0.00024222009, 0.000111818066, 0.00025767586, 0.0005027919, 4.8914666e-05, 2.3332452e-05, 2.8471635e-05, 0.00012932767, 0.00011767796, 5.3394397e-05, 1.4270191e-06, 3.849122e-05]
max_updates:  [31.968266, 33.740818, 30.241287, 30.320036, 17.480745, 27.394987, 31.969082, 28.451975, 26.181953, 26.636108, 28.733593, 28.518435, 26.741669, 25.546679, 27.212788]
trigger times: 0
Loss after 40453632 batches: 0.5800
Time to train on one home:  259.8579771518707
trigger times: 0
Loss after 40553856 batches: 0.6051
Time to train on one home:  258.7479634284973
trigger times: 0
Loss after 40693248 batches: 0.3512
Time to train on one home:  277.2113244533539
trigger times: 0
Loss after 40832640 batches: 0.3961
Time to train on one home:  278.27036118507385
trigger times: 0
Loss after 40968576 batches: 0.2857
Time to train on one home:  281.2919807434082
trigger times: 0
Loss after 41107968 batches: 0.5170
Time to train on one home:  282.0454533100128
trigger times: 0
Loss after 41247360 batches: 0.7137
Time to train on one home:  282.5430929660797
trigger times: 0
Loss after 41386752 batches: 0.9752
Time to train on one home:  282.0889251232147
trigger times: 0
Loss after 41526144 batches: 0.5796
Time to train on one home:  280.4655981063843
trigger times: 0
Loss after 41665536 batches: 0.9043
Time to train on one home:  285.128520488739
trigger times: 0
Loss after 41804928 batches: 0.4266
Time to train on one home:  281.6497230529785
trigger times: 0
Loss after 41944320 batches: 0.4752
Time to train on one home:  281.682993888855
trigger times: 0
Loss after 42083712 batches: 0.1255
Time to train on one home:  281.5195701122284
trigger times: 0
Loss after 42223104 batches: 0.2800
Time to train on one home:  281.24582529067993
trigger times: 0
Loss after 42311808 batches: 0.9506
Time to train on one home:  261.2384994029999
trigger times: 0
Loss after 42451200 batches: 0.0950
Time to train on one home:  283.50056409835815
trigger times: 0
Loss after 42590592 batches: 0.7069
Time to train on one home:  283.4746310710907
trigger times: 0
Loss after 42729984 batches: 0.2502
Time to train on one home:  282.4468250274658
trigger times: 0
Loss after 42862464 batches: 0.4739
Time to train on one home:  279.93525409698486
trigger times: 0
Loss after 43001856 batches: 0.3355
Time to train on one home:  281.336713552475
train_results:  [0.8901078716447787, 0.9349105318779605, 0.8893140983429584, 0.8303114544677012, 0.789609422315808, 0.7515671798110131, 0.7124707276299076, 0.7066488653874816, 0.6633709092111791, 0.6325365912487749, 0.6104207014088734, 0.5915938224837515, 0.566966826466148, 0.5446662006085178, 0.5252033630079355, 0.5013626328965267]
Round_15_average_test_results:  /home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
wandb: Network error (ReadTimeout), entering retry loop.
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
[array([ 9.52216596e-01, -1.73126830e-03,  4.47091333e-01,  1.13669599e+00,
        6.39169915e-01,  5.61526778e+01,  4.30961328e+03]), array([ 9.51792307e-01, -1.28613861e-03,  4.47151714e-01,  1.13631152e+00,
        6.38885893e-01,  5.61336848e+01,  4.30769824e+03]), array([9.36284278e-01, 1.49899782e-02, 4.54178315e-01, 1.12543021e+00,
       6.28500669e-01, 5.55961488e+01, 4.23767627e+03]), array([8.55359603e-01, 9.98603921e-02, 5.01749697e-01, 1.03969376e+00,
       5.74347807e-01, 5.13607763e+01, 3.87254926e+03]), array([9.05172458e-01, 4.76312171e-02, 4.72409496e-01, 1.06276552e+00,
       6.07673428e-01, 5.25005190e+01, 4.09724801e+03]), array([ 1.04076022e+00, -9.45863736e-02,  4.75184746e-01,  1.05202791e+00,
        6.98417531e-01,  5.19700819e+01,  4.70909149e+03]), array([9.28993395e-01, 2.28990063e-02, 5.02865218e-01, 1.00393184e+00,
       6.23454193e-01, 4.95941407e+01, 4.20364998e+03]), array([ 1.01101411e+00, -6.39637580e-02,  4.95592509e-01,  1.02114372e+00,
        6.78878305e-01,  5.04444060e+01,  4.57734800e+03]), array([ 1.03028181e+00, -8.36749825e-02,  4.93759080e-01,  1.03686593e+00,
        6.91455352e-01,  5.12210818e+01,  4.66214897e+03]), array([ 1.03036389e+00, -8.36579238e-02,  4.76341343e-01,  1.02926483e+00,
        6.91444467e-01,  5.08455883e+01,  4.66207546e+03]), array([ 1.01711925e+00, -6.97420673e-02,  4.84234813e-01,  1.01335571e+00,
        6.82565243e-01,  5.00596792e+01,  4.60220730e+03]), array([ 1.07538237e+00, -1.31099930e-01,  4.93224313e-01,  1.02482464e+00,
        7.21715563e-01,  5.06262432e+01,  4.86617893e+03]), array([ 1.01247784e+00, -6.47441366e-02,  4.93082791e-01,  1.02191834e+00,
        6.79376237e-01,  5.04826722e+01,  4.58070529e+03]), array([ 1.06565810e+00, -1.20056864e-01,  4.56055542e-01,  1.03418879e+00,
        7.14669366e-01,  5.10888313e+01,  4.81866971e+03]), array([ 1.09075590e+00, -1.47237860e-01,  4.82341197e-01,  1.03251999e+00,
        7.32012615e-01,  5.10063928e+01,  4.93560691e+03]), array([ 1.04813751e+00, -1.02799301e-01,  4.84740054e-01,  1.01545494e+00,
        7.03657915e-01,  5.01633807e+01,  4.74442493e+03])]
average_updates:  [0.0014961164, 0.0005013158, 0.00018288675, 0.00024222009, 0.000111818066, 0.00025767586, 0.0005027919, 4.8914666e-05, 2.3332452e-05, 2.8471635e-05, 0.00012932767, 0.00011767796, 5.3394397e-05, 1.4270191e-06, 3.849122e-05, 0.00010241566]
max_updates:  [31.968266, 33.740818, 30.241287, 30.320036, 17.480745, 27.394987, 31.969082, 28.451975, 26.181953, 26.636108, 28.733593, 28.518435, 26.741669, 25.546679, 27.212788, 26.576614]
trigger times: 0
Loss after 43141248 batches: 0.5512
Time to train on one home:  280.7785587310791
trigger times: 0
Loss after 43241472 batches: 0.5807
Time to train on one home:  264.4404308795929
trigger times: 0
Loss after 43380864 batches: 0.3268
Time to train on one home:  281.3358008861542
trigger times: 0
Loss after 43520256 batches: 0.3407
Time to train on one home:  282.4205541610718
trigger times: 0
Loss after 43656192 batches: 0.2818
Time to train on one home:  282.01236152648926
trigger times: 0
Loss after 43795584 batches: 0.4919
Time to train on one home:  280.5869152545929
trigger times: 0
Loss after 43934976 batches: 0.6386
Time to train on one home:  281.12464237213135
trigger times: 0
Loss after 44074368 batches: 0.9908
Time to train on one home:  281.2116334438324
trigger times: 0
Loss after 44213760 batches: 0.5732
Time to train on one home:  279.96938586235046
trigger times: 0
Loss after 44353152 batches: 0.8786
Time to train on one home:  279.10322642326355
trigger times: 0
Loss after 44492544 batches: 0.3917
Time to train on one home:  281.25613474845886
trigger times: 0
Loss after 44631936 batches: 0.4304
Time to train on one home:  283.2615637779236
trigger times: 0
Loss after 44771328 batches: 0.1408
Time to train on one home:  283.9054355621338
trigger times: 0
Loss after 44910720 batches: 0.2866
Time to train on one home:  280.23917865753174
trigger times: 0
Loss after 44999424 batches: 0.9949
Time to train on one home:  257.244829416275
trigger times: 0
Loss after 45138816 batches: 0.0854
Time to train on one home:  283.306857585907
trigger times: 0
Loss after 45278208 batches: 0.6843
Time to train on one home:  281.40675139427185
trigger times: 0
Loss after 45417600 batches: 0.2220
Time to train on one home:  282.021577835083
trigger times: 0
Loss after 45550080 batches: 0.4216
Time to train on one home:  279.1752550601959
trigger times: 0
Loss after 45689472 batches: 0.3031
Time to train on one home:  281.3402888774872
train_results:  [0.8901078716447787, 0.9349105318779605, 0.8893140983429584, 0.8303114544677012, 0.789609422315808, 0.7515671798110131, 0.7124707276299076, 0.7066488653874816, 0.6633709092111791, 0.6325365912487749, 0.6104207014088734, 0.5915938224837515, 0.566966826466148, 0.5446662006085178, 0.5252033630079355, 0.5013626328965267, 0.48075751792701304]
Round_16_average_test_results:  [array([ 9.52216596e-01, -1.73126830e-03,  4.47091333e-01,  1.13669599e+00,
        6.39169915e-01,  5.61526778e+01,  4.30961328e+03]), array([ 9.51792307e-01, -1.28613861e-03,  4.47151714e-01,  1.13631152e+00,
        6.38885893e-01,  5.61336848e+01,  4.30769824e+03]), array([9.36284278e-01, 1.49899782e-02, 4.54178315e-01, 1.12543021e+00,
       6.28500669e-01, 5.55961488e+01, 4.23767627e+03]), array([8.55359603e-01, 9.98603921e-02, 5.01749697e-01, 1.03969376e+00,
       5.74347807e-01, 5.13607763e+01, 3.87254926e+03]), array([9.05172458e-01, 4.76312171e-02, 4.72409496e-01, 1.06276552e+00,
       6.07673428e-01, 5.25005190e+01, 4.09724801e+03]), array([ 1.04076022e+00, -9.45863736e-02,  4.75184746e-01,  1.05202791e+00,
        6.98417531e-01,  5.19700819e+01,  4.70909149e+03]), array([9.28993395e-01, 2.28990063e-02, 5.02865218e-01, 1.00393184e+00,
       6.23454193e-01, 4.95941407e+01, 4.20364998e+03]), array([ 1.01101411e+00, -6.39637580e-02,  4.95592509e-01,  1.02114372e+00,
        6.78878305e-01,  5.04444060e+01,  4.57734800e+03]), array([ 1.03028181e+00, -8.36749825e-02,  4.93759080e-01,  1.03686593e+00,
        6.91455352e-01,  5.12210818e+01,  4.66214897e+03]), array([ 1.03036389e+00, -8.36579238e-02,  4.76341343e-01,  1.02926483e+00,
        6.91444467e-01,  5.08455883e+01,  4.66207546e+03]), array([ 1.01711925e+00, -6.97420673e-02,  4.84234813e-01,  1.01335571e+00,
        6.82565243e-01,  5.00596792e+01,  4.60220730e+03]), array([ 1.07538237e+00, -1.31099930e-01,  4.93224313e-01,  1.02482464e+00,
        7.21715563e-01,  5.06262432e+01,  4.86617893e+03]), array([ 1.01247784e+00, -6.47441366e-02,  4.93082791e-01,  1.02191834e+00,
        6.79376237e-01,  5.04826722e+01,  4.58070529e+03]), array([ 1.06565810e+00, -1.20056864e-01,  4.56055542e-01,  1.03418879e+00,
        7.14669366e-01,  5.10888313e+01,  4.81866971e+03]), array([ 1.09075590e+00, -1.47237860e-01,  4.82341197e-01,  1.03251999e+00,
        7.32012615e-01,  5.10063928e+01,  4.93560691e+03]), array([ 1.04813751e+00, -1.02799301e-01,  4.84740054e-01,  1.01545494e+00,
        7.03657915e-01,  5.01633807e+01,  4.74442493e+03]), array([ 1.03921674e+00, -9.34817849e-02,  4.91544501e-01,  1.01643637e+00,
        6.97712732e-01,  5.02118632e+01,  4.70433942e+03])]
average_updates:  [0.0014961164, 0.0005013158, 0.00018288675, 0.00024222009, 0.000111818066, 0.00025767586, 0.0005027919, 4.8914666e-05, 2.3332452e-05, 2.8471635e-05, 0.00012932767, 0.00011767796, 5.3394397e-05, 1.4270191e-06, 3.849122e-05, 0.00010241566, 2.2424751e-06]
max_updates:  [31.968266, 33.740818, 30.241287, 30.320036, 17.480745, 27.394987, 31.969082, 28.451975, 26.181953, 26.636108, 28.733593, 28.518435, 26.741669, 25.546679, 27.212788, 26.576614, 26.9095]
trigger times: 0
Loss after 45828864 batches: 0.5616
Time to train on one home:  280.6815896034241
trigger times: 0
Loss after 45929088 batches: 0.5663
Time to train on one home:  263.6452693939209
trigger times: 0
Loss after 46068480 batches: 0.3195
Time to train on one home:  279.4810161590576
trigger times: 0
Loss after 46207872 batches: 0.3199
Time to train on one home:  283.27439975738525
trigger times: 0
Loss after 46343808 batches: 0.2672
Time to train on one home:  281.38925290107727
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
wandb: Network error (ReadTimeout), entering retry loop.
trigger times: 0
Loss after 46483200 batches: 0.4697
Time to train on one home:  282.292307138443
trigger times: 0
Loss after 46622592 batches: 0.6689
Time to train on one home:  279.8064479827881
trigger times: 0
Loss after 46761984 batches: 0.9763
Time to train on one home:  277.87005734443665
trigger times: 0
Loss after 46901376 batches: 0.5370
Time to train on one home:  278.05282855033875
trigger times: 0
Loss after 47040768 batches: 0.8566
Time to train on one home:  280.3999457359314
trigger times: 0
Loss after 47180160 batches: 0.3176
Time to train on one home:  281.7585542201996
trigger times: 0
Loss after 47319552 batches: 0.3802
Time to train on one home:  279.76347970962524
trigger times: 0
Loss after 47458944 batches: 0.1151
Time to train on one home:  279.737886428833
trigger times: 0
Loss after 47598336 batches: 0.2365
Time to train on one home:  280.83320021629333
trigger times: 0
Loss after 47687040 batches: 0.9975
Time to train on one home:  232.6028230190277
trigger times: 0
Loss after 47826432 batches: 0.0743
Time to train on one home:  279.27233242988586
trigger times: 0
Loss after 47965824 batches: 0.6431
Time to train on one home:  278.4622120857239
trigger times: 0
Loss after 48105216 batches: 0.2067
Time to train on one home:  280.0261425971985
trigger times: 0
Loss after 48237696 batches: 0.3757
Time to train on one home:  277.12932109832764
trigger times: 0
Loss after 48377088 batches: 0.2563
Time to train on one home:  278.3538236618042
train_results:  [0.8901078716447787, 0.9349105318779605, 0.8893140983429584, 0.8303114544677012, 0.789609422315808, 0.7515671798110131, 0.7124707276299076, 0.7066488653874816, 0.6633709092111791, 0.6325365912487749, 0.6104207014088734, 0.5915938224837515, 0.566966826466148, 0.5446662006085178, 0.5252033630079355, 0.5013626328965267, 0.48075751792701304, 0.4573024647954422]
Round_17_average_test_results:  [array([ 9.52216596e-01, -1.73126830e-03,  4.47091333e-01,  1.13669599e+00,
        6.39169915e-01,  5.61526778e+01,  4.30961328e+03]), array([ 9.51792307e-01, -1.28613861e-03,  4.47151714e-01,  1.13631152e+00,
        6.38885893e-01,  5.61336848e+01,  4.30769824e+03]), array([9.36284278e-01, 1.49899782e-02, 4.54178315e-01, 1.12543021e+00,
       6.28500669e-01, 5.55961488e+01, 4.23767627e+03]), array([8.55359603e-01, 9.98603921e-02, 5.01749697e-01, 1.03969376e+00,
       5.74347807e-01, 5.13607763e+01, 3.87254926e+03]), array([9.05172458e-01, 4.76312171e-02, 4.72409496e-01, 1.06276552e+00,
       6.07673428e-01, 5.25005190e+01, 4.09724801e+03]), array([ 1.04076022e+00, -9.45863736e-02,  4.75184746e-01,  1.05202791e+00,
        6.98417531e-01,  5.19700819e+01,  4.70909149e+03]), array([9.28993395e-01, 2.28990063e-02, 5.02865218e-01, 1.00393184e+00,
       6.23454193e-01, 4.95941407e+01, 4.20364998e+03]), array([ 1.01101411e+00, -6.39637580e-02,  4.95592509e-01,  1.02114372e+00,
        6.78878305e-01,  5.04444060e+01,  4.57734800e+03]), array([ 1.03028181e+00, -8.36749825e-02,  4.93759080e-01,  1.03686593e+00,
        6.91455352e-01,  5.12210818e+01,  4.66214897e+03]), array([ 1.03036389e+00, -8.36579238e-02,  4.76341343e-01,  1.02926483e+00,
        6.91444467e-01,  5.08455883e+01,  4.66207546e+03]), array([ 1.01711925e+00, -6.97420673e-02,  4.84234813e-01,  1.01335571e+00,
        6.82565243e-01,  5.00596792e+01,  4.60220730e+03]), array([ 1.07538237e+00, -1.31099930e-01,  4.93224313e-01,  1.02482464e+00,
        7.21715563e-01,  5.06262432e+01,  4.86617893e+03]), array([ 1.01247784e+00, -6.47441366e-02,  4.93082791e-01,  1.02191834e+00,
        6.79376237e-01,  5.04826722e+01,  4.58070529e+03]), array([ 1.06565810e+00, -1.20056864e-01,  4.56055542e-01,  1.03418879e+00,
        7.14669366e-01,  5.10888313e+01,  4.81866971e+03]), array([ 1.09075590e+00, -1.47237860e-01,  4.82341197e-01,  1.03251999e+00,
        7.32012615e-01,  5.10063928e+01,  4.93560691e+03]), array([ 1.04813751e+00, -1.02799301e-01,  4.84740054e-01,  1.01545494e+00,
        7.03657915e-01,  5.01633807e+01,  4.74442493e+03]), array([ 1.03921674e+00, -9.34817849e-02,  4.91544501e-01,  1.01643637e+00,
        6.97712732e-01,  5.02118632e+01,  4.70433942e+03]), array([ 1.10505869e+00, -1.62769475e-01,  4.77239853e-01,  1.03816056e+00,
        7.41922800e-01,  5.12850362e+01,  5.00242655e+03])]
average_updates:  [0.0014961164, 0.0005013158, 0.00018288675, 0.00024222009, 0.000111818066, 0.00025767586, 0.0005027919, 4.8914666e-05, 2.3332452e-05, 2.8471635e-05, 0.00012932767, 0.00011767796, 5.3394397e-05, 1.4270191e-06, 3.849122e-05, 0.00010241566, 2.2424751e-06, 0.00032191136]
max_updates:  [31.968266, 33.740818, 30.241287, 30.320036, 17.480745, 27.394987, 31.969082, 28.451975, 26.181953, 26.636108, 28.733593, 28.518435, 26.741669, 25.546679, 27.212788, 26.576614, 26.9095, 31.61291]
trigger times: 0
Loss after 48516480 batches: 0.5708
Time to train on one home:  282.6129574775696
trigger times: 0
Loss after 48616704 batches: 0.5921
Time to train on one home:  266.39727997779846
trigger times: 0
Loss after 48756096 batches: 0.3150
Time to train on one home:  278.7625935077667
trigger times: 0
Loss after 48895488 batches: 0.2680
Time to train on one home:  281.0272512435913
trigger times: 0
Loss after 49031424 batches: 0.2629
Time to train on one home:  281.80432057380676
trigger times: 0
Loss after 49170816 batches: 0.4487
Time to train on one home:  280.38766288757324
trigger times: 0
Loss after 49310208 batches: 0.6619
Time to train on one home:  279.33480501174927
trigger times: 0
Loss after 49449600 batches: 0.9658
Time to train on one home:  278.6875307559967
trigger times: 0
Loss after 49588992 batches: 0.5169
Time to train on one home:  279.52287912368774
trigger times: 0
Loss after 49728384 batches: 0.8703
Time to train on one home:  281.4325590133667
trigger times: 0
Loss after 49867776 batches: 0.2965
Time to train on one home:  281.5209138393402
trigger times: 0
Loss after 50007168 batches: 0.3555
Time to train on one home:  278.1323091983795
trigger times: 0
Loss after 50146560 batches: 0.1019
Time to train on one home:  279.5999343395233
trigger times: 0
Loss after 50285952 batches: 0.2282
Time to train on one home:  278.07103967666626
trigger times: 0
Loss after 50374656 batches: 1.0159
Time to train on one home:  258.2529892921448
trigger times: 0
Loss after 50514048 batches: 0.0673
Time to train on one home:  280.4127764701843
trigger times: 0
Loss after 50653440 batches: 0.6322
Time to train on one home:  279.5208456516266
trigger times: 0
Loss after 50792832 batches: 0.1909
Time to train on one home:  280.62339663505554
trigger times: 0
Loss after 50925312 batches: 0.2897
Time to train on one home:  276.8309655189514
trigger times: 0
Loss after 51064704 batches: 0.2291
Time to train on one home:  280.1972932815552
train_results:  [0.8901078716447787, 0.9349105318779605, 0.8893140983429584, 0.8303114544677012, 0.789609422315808, 0.7515671798110131, 0.7124707276299076, 0.7066488653874816, 0.6633709092111791, 0.6325365912487749, 0.6104207014088734, 0.5915938224837515, 0.566966826466148, 0.5446662006085178, 0.5252033630079355, 0.5013626328965267, 0.48075751792701304, 0.4573024647954422, 0.4439901093245048]
Round_18_average_test_results:  /home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
wandb: Network error (ReadTimeout), entering retry loop.
[array([ 9.52216596e-01, -1.73126830e-03,  4.47091333e-01,  1.13669599e+00,
        6.39169915e-01,  5.61526778e+01,  4.30961328e+03]), array([ 9.51792307e-01, -1.28613861e-03,  4.47151714e-01,  1.13631152e+00,
        6.38885893e-01,  5.61336848e+01,  4.30769824e+03]), array([9.36284278e-01, 1.49899782e-02, 4.54178315e-01, 1.12543021e+00,
       6.28500669e-01, 5.55961488e+01, 4.23767627e+03]), array([8.55359603e-01, 9.98603921e-02, 5.01749697e-01, 1.03969376e+00,
       5.74347807e-01, 5.13607763e+01, 3.87254926e+03]), array([9.05172458e-01, 4.76312171e-02, 4.72409496e-01, 1.06276552e+00,
       6.07673428e-01, 5.25005190e+01, 4.09724801e+03]), array([ 1.04076022e+00, -9.45863736e-02,  4.75184746e-01,  1.05202791e+00,
        6.98417531e-01,  5.19700819e+01,  4.70909149e+03]), array([9.28993395e-01, 2.28990063e-02, 5.02865218e-01, 1.00393184e+00,
       6.23454193e-01, 4.95941407e+01, 4.20364998e+03]), array([ 1.01101411e+00, -6.39637580e-02,  4.95592509e-01,  1.02114372e+00,
        6.78878305e-01,  5.04444060e+01,  4.57734800e+03]), array([ 1.03028181e+00, -8.36749825e-02,  4.93759080e-01,  1.03686593e+00,
        6.91455352e-01,  5.12210818e+01,  4.66214897e+03]), array([ 1.03036389e+00, -8.36579238e-02,  4.76341343e-01,  1.02926483e+00,
        6.91444467e-01,  5.08455883e+01,  4.66207546e+03]), array([ 1.01711925e+00, -6.97420673e-02,  4.84234813e-01,  1.01335571e+00,
        6.82565243e-01,  5.00596792e+01,  4.60220730e+03]), array([ 1.07538237e+00, -1.31099930e-01,  4.93224313e-01,  1.02482464e+00,
        7.21715563e-01,  5.06262432e+01,  4.86617893e+03]), array([ 1.01247784e+00, -6.47441366e-02,  4.93082791e-01,  1.02191834e+00,
        6.79376237e-01,  5.04826722e+01,  4.58070529e+03]), array([ 1.06565810e+00, -1.20056864e-01,  4.56055542e-01,  1.03418879e+00,
        7.14669366e-01,  5.10888313e+01,  4.81866971e+03]), array([ 1.09075590e+00, -1.47237860e-01,  4.82341197e-01,  1.03251999e+00,
        7.32012615e-01,  5.10063928e+01,  4.93560691e+03]), array([ 1.04813751e+00, -1.02799301e-01,  4.84740054e-01,  1.01545494e+00,
        7.03657915e-01,  5.01633807e+01,  4.74442493e+03]), array([ 1.03921674e+00, -9.34817849e-02,  4.91544501e-01,  1.01643637e+00,
        6.97712732e-01,  5.02118632e+01,  4.70433942e+03]), array([ 1.10505869e+00, -1.62769475e-01,  4.77239853e-01,  1.03816056e+00,
        7.41922800e-01,  5.12850362e+01,  5.00242655e+03]), array([ 1.18094165e+00, -2.41024964e-01,  4.19080025e-01,  1.07737547e+00,
        7.91854908e-01,  5.32222494e+01,  5.33909438e+03])]
average_updates:  [0.0014961164, 0.0005013158, 0.00018288675, 0.00024222009, 0.000111818066, 0.00025767586, 0.0005027919, 4.8914666e-05, 2.3332452e-05, 2.8471635e-05, 0.00012932767, 0.00011767796, 5.3394397e-05, 1.4270191e-06, 3.849122e-05, 0.00010241566, 2.2424751e-06, 0.00032191136, 9.432342e-06]
max_updates:  [31.968266, 33.740818, 30.241287, 30.320036, 17.480745, 27.394987, 31.969082, 28.451975, 26.181953, 26.636108, 28.733593, 28.518435, 26.741669, 25.546679, 27.212788, 26.576614, 26.9095, 31.61291, 27.595427]
trigger times: 0
Loss after 51204096 batches: 0.5632
Time to train on one home:  279.6948735713959
trigger times: 0
Loss after 51304320 batches: 0.5457
Time to train on one home:  261.997447013855
trigger times: 0
Loss after 51443712 batches: 0.2947
Time to train on one home:  280.69930624961853
trigger times: 0
Loss after 51583104 batches: 0.2473
Time to train on one home:  277.5395109653473
trigger times: 0
Loss after 51719040 batches: 0.2509
Time to train on one home:  277.7885630130768
trigger times: 0
Loss after 51858432 batches: 0.4151
Time to train on one home:  278.2048223018646
trigger times: 0
Loss after 51997824 batches: 0.6198
Time to train on one home:  279.5127604007721
trigger times: 0
Loss after 52137216 batches: 0.9487
Time to train on one home:  278.2565474510193
trigger times: 0
Loss after 52276608 batches: 0.4933
Time to train on one home:  279.5779678821564
trigger times: 0
Loss after 52416000 batches: 0.8693
Time to train on one home:  280.18863344192505
trigger times: 0
Loss after 52555392 batches: 0.2507
Time to train on one home:  279.49875926971436
trigger times: 0
Loss after 52694784 batches: 0.3524
Time to train on one home:  280.8876721858978
trigger times: 0
Loss after 52834176 batches: 0.0937
Time to train on one home:  280.49518966674805
trigger times: 0
Loss after 52973568 batches: 0.2124
Time to train on one home:  281.1710205078125
trigger times: 0
Loss after 53062272 batches: 0.9856
Time to train on one home:  257.3395187854767
trigger times: 0
Loss after 53201664 batches: 0.0695
Time to train on one home:  280.3806188106537
trigger times: 0
Loss after 53341056 batches: 0.5869
Time to train on one home:  282.4375972747803
trigger times: 0
Loss after 53480448 batches: 0.1614
Time to train on one home:  279.83563232421875
trigger times: 0
Loss after 53612928 batches: 0.2765
Time to train on one home:  277.69047236442566
trigger times: 0
Loss after 53752320 batches: 0.2008
Time to train on one home:  280.379022359848
train_results:  [0.8901078716447787, 0.9349105318779605, 0.8893140983429584, 0.8303114544677012, 0.789609422315808, 0.7515671798110131, 0.7124707276299076, 0.7066488653874816, 0.6633709092111791, 0.6325365912487749, 0.6104207014088734, 0.5915938224837515, 0.566966826466148, 0.5446662006085178, 0.5252033630079355, 0.5013626328965267, 0.48075751792701304, 0.4573024647954422, 0.4439901093245048, 0.421890860491426]
Round_19_average_test_results:  [array([ 9.52216596e-01, -1.73126830e-03,  4.47091333e-01,  1.13669599e+00,
        6.39169915e-01,  5.61526778e+01,  4.30961328e+03]), array([ 9.51792307e-01, -1.28613861e-03,  4.47151714e-01,  1.13631152e+00,
        6.38885893e-01,  5.61336848e+01,  4.30769824e+03]), array([9.36284278e-01, 1.49899782e-02, 4.54178315e-01, 1.12543021e+00,
       6.28500669e-01, 5.55961488e+01, 4.23767627e+03]), array([8.55359603e-01, 9.98603921e-02, 5.01749697e-01, 1.03969376e+00,
       5.74347807e-01, 5.13607763e+01, 3.87254926e+03]), array([9.05172458e-01, 4.76312171e-02, 4.72409496e-01, 1.06276552e+00,
       6.07673428e-01, 5.25005190e+01, 4.09724801e+03]), array([ 1.04076022e+00, -9.45863736e-02,  4.75184746e-01,  1.05202791e+00,
        6.98417531e-01,  5.19700819e+01,  4.70909149e+03]), array([9.28993395e-01, 2.28990063e-02, 5.02865218e-01, 1.00393184e+00,
       6.23454193e-01, 4.95941407e+01, 4.20364998e+03]), array([ 1.01101411e+00, -6.39637580e-02,  4.95592509e-01,  1.02114372e+00,
        6.78878305e-01,  5.04444060e+01,  4.57734800e+03]), array([ 1.03028181e+00, -8.36749825e-02,  4.93759080e-01,  1.03686593e+00,
        6.91455352e-01,  5.12210818e+01,  4.66214897e+03]), array([ 1.03036389e+00, -8.36579238e-02,  4.76341343e-01,  1.02926483e+00,
        6.91444467e-01,  5.08455883e+01,  4.66207546e+03]), array([ 1.01711925e+00, -6.97420673e-02,  4.84234813e-01,  1.01335571e+00,
        6.82565243e-01,  5.00596792e+01,  4.60220730e+03]), array([ 1.07538237e+00, -1.31099930e-01,  4.93224313e-01,  1.02482464e+00,
        7.21715563e-01,  5.06262432e+01,  4.86617893e+03]), array([ 1.01247784e+00, -6.47441366e-02,  4.93082791e-01,  1.02191834e+00,
        6.79376237e-01,  5.04826722e+01,  4.58070529e+03]), array([ 1.06565810e+00, -1.20056864e-01,  4.56055542e-01,  1.03418879e+00,
        7.14669366e-01,  5.10888313e+01,  4.81866971e+03]), array([ 1.09075590e+00, -1.47237860e-01,  4.82341197e-01,  1.03251999e+00,
        7.32012615e-01,  5.10063928e+01,  4.93560691e+03]), array([ 1.04813751e+00, -1.02799301e-01,  4.84740054e-01,  1.01545494e+00,
        7.03657915e-01,  5.01633807e+01,  4.74442493e+03]), array([ 1.03921674e+00, -9.34817849e-02,  4.91544501e-01,  1.01643637e+00,
        6.97712732e-01,  5.02118632e+01,  4.70433942e+03]), array([ 1.10505869e+00, -1.62769475e-01,  4.77239853e-01,  1.03816056e+00,
        7.41922800e-01,  5.12850362e+01,  5.00242655e+03]), array([ 1.18094165e+00, -2.41024964e-01,  4.19080025e-01,  1.07737547e+00,
        7.91854908e-01,  5.32222494e+01,  5.33909438e+03]), array([ 1.09296562e+00, -1.50055481e-01,  4.82775498e-01,  1.04456616e+00,
        7.33810442e-01,  5.16014723e+01,  4.94772874e+03])]
average_updates:  /home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
[0.0014961164, 0.0005013158, 0.00018288675, 0.00024222009, 0.000111818066, 0.00025767586, 0.0005027919, 4.8914666e-05, 2.3332452e-05, 2.8471635e-05, 0.00012932767, 0.00011767796, 5.3394397e-05, 1.4270191e-06, 3.849122e-05, 0.00010241566, 2.2424751e-06, 0.00032191136, 9.432342e-06, 6.006446e-05]
max_updates:  [31.968266, 33.740818, 30.241287, 30.320036, 17.480745, 27.394987, 31.969082, 28.451975, 26.181953, 26.636108, 28.733593, 28.518435, 26.741669, 25.546679, 27.212788, 26.576614, 26.9095, 31.61291, 27.595427, 26.624987]
trigger times: 0
Loss after 53891712 batches: 0.5311
Time to train on one home:  282.3811972141266
trigger times: 0
Loss after 53991936 batches: 0.5523
Time to train on one home:  263.3203570842743
trigger times: 0
Loss after 54131328 batches: 0.3073
Time to train on one home:  283.3004984855652
trigger times: 0
Loss after 54270720 batches: 0.2285
Time to train on one home:  278.56989550590515
trigger times: 0
Loss after 54406656 batches: 0.2359
Time to train on one home:  274.93525195121765
trigger times: 0
Loss after 54546048 batches: 0.3743
Time to train on one home:  278.5557324886322
trigger times: 0
Loss after 54685440 batches: 0.6338
Time to train on one home:  280.0795533657074
trigger times: 0
Loss after 54824832 batches: 0.9386
Time to train on one home:  280.0565037727356
trigger times: 0
Loss after 54964224 batches: 0.4875
Time to train on one home:  280.78567361831665
trigger times: 0
Loss after 55103616 batches: 0.8296
Time to train on one home:  282.3360524177551
trigger times: 0
Loss after 55243008 batches: 0.2624
Time to train on one home:  280.9017195701599
trigger times: 0
Loss after 55382400 batches: 0.2779
Time to train on one home:  279.5782663822174
trigger times: 0
Loss after 55521792 batches: 0.0809
Time to train on one home:  281.2837884426117
trigger times: 0
Loss after 55661184 batches: 0.1971
Time to train on one home:  279.9401888847351
trigger times: 0
Loss after 55749888 batches: 0.9827
Time to train on one home:  256.9019696712494
trigger times: 0
Loss after 55889280 batches: 0.0628
Time to train on one home:  280.7584638595581
trigger times: 0
Loss after 56028672 batches: 0.5503
Time to train on one home:  282.3022599220276
trigger times: 0
Loss after 56168064 batches: 0.1851
Time to train on one home:  277.5717444419861
trigger times: 0
Loss after 56300544 batches: 0.2446
Time to train on one home:  274.6525049209595
trigger times: 0
Loss after 56439936 batches: 0.1686
Time to train on one home:  277.10542488098145
train_results:  [0.8901078716447787, 0.9349105318779605, 0.8893140983429584, 0.8303114544677012, 0.789609422315808, 0.7515671798110131, 0.7124707276299076, 0.7066488653874816, 0.6633709092111791, 0.6325365912487749, 0.6104207014088734, 0.5915938224837515, 0.566966826466148, 0.5446662006085178, 0.5252033630079355, 0.5013626328965267, 0.48075751792701304, 0.4573024647954422, 0.4439901093245048, 0.421890860491426, 0.4065665043633054]
Round_20_average_test_results:  [array([ 9.52216596e-01, -1.73126830e-03,  4.47091333e-01,  1.13669599e+00,
        6.39169915e-01,  5.61526778e+01,  4.30961328e+03]), array([ 9.51792307e-01, -1.28613861e-03,  4.47151714e-01,  1.13631152e+00,
        6.38885893e-01,  5.61336848e+01,  4.30769824e+03]), array([9.36284278e-01, 1.49899782e-02, 4.54178315e-01, 1.12543021e+00,
       6.28500669e-01, 5.55961488e+01, 4.23767627e+03]), array([8.55359603e-01, 9.98603921e-02, 5.01749697e-01, 1.03969376e+00,
       5.74347807e-01, 5.13607763e+01, 3.87254926e+03]), array([9.05172458e-01, 4.76312171e-02, 4.72409496e-01, 1.06276552e+00,
       6.07673428e-01, 5.25005190e+01, 4.09724801e+03]), array([ 1.04076022e+00, -9.45863736e-02,  4.75184746e-01,  1.05202791e+00,
        6.98417531e-01,  5.19700819e+01,  4.70909149e+03]), array([9.28993395e-01, 2.28990063e-02, 5.02865218e-01, 1.00393184e+00,
       6.23454193e-01, 4.95941407e+01, 4.20364998e+03]), array([ 1.01101411e+00, -6.39637580e-02,  4.95592509e-01,  1.02114372e+00,
        6.78878305e-01,  5.04444060e+01,  4.57734800e+03]), array([ 1.03028181e+00, -8.36749825e-02,  4.93759080e-01,  1.03686593e+00,
        6.91455352e-01,  5.12210818e+01,  4.66214897e+03]), array([ 1.03036389e+00, -8.36579238e-02,  4.76341343e-01,  1.02926483e+00,
        6.91444467e-01,  5.08455883e+01,  4.66207546e+03]), array([ 1.01711925e+00, -6.97420673e-02,  4.84234813e-01,  1.01335571e+00,
        6.82565243e-01,  5.00596792e+01,  4.60220730e+03]), array([ 1.07538237e+00, -1.31099930e-01,  4.93224313e-01,  1.02482464e+00,
        7.21715563e-01,  5.06262432e+01,  4.86617893e+03]), array([ 1.01247784e+00, -6.47441366e-02,  4.93082791e-01,  1.02191834e+00,
        6.79376237e-01,  5.04826722e+01,  4.58070529e+03]), array([ 1.06565810e+00, -1.20056864e-01,  4.56055542e-01,  1.03418879e+00,
        7.14669366e-01,  5.10888313e+01,  4.81866971e+03]), array([ 1.09075590e+00, -1.47237860e-01,  4.82341197e-01,  1.03251999e+00,
        7.32012615e-01,  5.10063928e+01,  4.93560691e+03]), array([ 1.04813751e+00, -1.02799301e-01,  4.84740054e-01,  1.01545494e+00,
        7.03657915e-01,  5.01633807e+01,  4.74442493e+03]), array([ 1.03921674e+00, -9.34817849e-02,  4.91544501e-01,  1.01643637e+00,
        6.97712732e-01,  5.02118632e+01,  4.70433942e+03]), array([ 1.10505869e+00, -1.62769475e-01,  4.77239853e-01,  1.03816056e+00,
        7.41922800e-01,  5.12850362e+01,  5.00242655e+03]), array([ 1.18094165e+00, -2.41024964e-01,  4.19080025e-01,  1.07737547e+00,
        7.91854908e-01,  5.32222494e+01,  5.33909438e+03]), array([ 1.09296562e+00, -1.50055481e-01,  4.82775498e-01,  1.04456616e+00,
        7.33810442e-01,  5.16014723e+01,  4.94772874e+03]), array([ 1.11906777e+00, -1.76918339e-01,  4.38547121e-01,  1.04781155e+00,
        7.50950698e-01,  5.17617944e+01,  5.06329714e+03])]
average_updates:  [0.0014961164, 0.0005013158, 0.00018288675, 0.00024222009, 0.000111818066, 0.00025767586, 0.0005027919, 4.8914666e-05, 2.3332452e-05, 2.8471635e-05, 0.00012932767, 0.00011767796, 5.3394397e-05, 1.4270191e-06, 3.849122e-05, 0.00010241566, 2.2424751e-06, 0.00032191136, 9.432342e-06, 6.006446e-05, 4.6540124e-05]
max_updates:  [31.968266, 33.740818, 30.241287, 30.320036, 17.480745, 27.394987, 31.969082, 28.451975, 26.181953, 26.636108, 28.733593, 28.518435, 26.741669, 25.546679, 27.212788, 26.576614, 26.9095, 31.61291, 27.595427, 26.624987, 28.660727]
trigger times: 0
Loss after 56579328 batches: 0.5316
Time to train on one home:  281.2651615142822
trigger times: 0
Loss after 56679552 batches: 0.5323
Time to train on one home:  263.7613799571991
trigger times: 0
Loss after 56818944 batches: 0.2822
Time to train on one home:  281.9563434123993
trigger times: 0
Loss after 56958336 batches: 0.1975
Time to train on one home:  281.2208025455475
trigger times: 0
Loss after 57094272 batches: 0.2542
Time to train on one home:  278.3342034816742
trigger times: 0
Loss after 57233664 batches: 0.3501
Time to train on one home:  280.08709931373596
trigger times: 0
Loss after 57373056 batches: 0.6085
Time to train on one home:  281.1110396385193
trigger times: 0
Loss after 57512448 batches: 0.9052
Time to train on one home:  280.7225980758667
trigger times: 0
Loss after 57651840 batches: 0.4431
Time to train on one home:  279.48601150512695
trigger times: 0
Loss after 57791232 batches: 0.8011
Time to train on one home:  281.6917612552643
trigger times: 0
Loss after 57930624 batches: 0.2271
Time to train on one home:  283.36089730262756
trigger times: 0
Loss after 58070016 batches: 0.2840
Time to train on one home:  282.15204405784607
trigger times: 0
Loss after 58209408 batches: 0.0749
Time to train on one home:  278.4562270641327
trigger times: 0
Loss after 58348800 batches: 0.1860
Time to train on one home:  281.7116918563843
trigger times: 0
Loss after 58437504 batches: 0.9851
Time to train on one home:  257.66004848480225
trigger times: 0
Loss after 58576896 batches: 0.0585
Time to train on one home:  281.44679832458496
trigger times: 0
Loss after 58716288 batches: 0.4922
Time to train on one home:  283.0743386745453
trigger times: 0
Loss after 58855680 batches: 0.1454
Time to train on one home:  282.154584646225
trigger times: 0
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
Loss after 58988160 batches: 0.2280
Time to train on one home:  275.6600408554077
trigger times: 0
Loss after 59127552 batches: 0.1945
Time to train on one home:  278.7275056838989
train_results:  [0.8901078716447787, 0.9349105318779605, 0.8893140983429584, 0.8303114544677012, 0.789609422315808, 0.7515671798110131, 0.7124707276299076, 0.7066488653874816, 0.6633709092111791, 0.6325365912487749, 0.6104207014088734, 0.5915938224837515, 0.566966826466148, 0.5446662006085178, 0.5252033630079355, 0.5013626328965267, 0.48075751792701304, 0.4573024647954422, 0.4439901093245048, 0.421890860491426, 0.4065665043633054, 0.38906418861094966]
Round_21_average_test_results:  [array([ 9.52216596e-01, -1.73126830e-03,  4.47091333e-01,  1.13669599e+00,
        6.39169915e-01,  5.61526778e+01,  4.30961328e+03]), array([ 9.51792307e-01, -1.28613861e-03,  4.47151714e-01,  1.13631152e+00,
        6.38885893e-01,  5.61336848e+01,  4.30769824e+03]), array([9.36284278e-01, 1.49899782e-02, 4.54178315e-01, 1.12543021e+00,
       6.28500669e-01, 5.55961488e+01, 4.23767627e+03]), array([8.55359603e-01, 9.98603921e-02, 5.01749697e-01, 1.03969376e+00,
       5.74347807e-01, 5.13607763e+01, 3.87254926e+03]), array([9.05172458e-01, 4.76312171e-02, 4.72409496e-01, 1.06276552e+00,
       6.07673428e-01, 5.25005190e+01, 4.09724801e+03]), array([ 1.04076022e+00, -9.45863736e-02,  4.75184746e-01,  1.05202791e+00,
        6.98417531e-01,  5.19700819e+01,  4.70909149e+03]), array([9.28993395e-01, 2.28990063e-02, 5.02865218e-01, 1.00393184e+00,
       6.23454193e-01, 4.95941407e+01, 4.20364998e+03]), array([ 1.01101411e+00, -6.39637580e-02,  4.95592509e-01,  1.02114372e+00,
        6.78878305e-01,  5.04444060e+01,  4.57734800e+03]), array([ 1.03028181e+00, -8.36749825e-02,  4.93759080e-01,  1.03686593e+00,
        6.91455352e-01,  5.12210818e+01,  4.66214897e+03]), array([ 1.03036389e+00, -8.36579238e-02,  4.76341343e-01,  1.02926483e+00,
        6.91444467e-01,  5.08455883e+01,  4.66207546e+03]), array([ 1.01711925e+00, -6.97420673e-02,  4.84234813e-01,  1.01335571e+00,
        6.82565243e-01,  5.00596792e+01,  4.60220730e+03]), array([ 1.07538237e+00, -1.31099930e-01,  4.93224313e-01,  1.02482464e+00,
        7.21715563e-01,  5.06262432e+01,  4.86617893e+03]), array([ 1.01247784e+00, -6.47441366e-02,  4.93082791e-01,  1.02191834e+00,
        6.79376237e-01,  5.04826722e+01,  4.58070529e+03]), array([ 1.06565810e+00, -1.20056864e-01,  4.56055542e-01,  1.03418879e+00,
        7.14669366e-01,  5.10888313e+01,  4.81866971e+03]), array([ 1.09075590e+00, -1.47237860e-01,  4.82341197e-01,  1.03251999e+00,
        7.32012615e-01,  5.10063928e+01,  4.93560691e+03]), array([ 1.04813751e+00, -1.02799301e-01,  4.84740054e-01,  1.01545494e+00,
        7.03657915e-01,  5.01633807e+01,  4.74442493e+03]), array([ 1.03921674e+00, -9.34817849e-02,  4.91544501e-01,  1.01643637e+00,
        6.97712732e-01,  5.02118632e+01,  4.70433942e+03]), array([ 1.10505869e+00, -1.62769475e-01,  4.77239853e-01,  1.03816056e+00,
        7.41922800e-01,  5.12850362e+01,  5.00242655e+03]), array([ 1.18094165e+00, -2.41024964e-01,  4.19080025e-01,  1.07737547e+00,
        7.91854908e-01,  5.32222494e+01,  5.33909438e+03]), array([ 1.09296562e+00, -1.50055481e-01,  4.82775498e-01,  1.04456616e+00,
        7.33810442e-01,  5.16014723e+01,  4.94772874e+03]), array([ 1.11906777e+00, -1.76918339e-01,  4.38547121e-01,  1.04781155e+00,
        7.50950698e-01,  5.17617944e+01,  5.06329714e+03]), array([ 1.16157051e+00, -2.21376855e-01,  4.31314956e-01,  1.06815408e+00,
        7.79318132e-01,  5.27667134e+01,  5.25456506e+03])]
average_updates:  [0.0014961164, 0.0005013158, 0.00018288675, 0.00024222009, 0.000111818066, 0.00025767586, 0.0005027919, 4.8914666e-05, 2.3332452e-05, 2.8471635e-05, 0.00012932767, 0.00011767796, 5.3394397e-05, 1.4270191e-06, 3.849122e-05, 0.00010241566, 2.2424751e-06, 0.00032191136, 9.432342e-06, 6.006446e-05, 4.6540124e-05, 5.8109857e-05]
max_updates:  [31.968266, 33.740818, 30.241287, 30.320036, 17.480745, 27.394987, 31.969082, 28.451975, 26.181953, 26.636108, 28.733593, 28.518435, 26.741669, 25.546679, 27.212788, 26.576614, 26.9095, 31.61291, 27.595427, 26.624987, 28.660727, 31.729393]
trigger times: 0
Loss after 59266944 batches: 0.5125
Time to train on one home:  281.61136198043823
trigger times: 0
Loss after 59367168 batches: 0.5137
Time to train on one home:  263.4168062210083
trigger times: 0
Loss after 59506560 batches: 0.2855
Time to train on one home:  281.21922278404236
trigger times: 0
Loss after 59645952 batches: 0.1884
Time to train on one home:  280.57168650627136
trigger times: 0
Loss after 59781888 batches: 0.2320
Time to train on one home:  278.69789123535156
trigger times: 0
Loss after 59921280 batches: 0.3286
Time to train on one home:  281.7851252555847
trigger times: 0
Loss after 60060672 batches: 0.5671
Time to train on one home:  279.2488491535187
trigger times: 0
Loss after 60200064 batches: 0.8989
Time to train on one home:  281.7964084148407
trigger times: 0
Loss after 60339456 batches: 0.4137
Time to train on one home:  279.4935894012451
trigger times: 0
Loss after 60478848 batches: 0.8111
Time to train on one home:  281.30967950820923
trigger times: 0
Loss after 60618240 batches: 0.2275
Time to train on one home:  265.26591062545776
trigger times: 0
Loss after 60757632 batches: 0.2517
Time to train on one home:  277.94985365867615
trigger times: 0
Loss after 60897024 batches: 0.0765
Time to train on one home:  280.62131118774414
trigger times: 0
Loss after 61036416 batches: 0.1740
Time to train on one home:  280.4248640537262
trigger times: 0
Loss after 61125120 batches: 0.9736
Time to train on one home:  257.5186173915863
trigger times: 0
Loss after 61264512 batches: 0.0495
Time to train on one home:  280.302627325058
trigger times: 0
Loss after 61403904 batches: 0.4658
Time to train on one home:  278.62846755981445
trigger times: 0
Loss after 61543296 batches: 0.1482
Time to train on one home:  277.69633316993713
trigger times: 0
Loss after 61675776 batches: 0.1854
Time to train on one home:  276.89594626426697
trigger times: 0
Loss after 61815168 batches: 0.1494
Time to train on one home:  281.29419016838074
train_results:  [0.8901078716447787, 0.9349105318779605, 0.8893140983429584, 0.8303114544677012, 0.789609422315808, 0.7515671798110131, 0.7124707276299076, 0.7066488653874816, 0.6633709092111791, 0.6325365912487749, 0.6104207014088734, 0.5915938224837515, 0.566966826466148, 0.5446662006085178, 0.5252033630079355, 0.5013626328965267, 0.48075751792701304, 0.4573024647954422, 0.4439901093245048, 0.421890860491426, 0.4065665043633054, 0.38906418861094966, 0.3726607171659886]
Round_22_average_test_results:  /home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
[array([ 9.52216596e-01, -1.73126830e-03,  4.47091333e-01,  1.13669599e+00,
        6.39169915e-01,  5.61526778e+01,  4.30961328e+03]), array([ 9.51792307e-01, -1.28613861e-03,  4.47151714e-01,  1.13631152e+00,
        6.38885893e-01,  5.61336848e+01,  4.30769824e+03]), array([9.36284278e-01, 1.49899782e-02, 4.54178315e-01, 1.12543021e+00,
       6.28500669e-01, 5.55961488e+01, 4.23767627e+03]), array([8.55359603e-01, 9.98603921e-02, 5.01749697e-01, 1.03969376e+00,
       5.74347807e-01, 5.13607763e+01, 3.87254926e+03]), array([9.05172458e-01, 4.76312171e-02, 4.72409496e-01, 1.06276552e+00,
       6.07673428e-01, 5.25005190e+01, 4.09724801e+03]), array([ 1.04076022e+00, -9.45863736e-02,  4.75184746e-01,  1.05202791e+00,
        6.98417531e-01,  5.19700819e+01,  4.70909149e+03]), array([9.28993395e-01, 2.28990063e-02, 5.02865218e-01, 1.00393184e+00,
       6.23454193e-01, 4.95941407e+01, 4.20364998e+03]), array([ 1.01101411e+00, -6.39637580e-02,  4.95592509e-01,  1.02114372e+00,
        6.78878305e-01,  5.04444060e+01,  4.57734800e+03]), array([ 1.03028181e+00, -8.36749825e-02,  4.93759080e-01,  1.03686593e+00,
        6.91455352e-01,  5.12210818e+01,  4.66214897e+03]), array([ 1.03036389e+00, -8.36579238e-02,  4.76341343e-01,  1.02926483e+00,
        6.91444467e-01,  5.08455883e+01,  4.66207546e+03]), array([ 1.01711925e+00, -6.97420673e-02,  4.84234813e-01,  1.01335571e+00,
        6.82565243e-01,  5.00596792e+01,  4.60220730e+03]), array([ 1.07538237e+00, -1.31099930e-01,  4.93224313e-01,  1.02482464e+00,
        7.21715563e-01,  5.06262432e+01,  4.86617893e+03]), array([ 1.01247784e+00, -6.47441366e-02,  4.93082791e-01,  1.02191834e+00,
        6.79376237e-01,  5.04826722e+01,  4.58070529e+03]), array([ 1.06565810e+00, -1.20056864e-01,  4.56055542e-01,  1.03418879e+00,
        7.14669366e-01,  5.10888313e+01,  4.81866971e+03]), array([ 1.09075590e+00, -1.47237860e-01,  4.82341197e-01,  1.03251999e+00,
        7.32012615e-01,  5.10063928e+01,  4.93560691e+03]), array([ 1.04813751e+00, -1.02799301e-01,  4.84740054e-01,  1.01545494e+00,
        7.03657915e-01,  5.01633807e+01,  4.74442493e+03]), array([ 1.03921674e+00, -9.34817849e-02,  4.91544501e-01,  1.01643637e+00,
        6.97712732e-01,  5.02118632e+01,  4.70433942e+03]), array([ 1.10505869e+00, -1.62769475e-01,  4.77239853e-01,  1.03816056e+00,
        7.41922800e-01,  5.12850362e+01,  5.00242655e+03]), array([ 1.18094165e+00, -2.41024964e-01,  4.19080025e-01,  1.07737547e+00,
        7.91854908e-01,  5.32222494e+01,  5.33909438e+03]), array([ 1.09296562e+00, -1.50055481e-01,  4.82775498e-01,  1.04456616e+00,
        7.33810442e-01,  5.16014723e+01,  4.94772874e+03]), array([ 1.11906777e+00, -1.76918339e-01,  4.38547121e-01,  1.04781155e+00,
        7.50950698e-01,  5.17617944e+01,  5.06329714e+03]), array([ 1.16157051e+00, -2.21376855e-01,  4.31314956e-01,  1.06815408e+00,
        7.79318132e-01,  5.27667134e+01,  5.25456506e+03]), array([ 1.25980790e+00, -3.24228986e-01,  3.45816364e-01,  1.09496458e+00,
        8.44944503e-01,  5.40911498e+01,  5.69705200e+03])]
average_updates:  [0.0014961164, 0.0005013158, 0.00018288675, 0.00024222009, 0.000111818066, 0.00025767586, 0.0005027919, 4.8914666e-05, 2.3332452e-05, 2.8471635e-05, 0.00012932767, 0.00011767796, 5.3394397e-05, 1.4270191e-06, 3.849122e-05, 0.00010241566, 2.2424751e-06, 0.00032191136, 9.432342e-06, 6.006446e-05, 4.6540124e-05, 5.8109857e-05, 0.00041441672]
max_updates:  [31.968266, 33.740818, 30.241287, 30.320036, 17.480745, 27.394987, 31.969082, 28.451975, 26.181953, 26.636108, 28.733593, 28.518435, 26.741669, 25.546679, 27.212788, 26.576614, 26.9095, 31.61291, 27.595427, 26.624987, 28.660727, 31.729393, 26.903284]
trigger times: 0
Loss after 61954560 batches: 0.5079
Time to train on one home:  279.71867299079895
trigger times: 0
Loss after 62054784 batches: 0.4771
Time to train on one home:  262.8107979297638
trigger times: 0
Loss after 62194176 batches: 0.2719
Time to train on one home:  279.6314535140991
trigger times: 0
Loss after 62333568 batches: 0.1525
Time to train on one home:  278.86674284935
trigger times: 0
Loss after 62469504 batches: 0.2137
Time to train on one home:  277.56602573394775
trigger times: 0
Loss after 62608896 batches: 0.2971
Time to train on one home:  277.1663658618927
trigger times: 0
Loss after 62748288 batches: 0.5701
Time to train on one home:  278.1156988143921
trigger times: 0
Loss after 62887680 batches: 0.8654
Time to train on one home:  280.4712646007538
trigger times: 0
Loss after 63027072 batches: 0.3528
Time to train on one home:  279.35558104515076
trigger times: 0
Loss after 63166464 batches: 0.7684
Time to train on one home:  279.76484298706055
trigger times: 0
Loss after 63305856 batches: 0.1910
Time to train on one home:  278.9609627723694
trigger times: 0
Loss after 63445248 batches: 0.2421
Time to train on one home:  277.48718643188477
trigger times: 0
Loss after 63584640 batches: 0.0639
Time to train on one home:  278.8822076320648
trigger times: 0
Loss after 63724032 batches: 0.1530
Time to train on one home:  279.6905207633972
trigger times: 0
Loss after 63812736 batches: 0.9917
Time to train on one home:  258.7680435180664
trigger times: 0
Loss after 63952128 batches: 0.0494
Time to train on one home:  279.48834133148193
trigger times: 0
Loss after 64091520 batches: 0.4137
Time to train on one home:  281.401406288147
trigger times: 0
Loss after 64230912 batches: 0.1448
Time to train on one home:  279.02759647369385
trigger times: 0
Loss after 64363392 batches: 0.1856
Time to train on one home:  278.46026253700256
trigger times: 0
Loss after 64502784 batches: 0.1380
Time to train on one home:  279.17244267463684
train_results:  [0.8901078716447787, 0.9349105318779605, 0.8893140983429584, 0.8303114544677012, 0.789609422315808, 0.7515671798110131, 0.7124707276299076, 0.7066488653874816, 0.6633709092111791, 0.6325365912487749, 0.6104207014088734, 0.5915938224837515, 0.566966826466148, 0.5446662006085178, 0.5252033630079355, 0.5013626328965267, 0.48075751792701304, 0.4573024647954422, 0.4439901093245048, 0.421890860491426, 0.4065665043633054, 0.38906418861094966, 0.3726607171659886, 0.3525016604579224]
Round_23_average_test_results:  /home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
[array([ 9.52216596e-01, -1.73126830e-03,  4.47091333e-01,  1.13669599e+00,
        6.39169915e-01,  5.61526778e+01,  4.30961328e+03]), array([ 9.51792307e-01, -1.28613861e-03,  4.47151714e-01,  1.13631152e+00,
        6.38885893e-01,  5.61336848e+01,  4.30769824e+03]), array([9.36284278e-01, 1.49899782e-02, 4.54178315e-01, 1.12543021e+00,
       6.28500669e-01, 5.55961488e+01, 4.23767627e+03]), array([8.55359603e-01, 9.98603921e-02, 5.01749697e-01, 1.03969376e+00,
       5.74347807e-01, 5.13607763e+01, 3.87254926e+03]), array([9.05172458e-01, 4.76312171e-02, 4.72409496e-01, 1.06276552e+00,
       6.07673428e-01, 5.25005190e+01, 4.09724801e+03]), array([ 1.04076022e+00, -9.45863736e-02,  4.75184746e-01,  1.05202791e+00,
        6.98417531e-01,  5.19700819e+01,  4.70909149e+03]), array([9.28993395e-01, 2.28990063e-02, 5.02865218e-01, 1.00393184e+00,
       6.23454193e-01, 4.95941407e+01, 4.20364998e+03]), array([ 1.01101411e+00, -6.39637580e-02,  4.95592509e-01,  1.02114372e+00,
        6.78878305e-01,  5.04444060e+01,  4.57734800e+03]), array([ 1.03028181e+00, -8.36749825e-02,  4.93759080e-01,  1.03686593e+00,
        6.91455352e-01,  5.12210818e+01,  4.66214897e+03]), array([ 1.03036389e+00, -8.36579238e-02,  4.76341343e-01,  1.02926483e+00,
        6.91444467e-01,  5.08455883e+01,  4.66207546e+03]), array([ 1.01711925e+00, -6.97420673e-02,  4.84234813e-01,  1.01335571e+00,
        6.82565243e-01,  5.00596792e+01,  4.60220730e+03]), array([ 1.07538237e+00, -1.31099930e-01,  4.93224313e-01,  1.02482464e+00,
        7.21715563e-01,  5.06262432e+01,  4.86617893e+03]), array([ 1.01247784e+00, -6.47441366e-02,  4.93082791e-01,  1.02191834e+00,
        6.79376237e-01,  5.04826722e+01,  4.58070529e+03]), array([ 1.06565810e+00, -1.20056864e-01,  4.56055542e-01,  1.03418879e+00,
        7.14669366e-01,  5.10888313e+01,  4.81866971e+03]), array([ 1.09075590e+00, -1.47237860e-01,  4.82341197e-01,  1.03251999e+00,
        7.32012615e-01,  5.10063928e+01,  4.93560691e+03]), array([ 1.04813751e+00, -1.02799301e-01,  4.84740054e-01,  1.01545494e+00,
        7.03657915e-01,  5.01633807e+01,  4.74442493e+03]), array([ 1.03921674e+00, -9.34817849e-02,  4.91544501e-01,  1.01643637e+00,
        6.97712732e-01,  5.02118632e+01,  4.70433942e+03]), array([ 1.10505869e+00, -1.62769475e-01,  4.77239853e-01,  1.03816056e+00,
        7.41922800e-01,  5.12850362e+01,  5.00242655e+03]), array([ 1.18094165e+00, -2.41024964e-01,  4.19080025e-01,  1.07737547e+00,
        7.91854908e-01,  5.32222494e+01,  5.33909438e+03]), array([ 1.09296562e+00, -1.50055481e-01,  4.82775498e-01,  1.04456616e+00,
        7.33810442e-01,  5.16014723e+01,  4.94772874e+03]), array([ 1.11906777e+00, -1.76918339e-01,  4.38547121e-01,  1.04781155e+00,
        7.50950698e-01,  5.17617944e+01,  5.06329714e+03]), array([ 1.16157051e+00, -2.21376855e-01,  4.31314956e-01,  1.06815408e+00,
        7.79318132e-01,  5.27667134e+01,  5.25456506e+03]), array([ 1.25980790e+00, -3.24228986e-01,  3.45816364e-01,  1.09496458e+00,
        8.44944503e-01,  5.40911498e+01,  5.69705200e+03]), array([ 1.28761460e+00, -3.53874639e-01,  3.85400915e-01,  1.10025634e+00,
        8.63860364e-01,  5.43525621e+01,  5.82459230e+03])]
average_updates:  [0.0014961164, 0.0005013158, 0.00018288675, 0.00024222009, 0.000111818066, 0.00025767586, 0.0005027919, 4.8914666e-05, 2.3332452e-05, 2.8471635e-05, 0.00012932767, 0.00011767796, 5.3394397e-05, 1.4270191e-06, 3.849122e-05, 0.00010241566, 2.2424751e-06, 0.00032191136, 9.432342e-06, 6.006446e-05, 4.6540124e-05, 5.8109857e-05, 0.00041441672, 4.8161666e-05]
max_updates:  [31.968266, 33.740818, 30.241287, 30.320036, 17.480745, 27.394987, 31.969082, 28.451975, 26.181953, 26.636108, 28.733593, 28.518435, 26.741669, 25.546679, 27.212788, 26.576614, 26.9095, 31.61291, 27.595427, 26.624987, 28.660727, 31.729393, 26.903284, 27.197838]
trigger times: 0
Loss after 64642176 batches: 0.4718
Time to train on one home:  281.36404848098755
trigger times: 0
Loss after 64742400 batches: 0.4991
Time to train on one home:  262.30375480651855
trigger times: 0
Loss after 64881792 batches: 0.2694
Time to train on one home:  281.2390778064728
trigger times: 0
Loss after 65021184 batches: 0.1449
Time to train on one home:  280.5516240596771
trigger times: 0
Loss after 65157120 batches: 0.2176
Time to train on one home:  278.73179173469543
trigger times: 0
Loss after 65296512 batches: 0.2596
Time to train on one home:  278.8476779460907
trigger times: 0
Loss after 65435904 batches: 0.4950
Time to train on one home:  281.462051153183
trigger times: 0
Loss after 65575296 batches: 0.8347
Time to train on one home:  279.0564432144165
trigger times: 0
Loss after 65714688 batches: 0.3608
Time to train on one home:  281.2838649749756
trigger times: 0
Loss after 65854080 batches: 0.7206
Time to train on one home:  279.016907453537
trigger times: 0
Loss after 65993472 batches: 0.1859
Time to train on one home:  278.3634433746338
trigger times: 0
Loss after 66132864 batches: 0.2017
Time to train on one home:  279.9807879924774
trigger times: 0
Loss after 66272256 batches: 0.0516
Time to train on one home:  278.0167646408081
trigger times: 0
Loss after 66411648 batches: 0.1368
Time to train on one home:  280.19982981681824
trigger times: 0
Loss after 66500352 batches: 0.9758
Time to train on one home:  258.7068452835083
trigger times: 0
Loss after 66639744 batches: 0.0463
Time to train on one home:  282.191933631897
trigger times: 0
Loss after 66779136 batches: 0.3845
Time to train on one home:  280.46265292167664
trigger times: 0
Loss after 66918528 batches: 0.1142
Time to train on one home:  280.28786540031433
trigger times: 0
Loss after 67051008 batches: 0.1629
Time to train on one home:  277.19544672966003
trigger times: 0
Loss after 67190400 batches: 0.1257
Time to train on one home:  278.025997877121
train_results:  [0.8901078716447787, 0.9349105318779605, 0.8893140983429584, 0.8303114544677012, 0.789609422315808, 0.7515671798110131, 0.7124707276299076, 0.7066488653874816, 0.6633709092111791, 0.6325365912487749, 0.6104207014088734, 0.5915938224837515, 0.566966826466148, 0.5446662006085178, 0.5252033630079355, 0.5013626328965267, 0.48075751792701304, 0.4573024647954422, 0.4439901093245048, 0.421890860491426, 0.4065665043633054, 0.38906418861094966, 0.3726607171659886, 0.3525016604579224, 0.3329352992321519]
Round_24_average_test_results:  /home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
[array([ 9.52216596e-01, -1.73126830e-03,  4.47091333e-01,  1.13669599e+00,
        6.39169915e-01,  5.61526778e+01,  4.30961328e+03]), array([ 9.51792307e-01, -1.28613861e-03,  4.47151714e-01,  1.13631152e+00,
        6.38885893e-01,  5.61336848e+01,  4.30769824e+03]), array([9.36284278e-01, 1.49899782e-02, 4.54178315e-01, 1.12543021e+00,
       6.28500669e-01, 5.55961488e+01, 4.23767627e+03]), array([8.55359603e-01, 9.98603921e-02, 5.01749697e-01, 1.03969376e+00,
       5.74347807e-01, 5.13607763e+01, 3.87254926e+03]), array([9.05172458e-01, 4.76312171e-02, 4.72409496e-01, 1.06276552e+00,
       6.07673428e-01, 5.25005190e+01, 4.09724801e+03]), array([ 1.04076022e+00, -9.45863736e-02,  4.75184746e-01,  1.05202791e+00,
        6.98417531e-01,  5.19700819e+01,  4.70909149e+03]), array([9.28993395e-01, 2.28990063e-02, 5.02865218e-01, 1.00393184e+00,
       6.23454193e-01, 4.95941407e+01, 4.20364998e+03]), array([ 1.01101411e+00, -6.39637580e-02,  4.95592509e-01,  1.02114372e+00,
        6.78878305e-01,  5.04444060e+01,  4.57734800e+03]), array([ 1.03028181e+00, -8.36749825e-02,  4.93759080e-01,  1.03686593e+00,
        6.91455352e-01,  5.12210818e+01,  4.66214897e+03]), array([ 1.03036389e+00, -8.36579238e-02,  4.76341343e-01,  1.02926483e+00,
        6.91444467e-01,  5.08455883e+01,  4.66207546e+03]), array([ 1.01711925e+00, -6.97420673e-02,  4.84234813e-01,  1.01335571e+00,
        6.82565243e-01,  5.00596792e+01,  4.60220730e+03]), array([ 1.07538237e+00, -1.31099930e-01,  4.93224313e-01,  1.02482464e+00,
        7.21715563e-01,  5.06262432e+01,  4.86617893e+03]), array([ 1.01247784e+00, -6.47441366e-02,  4.93082791e-01,  1.02191834e+00,
        6.79376237e-01,  5.04826722e+01,  4.58070529e+03]), array([ 1.06565810e+00, -1.20056864e-01,  4.56055542e-01,  1.03418879e+00,
        7.14669366e-01,  5.10888313e+01,  4.81866971e+03]), array([ 1.09075590e+00, -1.47237860e-01,  4.82341197e-01,  1.03251999e+00,
        7.32012615e-01,  5.10063928e+01,  4.93560691e+03]), array([ 1.04813751e+00, -1.02799301e-01,  4.84740054e-01,  1.01545494e+00,
        7.03657915e-01,  5.01633807e+01,  4.74442493e+03]), array([ 1.03921674e+00, -9.34817849e-02,  4.91544501e-01,  1.01643637e+00,
        6.97712732e-01,  5.02118632e+01,  4.70433942e+03]), array([ 1.10505869e+00, -1.62769475e-01,  4.77239853e-01,  1.03816056e+00,
        7.41922800e-01,  5.12850362e+01,  5.00242655e+03]), array([ 1.18094165e+00, -2.41024964e-01,  4.19080025e-01,  1.07737547e+00,
        7.91854908e-01,  5.32222494e+01,  5.33909438e+03]), array([ 1.09296562e+00, -1.50055481e-01,  4.82775498e-01,  1.04456616e+00,
        7.33810442e-01,  5.16014723e+01,  4.94772874e+03]), array([ 1.11906777e+00, -1.76918339e-01,  4.38547121e-01,  1.04781155e+00,
        7.50950698e-01,  5.17617944e+01,  5.06329714e+03]), array([ 1.16157051e+00, -2.21376855e-01,  4.31314956e-01,  1.06815408e+00,
        7.79318132e-01,  5.27667134e+01,  5.25456506e+03]), array([ 1.25980790e+00, -3.24228986e-01,  3.45816364e-01,  1.09496458e+00,
        8.44944503e-01,  5.40911498e+01,  5.69705200e+03]), array([ 1.28761460e+00, -3.53874639e-01,  3.85400915e-01,  1.10025634e+00,
        8.63860364e-01,  5.43525621e+01,  5.82459230e+03]), array([ 1.22487172e+00, -2.87522561e-01,  3.78212594e-01,  1.08488305e+00,
        8.21523409e-01,  5.35931232e+01,  5.53913474e+03])]
average_updates:  [0.0014961164, 0.0005013158, 0.00018288675, 0.00024222009, 0.000111818066, 0.00025767586, 0.0005027919, 4.8914666e-05, 2.3332452e-05, 2.8471635e-05, 0.00012932767, 0.00011767796, 5.3394397e-05, 1.4270191e-06, 3.849122e-05, 0.00010241566, 2.2424751e-06, 0.00032191136, 9.432342e-06, 6.006446e-05, 4.6540124e-05, 5.8109857e-05, 0.00041441672, 4.8161666e-05, 3.18555e-05]
max_updates:  [31.968266, 33.740818, 30.241287, 30.320036, 17.480745, 27.394987, 31.969082, 28.451975, 26.181953, 26.636108, 28.733593, 28.518435, 26.741669, 25.546679, 27.212788, 26.576614, 26.9095, 31.61291, 27.595427, 26.624987, 28.660727, 31.729393, 26.903284, 27.197838, 28.118515]
trigger times: 0
Loss after 67329792 batches: 0.4676
Time to train on one home:  281.4923300743103
trigger times: 0
Loss after 67430016 batches: 0.4958
Time to train on one home:  261.4036376476288
trigger times: 0
Loss after 67569408 batches: 0.2523
Time to train on one home:  280.5639989376068
trigger times: 0
Loss after 67708800 batches: 0.1284
Time to train on one home:  283.3597867488861
trigger times: 0
Loss after 67844736 batches: 0.2026
Time to train on one home:  280.1085352897644
trigger times: 0
Loss after 67984128 batches: 0.2417
Time to train on one home:  279.4073965549469
trigger times: 0
Loss after 68123520 batches: 0.4953
Time to train on one home:  279.84957218170166
trigger times: 0
Loss after 68262912 batches: 0.8351
Time to train on one home:  278.4848117828369
trigger times: 0
Loss after 68402304 batches: 0.3077
Time to train on one home:  279.1017653942108
trigger times: 0
Loss after 68541696 batches: 0.6650
Time to train on one home:  279.78064823150635
trigger times: 0
Loss after 68681088 batches: 0.1691
Time to train on one home:  279.8122491836548
trigger times: 0
Loss after 68820480 batches: 0.1890
Time to train on one home:  280.7083008289337
trigger times: 0
Loss after 68959872 batches: 0.0582
Time to train on one home:  279.52146792411804
trigger times: 0
Loss after 69099264 batches: 0.1676
Time to train on one home:  278.76814103126526
trigger times: 0
Loss after 69187968 batches: 0.9800
Time to train on one home:  256.2101125717163
trigger times: 0
Loss after 69327360 batches: 0.0431
Time to train on one home:  282.18173837661743
trigger times: 0
Loss after 69466752 batches: 0.3547
Time to train on one home:  281.8038663864136
trigger times: 0
Loss after 69606144 batches: 0.1266
Time to train on one home:  277.394118309021
trigger times: 0
Loss after 69738624 batches: 0.1541
Time to train on one home:  277.39235281944275
trigger times: 0
Loss after 69878016 batches: 0.1241
Time to train on one home:  277.4227330684662
train_results:  [0.8901078716447787, 0.9349105318779605, 0.8893140983429584, 0.8303114544677012, 0.789609422315808, 0.7515671798110131, 0.7124707276299076, 0.7066488653874816, 0.6633709092111791, 0.6325365912487749, 0.6104207014088734, 0.5915938224837515, 0.566966826466148, 0.5446662006085178, 0.5252033630079355, 0.5013626328965267, 0.48075751792701304, 0.4573024647954422, 0.4439901093245048, 0.421890860491426, 0.4065665043633054, 0.38906418861094966, 0.3726607171659886, 0.3525016604579224, 0.3329352992321519, 0.32289660798040065]
Round_25_average_test_results:  /home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
wandb: Network error (ReadTimeout), entering retry loop.
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
[array([ 9.52216596e-01, -1.73126830e-03,  4.47091333e-01,  1.13669599e+00,
        6.39169915e-01,  5.61526778e+01,  4.30961328e+03]), array([ 9.51792307e-01, -1.28613861e-03,  4.47151714e-01,  1.13631152e+00,
        6.38885893e-01,  5.61336848e+01,  4.30769824e+03]), array([9.36284278e-01, 1.49899782e-02, 4.54178315e-01, 1.12543021e+00,
       6.28500669e-01, 5.55961488e+01, 4.23767627e+03]), array([8.55359603e-01, 9.98603921e-02, 5.01749697e-01, 1.03969376e+00,
       5.74347807e-01, 5.13607763e+01, 3.87254926e+03]), array([9.05172458e-01, 4.76312171e-02, 4.72409496e-01, 1.06276552e+00,
       6.07673428e-01, 5.25005190e+01, 4.09724801e+03]), array([ 1.04076022e+00, -9.45863736e-02,  4.75184746e-01,  1.05202791e+00,
        6.98417531e-01,  5.19700819e+01,  4.70909149e+03]), array([9.28993395e-01, 2.28990063e-02, 5.02865218e-01, 1.00393184e+00,
       6.23454193e-01, 4.95941407e+01, 4.20364998e+03]), array([ 1.01101411e+00, -6.39637580e-02,  4.95592509e-01,  1.02114372e+00,
        6.78878305e-01,  5.04444060e+01,  4.57734800e+03]), array([ 1.03028181e+00, -8.36749825e-02,  4.93759080e-01,  1.03686593e+00,
        6.91455352e-01,  5.12210818e+01,  4.66214897e+03]), array([ 1.03036389e+00, -8.36579238e-02,  4.76341343e-01,  1.02926483e+00,
        6.91444467e-01,  5.08455883e+01,  4.66207546e+03]), array([ 1.01711925e+00, -6.97420673e-02,  4.84234813e-01,  1.01335571e+00,
        6.82565243e-01,  5.00596792e+01,  4.60220730e+03]), array([ 1.07538237e+00, -1.31099930e-01,  4.93224313e-01,  1.02482464e+00,
        7.21715563e-01,  5.06262432e+01,  4.86617893e+03]), array([ 1.01247784e+00, -6.47441366e-02,  4.93082791e-01,  1.02191834e+00,
        6.79376237e-01,  5.04826722e+01,  4.58070529e+03]), array([ 1.06565810e+00, -1.20056864e-01,  4.56055542e-01,  1.03418879e+00,
        7.14669366e-01,  5.10888313e+01,  4.81866971e+03]), array([ 1.09075590e+00, -1.47237860e-01,  4.82341197e-01,  1.03251999e+00,
        7.32012615e-01,  5.10063928e+01,  4.93560691e+03]), array([ 1.04813751e+00, -1.02799301e-01,  4.84740054e-01,  1.01545494e+00,
        7.03657915e-01,  5.01633807e+01,  4.74442493e+03]), array([ 1.03921674e+00, -9.34817849e-02,  4.91544501e-01,  1.01643637e+00,
        6.97712732e-01,  5.02118632e+01,  4.70433942e+03]), array([ 1.10505869e+00, -1.62769475e-01,  4.77239853e-01,  1.03816056e+00,
        7.41922800e-01,  5.12850362e+01,  5.00242655e+03]), array([ 1.18094165e+00, -2.41024964e-01,  4.19080025e-01,  1.07737547e+00,
        7.91854908e-01,  5.32222494e+01,  5.33909438e+03]), array([ 1.09296562e+00, -1.50055481e-01,  4.82775498e-01,  1.04456616e+00,
        7.33810442e-01,  5.16014723e+01,  4.94772874e+03]), array([ 1.11906777e+00, -1.76918339e-01,  4.38547121e-01,  1.04781155e+00,
        7.50950698e-01,  5.17617944e+01,  5.06329714e+03]), array([ 1.16157051e+00, -2.21376855e-01,  4.31314956e-01,  1.06815408e+00,
        7.79318132e-01,  5.27667134e+01,  5.25456506e+03]), array([ 1.25980790e+00, -3.24228986e-01,  3.45816364e-01,  1.09496458e+00,
        8.44944503e-01,  5.40911498e+01,  5.69705200e+03]), array([ 1.28761460e+00, -3.53874639e-01,  3.85400915e-01,  1.10025634e+00,
        8.63860364e-01,  5.43525621e+01,  5.82459230e+03]), array([ 1.22487172e+00, -2.87522561e-01,  3.78212594e-01,  1.08488305e+00,
        8.21523409e-01,  5.35931232e+01,  5.53913474e+03]), array([ 1.11586965e+00, -1.73596382e-01,  4.62287320e-01,  1.04955452e+00,
        7.48831073e-01,  5.18478970e+01,  5.04900569e+03])]
average_updates:  [0.0014961164, 0.0005013158, 0.00018288675, 0.00024222009, 0.000111818066, 0.00025767586, 0.0005027919, 4.8914666e-05, 2.3332452e-05, 2.8471635e-05, 0.00012932767, 0.00011767796, 5.3394397e-05, 1.4270191e-06, 3.849122e-05, 0.00010241566, 2.2424751e-06, 0.00032191136, 9.432342e-06, 6.006446e-05, 4.6540124e-05, 5.8109857e-05, 0.00041441672, 4.8161666e-05, 3.18555e-05, 0.00014305966]
max_updates:  [31.968266, 33.740818, 30.241287, 30.320036, 17.480745, 27.394987, 31.969082, 28.451975, 26.181953, 26.636108, 28.733593, 28.518435, 26.741669, 25.546679, 27.212788, 26.576614, 26.9095, 31.61291, 27.595427, 26.624987, 28.660727, 31.729393, 26.903284, 27.197838, 28.118515, 27.13912]
trigger times: 0
Loss after 70017408 batches: 0.4927
Time to train on one home:  281.42344403266907
trigger times: 0
Loss after 70117632 batches: 0.4615
Time to train on one home:  262.73582553863525
trigger times: 0
Loss after 70257024 batches: 0.2544
Time to train on one home:  280.86211705207825
trigger times: 0
Loss after 70396416 batches: 0.1283
Time to train on one home:  283.8997664451599
trigger times: 0
Loss after 70532352 batches: 0.1946
Time to train on one home:  283.0517077445984
trigger times: 0
Loss after 70671744 batches: 0.2188
Time to train on one home:  281.59160685539246
trigger times: 0
Loss after 70811136 batches: 0.4744
Time to train on one home:  282.3988881111145
trigger times: 0
Loss after 70950528 batches: 0.7656
Time to train on one home:  279.91940999031067
trigger times: 0
Loss after 71089920 batches: 0.2799
Time to train on one home:  279.459716796875
trigger times: 0
Loss after 71229312 batches: 0.6162
Time to train on one home:  284.2590777873993
trigger times: 0
Loss after 71368704 batches: 0.1552
Time to train on one home:  282.0677659511566
trigger times: 0
Loss after 71508096 batches: 0.1833
Time to train on one home:  280.55019664764404
trigger times: 0
Loss after 71647488 batches: 0.0569
Time to train on one home:  283.01756525039673
trigger times: 0
Loss after 71786880 batches: 0.1381
Time to train on one home:  284.8788044452667
trigger times: 0
Loss after 71875584 batches: 0.9677
Time to train on one home:  257.92401480674744
trigger times: 0
Loss after 72014976 batches: 0.0415
Time to train on one home:  282.76237416267395
trigger times: 0
Loss after 72154368 batches: 0.3200
Time to train on one home:  278.80930614471436
trigger times: 0
Loss after 72293760 batches: 0.1160
Time to train on one home:  280.75387382507324
trigger times: 0
Loss after 72426240 batches: 0.1505
Time to train on one home:  277.04448890686035
trigger times: 0
Loss after 72565632 batches: 0.1104
Time to train on one home:  281.40796065330505
train_results:  [0.8901078716447787, 0.9349105318779605, 0.8893140983429584, 0.8303114544677012, 0.789609422315808, 0.7515671798110131, 0.7124707276299076, 0.7066488653874816, 0.6633709092111791, 0.6325365912487749, 0.6104207014088734, 0.5915938224837515, 0.566966826466148, 0.5446662006085178, 0.5252033630079355, 0.5013626328965267, 0.48075751792701304, 0.4573024647954422, 0.4439901093245048, 0.421890860491426, 0.4065665043633054, 0.38906418861094966, 0.3726607171659886, 0.3525016604579224, 0.3329352992321519, 0.32289660798040065, 0.3062894219273009]
Round_26_average_test_results:  /home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
wandb: Network error (ReadTimeout), entering retry loop.
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
[array([ 9.52216596e-01, -1.73126830e-03,  4.47091333e-01,  1.13669599e+00,
        6.39169915e-01,  5.61526778e+01,  4.30961328e+03]), array([ 9.51792307e-01, -1.28613861e-03,  4.47151714e-01,  1.13631152e+00,
        6.38885893e-01,  5.61336848e+01,  4.30769824e+03]), array([9.36284278e-01, 1.49899782e-02, 4.54178315e-01, 1.12543021e+00,
       6.28500669e-01, 5.55961488e+01, 4.23767627e+03]), array([8.55359603e-01, 9.98603921e-02, 5.01749697e-01, 1.03969376e+00,
       5.74347807e-01, 5.13607763e+01, 3.87254926e+03]), array([9.05172458e-01, 4.76312171e-02, 4.72409496e-01, 1.06276552e+00,
       6.07673428e-01, 5.25005190e+01, 4.09724801e+03]), array([ 1.04076022e+00, -9.45863736e-02,  4.75184746e-01,  1.05202791e+00,
        6.98417531e-01,  5.19700819e+01,  4.70909149e+03]), array([9.28993395e-01, 2.28990063e-02, 5.02865218e-01, 1.00393184e+00,
       6.23454193e-01, 4.95941407e+01, 4.20364998e+03]), array([ 1.01101411e+00, -6.39637580e-02,  4.95592509e-01,  1.02114372e+00,
        6.78878305e-01,  5.04444060e+01,  4.57734800e+03]), array([ 1.03028181e+00, -8.36749825e-02,  4.93759080e-01,  1.03686593e+00,
        6.91455352e-01,  5.12210818e+01,  4.66214897e+03]), array([ 1.03036389e+00, -8.36579238e-02,  4.76341343e-01,  1.02926483e+00,
        6.91444467e-01,  5.08455883e+01,  4.66207546e+03]), array([ 1.01711925e+00, -6.97420673e-02,  4.84234813e-01,  1.01335571e+00,
        6.82565243e-01,  5.00596792e+01,  4.60220730e+03]), array([ 1.07538237e+00, -1.31099930e-01,  4.93224313e-01,  1.02482464e+00,
        7.21715563e-01,  5.06262432e+01,  4.86617893e+03]), array([ 1.01247784e+00, -6.47441366e-02,  4.93082791e-01,  1.02191834e+00,
        6.79376237e-01,  5.04826722e+01,  4.58070529e+03]), array([ 1.06565810e+00, -1.20056864e-01,  4.56055542e-01,  1.03418879e+00,
        7.14669366e-01,  5.10888313e+01,  4.81866971e+03]), array([ 1.09075590e+00, -1.47237860e-01,  4.82341197e-01,  1.03251999e+00,
        7.32012615e-01,  5.10063928e+01,  4.93560691e+03]), array([ 1.04813751e+00, -1.02799301e-01,  4.84740054e-01,  1.01545494e+00,
        7.03657915e-01,  5.01633807e+01,  4.74442493e+03]), array([ 1.03921674e+00, -9.34817849e-02,  4.91544501e-01,  1.01643637e+00,
        6.97712732e-01,  5.02118632e+01,  4.70433942e+03]), array([ 1.10505869e+00, -1.62769475e-01,  4.77239853e-01,  1.03816056e+00,
        7.41922800e-01,  5.12850362e+01,  5.00242655e+03]), array([ 1.18094165e+00, -2.41024964e-01,  4.19080025e-01,  1.07737547e+00,
        7.91854908e-01,  5.32222494e+01,  5.33909438e+03]), array([ 1.09296562e+00, -1.50055481e-01,  4.82775498e-01,  1.04456616e+00,
        7.33810442e-01,  5.16014723e+01,  4.94772874e+03]), array([ 1.11906777e+00, -1.76918339e-01,  4.38547121e-01,  1.04781155e+00,
        7.50950698e-01,  5.17617944e+01,  5.06329714e+03]), array([ 1.16157051e+00, -2.21376855e-01,  4.31314956e-01,  1.06815408e+00,
        7.79318132e-01,  5.27667134e+01,  5.25456506e+03]), array([ 1.25980790e+00, -3.24228986e-01,  3.45816364e-01,  1.09496458e+00,
        8.44944503e-01,  5.40911498e+01,  5.69705200e+03]), array([ 1.28761460e+00, -3.53874639e-01,  3.85400915e-01,  1.10025634e+00,
        8.63860364e-01,  5.43525621e+01,  5.82459230e+03]), array([ 1.22487172e+00, -2.87522561e-01,  3.78212594e-01,  1.08488305e+00,
        8.21523409e-01,  5.35931232e+01,  5.53913474e+03]), array([ 1.11586965e+00, -1.73596382e-01,  4.62287320e-01,  1.04955452e+00,
        7.48831073e-01,  5.18478970e+01,  5.04900569e+03]), array([ 1.15085306e+00, -2.10367895e-01,  4.42064250e-01,  1.05954306e+00,
        7.72293697e-01,  5.23413297e+01,  5.20720271e+03])]
average_updates:  [0.0014961164, 0.0005013158, 0.00018288675, 0.00024222009, 0.000111818066, 0.00025767586, 0.0005027919, 4.8914666e-05, 2.3332452e-05, 2.8471635e-05, 0.00012932767, 0.00011767796, 5.3394397e-05, 1.4270191e-06, 3.849122e-05, 0.00010241566, 2.2424751e-06, 0.00032191136, 9.432342e-06, 6.006446e-05, 4.6540124e-05, 5.8109857e-05, 0.00041441672, 4.8161666e-05, 3.18555e-05, 0.00014305966, 9.877583e-05]
max_updates:  [31.968266, 33.740818, 30.241287, 30.320036, 17.480745, 27.394987, 31.969082, 28.451975, 26.181953, 26.636108, 28.733593, 28.518435, 26.741669, 25.546679, 27.212788, 26.576614, 26.9095, 31.61291, 27.595427, 26.624987, 28.660727, 31.729393, 26.903284, 27.197838, 28.118515, 27.13912, 27.309378]
trigger times: 0
Loss after 72705024 batches: 0.4586
Time to train on one home:  280.41735672950745
trigger times: 0
Loss after 72805248 batches: 0.4573
Time to train on one home:  261.8157956600189
trigger times: 0
Loss after 72944640 batches: 0.2363
Time to train on one home:  279.7558596134186
trigger times: 0
Loss after 73084032 batches: 0.1132
Time to train on one home:  279.736359834671
trigger times: 0
Loss after 73219968 batches: 0.2072
Time to train on one home:  278.78272914886475
trigger times: 0
Loss after 73359360 batches: 0.1965
Time to train on one home:  279.2737948894501
trigger times: 0
Loss after 73498752 batches: 0.4527
Time to train on one home:  271.2113437652588
trigger times: 0
Loss after 73638144 batches: 0.7472
Time to train on one home:  270.8007183074951
trigger times: 0
Loss after 73777536 batches: 0.2607
Time to train on one home:  281.67495131492615
trigger times: 0
Loss after 73916928 batches: 0.5538
Time to train on one home:  283.0596902370453
trigger times: 0
Loss after 74056320 batches: 0.1496
Time to train on one home:  284.2400367259979
trigger times: 0
Loss after 74195712 batches: 0.1859
Time to train on one home:  280.4904456138611
trigger times: 0
Loss after 74335104 batches: 0.0535
Time to train on one home:  279.7293174266815
trigger times: 0
Loss after 74474496 batches: 0.1165
Time to train on one home:  283.60866951942444
trigger times: 0
Loss after 74563200 batches: 0.9549
Time to train on one home:  260.18893003463745
trigger times: 0
Loss after 74702592 batches: 0.0451
Time to train on one home:  281.140216588974
trigger times: 0
Loss after 74841984 batches: 0.2816
Time to train on one home:  281.3050150871277
trigger times: 0
Loss after 74981376 batches: 0.1108
Time to train on one home:  280.5026948451996
trigger times: 0
Loss after 75113856 batches: 0.1473
Time to train on one home:  276.19647192955017
trigger times: 0
Loss after 75253248 batches: 0.0976
Time to train on one home:  279.1254777908325
train_results:  [0.8901078716447787, 0.9349105318779605, 0.8893140983429584, 0.8303114544677012, 0.789609422315808, 0.7515671798110131, 0.7124707276299076, 0.7066488653874816, 0.6633709092111791, 0.6325365912487749, 0.6104207014088734, 0.5915938224837515, 0.566966826466148, 0.5446662006085178, 0.5252033630079355, 0.5013626328965267, 0.48075751792701304, 0.4573024647954422, 0.4439901093245048, 0.421890860491426, 0.4065665043633054, 0.38906418861094966, 0.3726607171659886, 0.3525016604579224, 0.3329352992321519, 0.32289660798040065, 0.3062894219273009, 0.29131015208797273]
Round_27_average_test_results:  /home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
wandb: Network error (ReadTimeout), entering retry loop.
[array([ 9.52216596e-01, -1.73126830e-03,  4.47091333e-01,  1.13669599e+00,
        6.39169915e-01,  5.61526778e+01,  4.30961328e+03]), array([ 9.51792307e-01, -1.28613861e-03,  4.47151714e-01,  1.13631152e+00,
        6.38885893e-01,  5.61336848e+01,  4.30769824e+03]), array([9.36284278e-01, 1.49899782e-02, 4.54178315e-01, 1.12543021e+00,
       6.28500669e-01, 5.55961488e+01, 4.23767627e+03]), array([8.55359603e-01, 9.98603921e-02, 5.01749697e-01, 1.03969376e+00,
       5.74347807e-01, 5.13607763e+01, 3.87254926e+03]), array([9.05172458e-01, 4.76312171e-02, 4.72409496e-01, 1.06276552e+00,
       6.07673428e-01, 5.25005190e+01, 4.09724801e+03]), array([ 1.04076022e+00, -9.45863736e-02,  4.75184746e-01,  1.05202791e+00,
        6.98417531e-01,  5.19700819e+01,  4.70909149e+03]), array([9.28993395e-01, 2.28990063e-02, 5.02865218e-01, 1.00393184e+00,
       6.23454193e-01, 4.95941407e+01, 4.20364998e+03]), array([ 1.01101411e+00, -6.39637580e-02,  4.95592509e-01,  1.02114372e+00,
        6.78878305e-01,  5.04444060e+01,  4.57734800e+03]), array([ 1.03028181e+00, -8.36749825e-02,  4.93759080e-01,  1.03686593e+00,
        6.91455352e-01,  5.12210818e+01,  4.66214897e+03]), array([ 1.03036389e+00, -8.36579238e-02,  4.76341343e-01,  1.02926483e+00,
        6.91444467e-01,  5.08455883e+01,  4.66207546e+03]), array([ 1.01711925e+00, -6.97420673e-02,  4.84234813e-01,  1.01335571e+00,
        6.82565243e-01,  5.00596792e+01,  4.60220730e+03]), array([ 1.07538237e+00, -1.31099930e-01,  4.93224313e-01,  1.02482464e+00,
        7.21715563e-01,  5.06262432e+01,  4.86617893e+03]), array([ 1.01247784e+00, -6.47441366e-02,  4.93082791e-01,  1.02191834e+00,
        6.79376237e-01,  5.04826722e+01,  4.58070529e+03]), array([ 1.06565810e+00, -1.20056864e-01,  4.56055542e-01,  1.03418879e+00,
        7.14669366e-01,  5.10888313e+01,  4.81866971e+03]), array([ 1.09075590e+00, -1.47237860e-01,  4.82341197e-01,  1.03251999e+00,
        7.32012615e-01,  5.10063928e+01,  4.93560691e+03]), array([ 1.04813751e+00, -1.02799301e-01,  4.84740054e-01,  1.01545494e+00,
        7.03657915e-01,  5.01633807e+01,  4.74442493e+03]), array([ 1.03921674e+00, -9.34817849e-02,  4.91544501e-01,  1.01643637e+00,
        6.97712732e-01,  5.02118632e+01,  4.70433942e+03]), array([ 1.10505869e+00, -1.62769475e-01,  4.77239853e-01,  1.03816056e+00,
        7.41922800e-01,  5.12850362e+01,  5.00242655e+03]), array([ 1.18094165e+00, -2.41024964e-01,  4.19080025e-01,  1.07737547e+00,
        7.91854908e-01,  5.32222494e+01,  5.33909438e+03]), array([ 1.09296562e+00, -1.50055481e-01,  4.82775498e-01,  1.04456616e+00,
        7.33810442e-01,  5.16014723e+01,  4.94772874e+03]), array([ 1.11906777e+00, -1.76918339e-01,  4.38547121e-01,  1.04781155e+00,
        7.50950698e-01,  5.17617944e+01,  5.06329714e+03]), array([ 1.16157051e+00, -2.21376855e-01,  4.31314956e-01,  1.06815408e+00,
        7.79318132e-01,  5.27667134e+01,  5.25456506e+03]), array([ 1.25980790e+00, -3.24228986e-01,  3.45816364e-01,  1.09496458e+00,
        8.44944503e-01,  5.40911498e+01,  5.69705200e+03]), array([ 1.28761460e+00, -3.53874639e-01,  3.85400915e-01,  1.10025634e+00,
        8.63860364e-01,  5.43525621e+01,  5.82459230e+03]), array([ 1.22487172e+00, -2.87522561e-01,  3.78212594e-01,  1.08488305e+00,
        8.21523409e-01,  5.35931232e+01,  5.53913474e+03]), array([ 1.11586965e+00, -1.73596382e-01,  4.62287320e-01,  1.04955452e+00,
        7.48831073e-01,  5.18478970e+01,  5.04900569e+03]), array([ 1.15085306e+00, -2.10367895e-01,  4.42064250e-01,  1.05954306e+00,
        7.72293697e-01,  5.23413297e+01,  5.20720271e+03]), array([ 1.14371782e+00, -2.03613323e-01,  4.48357959e-01,  1.07249805e+00,
        7.67983840e-01,  5.29813053e+01,  5.17814344e+03])]
average_updates:  [0.0014961164, 0.0005013158, 0.00018288675, 0.00024222009, 0.000111818066, 0.00025767586, 0.0005027919, 4.8914666e-05, 2.3332452e-05, 2.8471635e-05, 0.00012932767, 0.00011767796, 5.3394397e-05, 1.4270191e-06, 3.849122e-05, 0.00010241566, 2.2424751e-06, 0.00032191136, 9.432342e-06, 6.006446e-05, 4.6540124e-05, 5.8109857e-05, 0.00041441672, 4.8161666e-05, 3.18555e-05, 0.00014305966, 9.877583e-05, 0.00025827377]
max_updates:  [31.968266, 33.740818, 30.241287, 30.320036, 17.480745, 27.394987, 31.969082, 28.451975, 26.181953, 26.636108, 28.733593, 28.518435, 26.741669, 25.546679, 27.212788, 26.576614, 26.9095, 31.61291, 27.595427, 26.624987, 28.660727, 31.729393, 26.903284, 27.197838, 28.118515, 27.13912, 27.309378, 29.353912]
trigger times: 0
Loss after 75392640 batches: 0.4469
Time to train on one home:  283.3945288658142
trigger times: 0
Loss after 75492864 batches: 0.4559
Time to train on one home:  263.30120062828064
trigger times: 0
Loss after 75632256 batches: 0.2424
Time to train on one home:  281.2575492858887
trigger times: 0
Loss after 75771648 batches: 0.1161
Time to train on one home:  280.0226786136627
trigger times: 0
Loss after 75907584 batches: 0.1944
Time to train on one home:  279.91680431365967
trigger times: 0
Loss after 76046976 batches: 0.1738
Time to train on one home:  280.59162521362305
trigger times: 0
Loss after 76186368 batches: 0.3987
Time to train on one home:  281.6955087184906
trigger times: 0
Loss after 76325760 batches: 0.6796
Time to train on one home:  281.05002880096436
trigger times: 0
Loss after 76465152 batches: 0.2390
Time to train on one home:  279.36942172050476
trigger times: 0
Loss after 76604544 batches: 0.4840
Time to train on one home:  280.9051344394684
trigger times: 0
Loss after 76743936 batches: 0.1484
Time to train on one home:  280.07475757598877
trigger times: 0
Loss after 76883328 batches: 0.1660
Time to train on one home:  280.5070834159851
trigger times: 0
Loss after 77022720 batches: 0.0442
Time to train on one home:  281.91781973838806
trigger times: 0
Loss after 77162112 batches: 0.1249
Time to train on one home:  278.50418496131897
trigger times: 0
Loss after 77250816 batches: 0.8891
Time to train on one home:  256.8075575828552
trigger times: 0
Loss after 77390208 batches: 0.0365
Time to train on one home:  278.8516917228699
trigger times: 0
Loss after 77529600 batches: 0.2537
Time to train on one home:  280.9157853126526
trigger times: 0
Loss after 77668992 batches: 0.1110
Time to train on one home:  281.47561860084534
trigger times: 0
Loss after 77801472 batches: 0.1323
Time to train on one home:  277.0348687171936
trigger times: 0
Loss after 77940864 batches: 0.0956
Time to train on one home:  281.55561566352844
train_results:  [0.8901078716447787, 0.9349105318779605, 0.8893140983429584, 0.8303114544677012, 0.789609422315808, 0.7515671798110131, 0.7124707276299076, 0.7066488653874816, 0.6633709092111791, 0.6325365912487749, 0.6104207014088734, 0.5915938224837515, 0.566966826466148, 0.5446662006085178, 0.5252033630079355, 0.5013626328965267, 0.48075751792701304, 0.4573024647954422, 0.4439901093245048, 0.421890860491426, 0.4065665043633054, 0.38906418861094966, 0.3726607171659886, 0.3525016604579224, 0.3329352992321519, 0.32289660798040065, 0.3062894219273009, 0.29131015208797273, 0.27161959692530524]
Round_28_average_test_results:  /home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
[array([ 9.52216596e-01, -1.73126830e-03,  4.47091333e-01,  1.13669599e+00,
        6.39169915e-01,  5.61526778e+01,  4.30961328e+03]), array([ 9.51792307e-01, -1.28613861e-03,  4.47151714e-01,  1.13631152e+00,
        6.38885893e-01,  5.61336848e+01,  4.30769824e+03]), array([9.36284278e-01, 1.49899782e-02, 4.54178315e-01, 1.12543021e+00,
       6.28500669e-01, 5.55961488e+01, 4.23767627e+03]), array([8.55359603e-01, 9.98603921e-02, 5.01749697e-01, 1.03969376e+00,
       5.74347807e-01, 5.13607763e+01, 3.87254926e+03]), array([9.05172458e-01, 4.76312171e-02, 4.72409496e-01, 1.06276552e+00,
       6.07673428e-01, 5.25005190e+01, 4.09724801e+03]), array([ 1.04076022e+00, -9.45863736e-02,  4.75184746e-01,  1.05202791e+00,
        6.98417531e-01,  5.19700819e+01,  4.70909149e+03]), array([9.28993395e-01, 2.28990063e-02, 5.02865218e-01, 1.00393184e+00,
       6.23454193e-01, 4.95941407e+01, 4.20364998e+03]), array([ 1.01101411e+00, -6.39637580e-02,  4.95592509e-01,  1.02114372e+00,
        6.78878305e-01,  5.04444060e+01,  4.57734800e+03]), array([ 1.03028181e+00, -8.36749825e-02,  4.93759080e-01,  1.03686593e+00,
        6.91455352e-01,  5.12210818e+01,  4.66214897e+03]), array([ 1.03036389e+00, -8.36579238e-02,  4.76341343e-01,  1.02926483e+00,
        6.91444467e-01,  5.08455883e+01,  4.66207546e+03]), array([ 1.01711925e+00, -6.97420673e-02,  4.84234813e-01,  1.01335571e+00,
        6.82565243e-01,  5.00596792e+01,  4.60220730e+03]), array([ 1.07538237e+00, -1.31099930e-01,  4.93224313e-01,  1.02482464e+00,
        7.21715563e-01,  5.06262432e+01,  4.86617893e+03]), array([ 1.01247784e+00, -6.47441366e-02,  4.93082791e-01,  1.02191834e+00,
        6.79376237e-01,  5.04826722e+01,  4.58070529e+03]), array([ 1.06565810e+00, -1.20056864e-01,  4.56055542e-01,  1.03418879e+00,
        7.14669366e-01,  5.10888313e+01,  4.81866971e+03]), array([ 1.09075590e+00, -1.47237860e-01,  4.82341197e-01,  1.03251999e+00,
        7.32012615e-01,  5.10063928e+01,  4.93560691e+03]), array([ 1.04813751e+00, -1.02799301e-01,  4.84740054e-01,  1.01545494e+00,
        7.03657915e-01,  5.01633807e+01,  4.74442493e+03]), array([ 1.03921674e+00, -9.34817849e-02,  4.91544501e-01,  1.01643637e+00,
        6.97712732e-01,  5.02118632e+01,  4.70433942e+03]), array([ 1.10505869e+00, -1.62769475e-01,  4.77239853e-01,  1.03816056e+00,
        7.41922800e-01,  5.12850362e+01,  5.00242655e+03]), array([ 1.18094165e+00, -2.41024964e-01,  4.19080025e-01,  1.07737547e+00,
        7.91854908e-01,  5.32222494e+01,  5.33909438e+03]), array([ 1.09296562e+00, -1.50055481e-01,  4.82775498e-01,  1.04456616e+00,
        7.33810442e-01,  5.16014723e+01,  4.94772874e+03]), array([ 1.11906777e+00, -1.76918339e-01,  4.38547121e-01,  1.04781155e+00,
        7.50950698e-01,  5.17617944e+01,  5.06329714e+03]), array([ 1.16157051e+00, -2.21376855e-01,  4.31314956e-01,  1.06815408e+00,
        7.79318132e-01,  5.27667134e+01,  5.25456506e+03]), array([ 1.25980790e+00, -3.24228986e-01,  3.45816364e-01,  1.09496458e+00,
        8.44944503e-01,  5.40911498e+01,  5.69705200e+03]), array([ 1.28761460e+00, -3.53874639e-01,  3.85400915e-01,  1.10025634e+00,
        8.63860364e-01,  5.43525621e+01,  5.82459230e+03]), array([ 1.22487172e+00, -2.87522561e-01,  3.78212594e-01,  1.08488305e+00,
        8.21523409e-01,  5.35931232e+01,  5.53913474e+03]), array([ 1.11586965e+00, -1.73596382e-01,  4.62287320e-01,  1.04955452e+00,
        7.48831073e-01,  5.18478970e+01,  5.04900569e+03]), array([ 1.15085306e+00, -2.10367895e-01,  4.42064250e-01,  1.05954306e+00,
        7.72293697e-01,  5.23413297e+01,  5.20720271e+03]), array([ 1.14371782e+00, -2.03613323e-01,  4.48357959e-01,  1.07249805e+00,
        7.67983840e-01,  5.29813053e+01,  5.17814344e+03]), array([ 1.15902791e+00, -2.18670114e-01,  4.40228450e-01,  1.06581075e+00,
        7.77591055e-01,  5.26509531e+01,  5.24292034e+03])]
average_updates:  [0.0014961164, 0.0005013158, 0.00018288675, 0.00024222009, 0.000111818066, 0.00025767586, 0.0005027919, 4.8914666e-05, 2.3332452e-05, 2.8471635e-05, 0.00012932767, 0.00011767796, 5.3394397e-05, 1.4270191e-06, 3.849122e-05, 0.00010241566, 2.2424751e-06, 0.00032191136, 9.432342e-06, 6.006446e-05, 4.6540124e-05, 5.8109857e-05, 0.00041441672, 4.8161666e-05, 3.18555e-05, 0.00014305966, 9.877583e-05, 0.00025827377, 0.000121116595]
max_updates:  [31.968266, 33.740818, 30.241287, 30.320036, 17.480745, 27.394987, 31.969082, 28.451975, 26.181953, 26.636108, 28.733593, 28.518435, 26.741669, 25.546679, 27.212788, 26.576614, 26.9095, 31.61291, 27.595427, 26.624987, 28.660727, 31.729393, 26.903284, 27.197838, 28.118515, 27.13912, 27.309378, 29.353912, 27.84876]
trigger times: 0
Loss after 78080256 batches: 0.4479
Time to train on one home:  279.7310721874237
trigger times: 0
Loss after 78180480 batches: 0.4412
Time to train on one home:  263.79956126213074
trigger times: 0
Loss after 78319872 batches: 0.2392
Time to train on one home:  280.8421504497528
trigger times: 0
Loss after 78459264 batches: 0.1102
Time to train on one home:  280.26380944252014
trigger times: 0
Loss after 78595200 batches: 0.1700
Time to train on one home:  276.18677711486816
trigger times: 0
Loss after 78734592 batches: 0.1603
Time to train on one home:  279.56528306007385
trigger times: 0
Loss after 78873984 batches: 0.3861
Time to train on one home:  282.9690911769867
trigger times: 0
Loss after 79013376 batches: 0.6292
Time to train on one home:  282.86536026000977
trigger times: 0
Loss after 79152768 batches: 0.2229
Time to train on one home:  283.5062093734741
trigger times: 0
Loss after 79292160 batches: 0.4354
Time to train on one home:  281.82288885116577
trigger times: 0
Loss after 79431552 batches: 0.1322
Time to train on one home:  282.39821767807007
trigger times: 0
Loss after 79570944 batches: 0.1591
Time to train on one home:  284.28286361694336
trigger times: 0
Loss after 79710336 batches: 0.0409
Time to train on one home:  278.52423644065857
trigger times: 0
Loss after 79849728 batches: 0.1296
Time to train on one home:  281.8111584186554
trigger times: 0
Loss after 79938432 batches: 0.9102
Time to train on one home:  259.2837886810303
trigger times: 0
Loss after 80077824 batches: 0.0360
Time to train on one home:  280.0292909145355
trigger times: 0
Loss after 80217216 batches: 0.2308
Time to train on one home:  281.7577188014984
trigger times: 0
Loss after 80356608 batches: 0.1062
Time to train on one home:  281.93136620521545
trigger times: 0
Loss after 80489088 batches: 0.1209
Time to train on one home:  279.86788153648376
trigger times: 0
Loss after 80628480 batches: 0.1036
Time to train on one home:  281.7964074611664
train_results:  [0.8901078716447787, 0.9349105318779605, 0.8893140983429584, 0.8303114544677012, 0.789609422315808, 0.7515671798110131, 0.7124707276299076, 0.7066488653874816, 0.6633709092111791, 0.6325365912487749, 0.6104207014088734, 0.5915938224837515, 0.566966826466148, 0.5446662006085178, 0.5252033630079355, 0.5013626328965267, 0.48075751792701304, 0.4573024647954422, 0.4439901093245048, 0.421890860491426, 0.4065665043633054, 0.38906418861094966, 0.3726607171659886, 0.3525016604579224, 0.3329352992321519, 0.32289660798040065, 0.3062894219273009, 0.29131015208797273, 0.27161959692530524, 0.2606002361917395]
Round_29_average_test_results:  /home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
wandb: Network error (ReadTimeout), entering retry loop.
[array([ 9.52216596e-01, -1.73126830e-03,  4.47091333e-01,  1.13669599e+00,
        6.39169915e-01,  5.61526778e+01,  4.30961328e+03]), array([ 9.51792307e-01, -1.28613861e-03,  4.47151714e-01,  1.13631152e+00,
        6.38885893e-01,  5.61336848e+01,  4.30769824e+03]), array([9.36284278e-01, 1.49899782e-02, 4.54178315e-01, 1.12543021e+00,
       6.28500669e-01, 5.55961488e+01, 4.23767627e+03]), array([8.55359603e-01, 9.98603921e-02, 5.01749697e-01, 1.03969376e+00,
       5.74347807e-01, 5.13607763e+01, 3.87254926e+03]), array([9.05172458e-01, 4.76312171e-02, 4.72409496e-01, 1.06276552e+00,
       6.07673428e-01, 5.25005190e+01, 4.09724801e+03]), array([ 1.04076022e+00, -9.45863736e-02,  4.75184746e-01,  1.05202791e+00,
        6.98417531e-01,  5.19700819e+01,  4.70909149e+03]), array([9.28993395e-01, 2.28990063e-02, 5.02865218e-01, 1.00393184e+00,
       6.23454193e-01, 4.95941407e+01, 4.20364998e+03]), array([ 1.01101411e+00, -6.39637580e-02,  4.95592509e-01,  1.02114372e+00,
        6.78878305e-01,  5.04444060e+01,  4.57734800e+03]), array([ 1.03028181e+00, -8.36749825e-02,  4.93759080e-01,  1.03686593e+00,
        6.91455352e-01,  5.12210818e+01,  4.66214897e+03]), array([ 1.03036389e+00, -8.36579238e-02,  4.76341343e-01,  1.02926483e+00,
        6.91444467e-01,  5.08455883e+01,  4.66207546e+03]), array([ 1.01711925e+00, -6.97420673e-02,  4.84234813e-01,  1.01335571e+00,
        6.82565243e-01,  5.00596792e+01,  4.60220730e+03]), array([ 1.07538237e+00, -1.31099930e-01,  4.93224313e-01,  1.02482464e+00,
        7.21715563e-01,  5.06262432e+01,  4.86617893e+03]), array([ 1.01247784e+00, -6.47441366e-02,  4.93082791e-01,  1.02191834e+00,
        6.79376237e-01,  5.04826722e+01,  4.58070529e+03]), array([ 1.06565810e+00, -1.20056864e-01,  4.56055542e-01,  1.03418879e+00,
        7.14669366e-01,  5.10888313e+01,  4.81866971e+03]), array([ 1.09075590e+00, -1.47237860e-01,  4.82341197e-01,  1.03251999e+00,
        7.32012615e-01,  5.10063928e+01,  4.93560691e+03]), array([ 1.04813751e+00, -1.02799301e-01,  4.84740054e-01,  1.01545494e+00,
        7.03657915e-01,  5.01633807e+01,  4.74442493e+03]), array([ 1.03921674e+00, -9.34817849e-02,  4.91544501e-01,  1.01643637e+00,
        6.97712732e-01,  5.02118632e+01,  4.70433942e+03]), array([ 1.10505869e+00, -1.62769475e-01,  4.77239853e-01,  1.03816056e+00,
        7.41922800e-01,  5.12850362e+01,  5.00242655e+03]), array([ 1.18094165e+00, -2.41024964e-01,  4.19080025e-01,  1.07737547e+00,
        7.91854908e-01,  5.32222494e+01,  5.33909438e+03]), array([ 1.09296562e+00, -1.50055481e-01,  4.82775498e-01,  1.04456616e+00,
        7.33810442e-01,  5.16014723e+01,  4.94772874e+03]), array([ 1.11906777e+00, -1.76918339e-01,  4.38547121e-01,  1.04781155e+00,
        7.50950698e-01,  5.17617944e+01,  5.06329714e+03]), array([ 1.16157051e+00, -2.21376855e-01,  4.31314956e-01,  1.06815408e+00,
        7.79318132e-01,  5.27667134e+01,  5.25456506e+03]), array([ 1.25980790e+00, -3.24228986e-01,  3.45816364e-01,  1.09496458e+00,
        8.44944503e-01,  5.40911498e+01,  5.69705200e+03]), array([ 1.28761460e+00, -3.53874639e-01,  3.85400915e-01,  1.10025634e+00,
        8.63860364e-01,  5.43525621e+01,  5.82459230e+03]), array([ 1.22487172e+00, -2.87522561e-01,  3.78212594e-01,  1.08488305e+00,
        8.21523409e-01,  5.35931232e+01,  5.53913474e+03]), array([ 1.11586965e+00, -1.73596382e-01,  4.62287320e-01,  1.04955452e+00,
        7.48831073e-01,  5.18478970e+01,  5.04900569e+03]), array([ 1.15085306e+00, -2.10367895e-01,  4.42064250e-01,  1.05954306e+00,
        7.72293697e-01,  5.23413297e+01,  5.20720271e+03]), array([ 1.14371782e+00, -2.03613323e-01,  4.48357959e-01,  1.07249805e+00,
        7.67983840e-01,  5.29813053e+01,  5.17814344e+03]), array([ 1.15902791e+00, -2.18670114e-01,  4.40228450e-01,  1.06581075e+00,
        7.77591055e-01,  5.26509531e+01,  5.24292034e+03]), array([ 1.06544990e+00, -1.20627946e-01,  4.71649237e-01,  1.02628990e+00,
        7.15033754e-01,  5.06986268e+01,  4.82112666e+03])]
average_updates:  [0.0014961164, 0.0005013158, 0.00018288675, 0.00024222009, 0.000111818066, 0.00025767586, 0.0005027919, 4.8914666e-05, 2.3332452e-05, 2.8471635e-05, 0.00012932767, 0.00011767796, 5.3394397e-05, 1.4270191e-06, 3.849122e-05, 0.00010241566, 2.2424751e-06, 0.00032191136, 9.432342e-06, 6.006446e-05, 4.6540124e-05, 5.8109857e-05, 0.00041441672, 4.8161666e-05, 3.18555e-05, 0.00014305966, 9.877583e-05, 0.00025827377, 0.000121116595, 4.1933777e-06]
max_updates:  [31.968266, 33.740818, 30.241287, 30.320036, 17.480745, 27.394987, 31.969082, 28.451975, 26.181953, 26.636108, 28.733593, 28.518435, 26.741669, 25.546679, 27.212788, 26.576614, 26.9095, 31.61291, 27.595427, 26.624987, 28.660727, 31.729393, 26.903284, 27.197838, 28.118515, 27.13912, 27.309378, 29.353912, 27.84876, 27.57356]
trigger times: 0
Loss after 80767872 batches: 0.4559
Time to train on one home:  281.57024240493774
trigger times: 0
Loss after 80868096 batches: 0.3999
Time to train on one home:  265.9392099380493
trigger times: 0
Loss after 81007488 batches: 0.2215
Time to train on one home:  281.70513248443604
trigger times: 0
Loss after 81146880 batches: 0.0986
Time to train on one home:  282.8727481365204
trigger times: 0
Loss after 81282816 batches: 0.1788
Time to train on one home:  278.81802463531494
trigger times: 0
Loss after 81422208 batches: 0.1674
Time to train on one home:  281.4437599182129
trigger times: 0
Loss after 81561600 batches: 0.3420
Time to train on one home:  280.53457498550415
trigger times: 0
Loss after 81700992 batches: 0.5686
Time to train on one home:  282.32931184768677
trigger times: 0
Loss after 81840384 batches: 0.2119
Time to train on one home:  280.85193729400635
trigger times: 0
Loss after 81979776 batches: 0.4027
Time to train on one home:  281.60769629478455
trigger times: 0
Loss after 82119168 batches: 0.1425
Time to train on one home:  281.29204297065735
trigger times: 0
Loss after 82258560 batches: 0.1529
Time to train on one home:  280.72421431541443
trigger times: 0
Loss after 82397952 batches: 0.0446
Time to train on one home:  277.55366945266724
trigger times: 0
Loss after 82537344 batches: 0.1062
Time to train on one home:  278.62269473075867
trigger times: 0
Loss after 82626048 batches: 0.9116
Time to train on one home:  258.2946343421936
trigger times: 0
Loss after 82765440 batches: 0.0376
Time to train on one home:  281.298198223114
trigger times: 0
Loss after 82904832 batches: 0.2229
Time to train on one home:  277.03321957588196
trigger times: 0
Loss after 83044224 batches: 0.1167
Time to train on one home:  280.25152492523193
trigger times: 0
Loss after 83176704 batches: 0.1445
Time to train on one home:  277.66263484954834
trigger times: 0
Loss after 83316096 batches: 0.0969
Time to train on one home:  280.6962139606476
train_results:  [0.8901078716447787, 0.9349105318779605, 0.8893140983429584, 0.8303114544677012, 0.789609422315808, 0.7515671798110131, 0.7124707276299076, 0.7066488653874816, 0.6633709092111791, 0.6325365912487749, 0.6104207014088734, 0.5915938224837515, 0.566966826466148, 0.5446662006085178, 0.5252033630079355, 0.5013626328965267, 0.48075751792701304, 0.4573024647954422, 0.4439901093245048, 0.421890860491426, 0.4065665043633054, 0.38906418861094966, 0.3726607171659886, 0.3525016604579224, 0.3329352992321519, 0.32289660798040065, 0.3062894219273009, 0.29131015208797273, 0.27161959692530524, 0.2606002361917395, 0.251183363204766]
Round_30_average_test_results:  /home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
[array([ 9.52216596e-01, -1.73126830e-03,  4.47091333e-01,  1.13669599e+00,
        6.39169915e-01,  5.61526778e+01,  4.30961328e+03]), array([ 9.51792307e-01, -1.28613861e-03,  4.47151714e-01,  1.13631152e+00,
        6.38885893e-01,  5.61336848e+01,  4.30769824e+03]), array([9.36284278e-01, 1.49899782e-02, 4.54178315e-01, 1.12543021e+00,
       6.28500669e-01, 5.55961488e+01, 4.23767627e+03]), array([8.55359603e-01, 9.98603921e-02, 5.01749697e-01, 1.03969376e+00,
       5.74347807e-01, 5.13607763e+01, 3.87254926e+03]), array([9.05172458e-01, 4.76312171e-02, 4.72409496e-01, 1.06276552e+00,
       6.07673428e-01, 5.25005190e+01, 4.09724801e+03]), array([ 1.04076022e+00, -9.45863736e-02,  4.75184746e-01,  1.05202791e+00,
        6.98417531e-01,  5.19700819e+01,  4.70909149e+03]), array([9.28993395e-01, 2.28990063e-02, 5.02865218e-01, 1.00393184e+00,
       6.23454193e-01, 4.95941407e+01, 4.20364998e+03]), array([ 1.01101411e+00, -6.39637580e-02,  4.95592509e-01,  1.02114372e+00,
        6.78878305e-01,  5.04444060e+01,  4.57734800e+03]), array([ 1.03028181e+00, -8.36749825e-02,  4.93759080e-01,  1.03686593e+00,
        6.91455352e-01,  5.12210818e+01,  4.66214897e+03]), array([ 1.03036389e+00, -8.36579238e-02,  4.76341343e-01,  1.02926483e+00,
        6.91444467e-01,  5.08455883e+01,  4.66207546e+03]), array([ 1.01711925e+00, -6.97420673e-02,  4.84234813e-01,  1.01335571e+00,
        6.82565243e-01,  5.00596792e+01,  4.60220730e+03]), array([ 1.07538237e+00, -1.31099930e-01,  4.93224313e-01,  1.02482464e+00,
        7.21715563e-01,  5.06262432e+01,  4.86617893e+03]), array([ 1.01247784e+00, -6.47441366e-02,  4.93082791e-01,  1.02191834e+00,
        6.79376237e-01,  5.04826722e+01,  4.58070529e+03]), array([ 1.06565810e+00, -1.20056864e-01,  4.56055542e-01,  1.03418879e+00,
        7.14669366e-01,  5.10888313e+01,  4.81866971e+03]), array([ 1.09075590e+00, -1.47237860e-01,  4.82341197e-01,  1.03251999e+00,
        7.32012615e-01,  5.10063928e+01,  4.93560691e+03]), array([ 1.04813751e+00, -1.02799301e-01,  4.84740054e-01,  1.01545494e+00,
        7.03657915e-01,  5.01633807e+01,  4.74442493e+03]), array([ 1.03921674e+00, -9.34817849e-02,  4.91544501e-01,  1.01643637e+00,
        6.97712732e-01,  5.02118632e+01,  4.70433942e+03]), array([ 1.10505869e+00, -1.62769475e-01,  4.77239853e-01,  1.03816056e+00,
        7.41922800e-01,  5.12850362e+01,  5.00242655e+03]), array([ 1.18094165e+00, -2.41024964e-01,  4.19080025e-01,  1.07737547e+00,
        7.91854908e-01,  5.32222494e+01,  5.33909438e+03]), array([ 1.09296562e+00, -1.50055481e-01,  4.82775498e-01,  1.04456616e+00,
        7.33810442e-01,  5.16014723e+01,  4.94772874e+03]), array([ 1.11906777e+00, -1.76918339e-01,  4.38547121e-01,  1.04781155e+00,
        7.50950698e-01,  5.17617944e+01,  5.06329714e+03]), array([ 1.16157051e+00, -2.21376855e-01,  4.31314956e-01,  1.06815408e+00,
        7.79318132e-01,  5.27667134e+01,  5.25456506e+03]), array([ 1.25980790e+00, -3.24228986e-01,  3.45816364e-01,  1.09496458e+00,
        8.44944503e-01,  5.40911498e+01,  5.69705200e+03]), array([ 1.28761460e+00, -3.53874639e-01,  3.85400915e-01,  1.10025634e+00,
        8.63860364e-01,  5.43525621e+01,  5.82459230e+03]), array([ 1.22487172e+00, -2.87522561e-01,  3.78212594e-01,  1.08488305e+00,
        8.21523409e-01,  5.35931232e+01,  5.53913474e+03]), array([ 1.11586965e+00, -1.73596382e-01,  4.62287320e-01,  1.04955452e+00,
        7.48831073e-01,  5.18478970e+01,  5.04900569e+03]), array([ 1.15085306e+00, -2.10367895e-01,  4.42064250e-01,  1.05954306e+00,
        7.72293697e-01,  5.23413297e+01,  5.20720271e+03]), array([ 1.14371782e+00, -2.03613323e-01,  4.48357959e-01,  1.07249805e+00,
        7.67983840e-01,  5.29813053e+01,  5.17814344e+03]), array([ 1.15902791e+00, -2.18670114e-01,  4.40228450e-01,  1.06581075e+00,
        7.77591055e-01,  5.26509531e+01,  5.24292034e+03]), array([ 1.06544990e+00, -1.20627946e-01,  4.71649237e-01,  1.02628990e+00,
        7.15033754e-01,  5.06986268e+01,  4.82112666e+03]), array([ 1.07101741e+00, -1.26853257e-01,  4.75913340e-01,  1.03241928e+00,
        7.19005908e-01,  5.10014178e+01,  4.84790896e+03])]
average_updates:  [0.0014961164, 0.0005013158, 0.00018288675, 0.00024222009, 0.000111818066, 0.00025767586, 0.0005027919, 4.8914666e-05, 2.3332452e-05, 2.8471635e-05, 0.00012932767, 0.00011767796, 5.3394397e-05, 1.4270191e-06, 3.849122e-05, 0.00010241566, 2.2424751e-06, 0.00032191136, 9.432342e-06, 6.006446e-05, 4.6540124e-05, 5.8109857e-05, 0.00041441672, 4.8161666e-05, 3.18555e-05, 0.00014305966, 9.877583e-05, 0.00025827377, 0.000121116595, 4.1933777e-06, 0.00028720684]
max_updates:  [31.968266, 33.740818, 30.241287, 30.320036, 17.480745, 27.394987, 31.969082, 28.451975, 26.181953, 26.636108, 28.733593, 28.518435, 26.741669, 25.546679, 27.212788, 26.576614, 26.9095, 31.61291, 27.595427, 26.624987, 28.660727, 31.729393, 26.903284, 27.197838, 28.118515, 27.13912, 27.309378, 29.353912, 27.84876, 27.57356, 28.873163]
trigger times: 0
Loss after 83455488 batches: 0.4045
Time to train on one home:  282.7660083770752
trigger times: 0
Loss after 83555712 batches: 0.4047
Time to train on one home:  263.58628034591675
trigger times: 0
Loss after 83695104 batches: 0.2176
Time to train on one home:  280.5540096759796
trigger times: 0
Loss after 83834496 batches: 0.1016
Time to train on one home:  278.727525472641
trigger times: 0
Loss after 83970432 batches: 0.1597
Time to train on one home:  278.0539438724518
trigger times: 0
Loss after 84109824 batches: 0.1504
Time to train on one home:  282.6266703605652
trigger times: 0
Loss after 84249216 batches: 0.3062
Time to train on one home:  279.5643079280853
trigger times: 0
Loss after 84388608 batches: 0.5101
Time to train on one home:  279.0075566768646
trigger times: 0
Loss after 84528000 batches: 0.1839
Time to train on one home:  279.5965015888214
trigger times: 0
Loss after 84667392 batches: 0.3770
Time to train on one home:  279.4774193763733
trigger times: 0
Loss after 84806784 batches: 0.1203
Time to train on one home:  280.16338181495667
trigger times: 0
Loss after 84946176 batches: 0.1448
Time to train on one home:  278.6817355155945
trigger times: 0
Loss after 85085568 batches: 0.0513
Time to train on one home:  279.49442958831787
trigger times: 0
Loss after 85224960 batches: 0.1187
Time to train on one home:  280.4688901901245
trigger times: 0
Loss after 85313664 batches: 0.8544
Time to train on one home:  259.89950299263
trigger times: 0
Loss after 85453056 batches: 0.0323
Time to train on one home:  282.49741435050964
trigger times: 0
Loss after 85592448 batches: 0.1947
Time to train on one home:  280.22566652297974
trigger times: 0
Loss after 85731840 batches: 0.0990
Time to train on one home:  279.46776604652405
trigger times: 0
Loss after 85864320 batches: 0.1224
Time to train on one home:  275.6647925376892
trigger times: 0
Loss after 86003712 batches: 0.0866
Time to train on one home:  278.55712366104126
train_results:  [0.8901078716447787, 0.9349105318779605, 0.8893140983429584, 0.8303114544677012, 0.789609422315808, 0.7515671798110131, 0.7124707276299076, 0.7066488653874816, 0.6633709092111791, 0.6325365912487749, 0.6104207014088734, 0.5915938224837515, 0.566966826466148, 0.5446662006085178, 0.5252033630079355, 0.5013626328965267, 0.48075751792701304, 0.4573024647954422, 0.4439901093245048, 0.421890860491426, 0.4065665043633054, 0.38906418861094966, 0.3726607171659886, 0.3525016604579224, 0.3329352992321519, 0.32289660798040065, 0.3062894219273009, 0.29131015208797273, 0.27161959692530524, 0.2606002361917395, 0.251183363204766, 0.23201642233979322]
Round_31_average_test_results:  /home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
Exception in thread NetStatThr:
Traceback (most recent call last):
  File "/home/Alfredo/anaconda3/envs/private_nn_env/lib/python3.9/threading.py", line 973, in _bootstrap_inner
    self.run()
  File "/home/Alfredo/anaconda3/envs/private_nn_env/lib/python3.9/threading.py", line 910, in run
    self._target(*self._args, **self._kwargs)
  File "/home/Alfredo/anaconda3/envs/private_nn_env/lib/python3.9/site-packages/wandb/sdk/wandb_run.py", line 152, in check_network_status
    status_response = self._interface.communicate_network_status()
  File "/home/Alfredo/anaconda3/envs/private_nn_env/lib/python3.9/site-packages/wandb/sdk/interface/interface.py", line 125, in communicate_network_status
    resp = self._communicate_network_status(status)
  File "/home/Alfredo/anaconda3/envs/private_nn_env/lib/python3.9/site-packages/wandb/sdk/interface/interface_shared.py", line 404, in _communicate_network_status
    resp = self._communicate(req, local=True)
  File "/home/Alfredo/anaconda3/envs/private_nn_env/lib/python3.9/site-packages/wandb/sdk/interface/interface_shared.py", line 225, in _communicate
    return self._communicate_async(rec, local=local).get(timeout=timeout)
  File "/home/Alfredo/anaconda3/envs/private_nn_env/lib/python3.9/site-packages/wandb/sdk/interface/interface_shared.py", line 230, in _communicate_async
    raise Exception("The wandb backend process has shutdown")
Exception: The wandb backend process has shutdown
Exception in thread ChkStopThr:
Traceback (most recent call last):
  File "/home/Alfredo/anaconda3/envs/private_nn_env/lib/python3.9/threading.py", line 973, in _bootstrap_inner
    self.run()
  File "/home/Alfredo/anaconda3/envs/private_nn_env/lib/python3.9/threading.py", line 910, in run
    self._target(*self._args, **self._kwargs)
  File "/home/Alfredo/anaconda3/envs/private_nn_env/lib/python3.9/site-packages/wandb/sdk/wandb_run.py", line 170, in check_status
    status_response = self._interface.communicate_stop_status()
  File "/home/Alfredo/anaconda3/envs/private_nn_env/lib/python3.9/site-packages/wandb/sdk/interface/interface.py", line 114, in communicate_stop_status
    resp = self._communicate_stop_status(status)
  File "/home/Alfredo/anaconda3/envs/private_nn_env/lib/python3.9/site-packages/wandb/sdk/interface/interface_shared.py", line 394, in _communicate_stop_status
    resp = self._communicate(req, local=True)
  File "/home/Alfredo/anaconda3/envs/private_nn_env/lib/python3.9/site-packages/wandb/sdk/interface/interface_shared.py", line 225, in _communicate
    return self._communicate_async(rec, local=local).get(timeout=timeout)
  File "/home/Alfredo/anaconda3/envs/private_nn_env/lib/python3.9/site-packages/wandb/sdk/interface/interface_shared.py", line 230, in _communicate_async
    raise Exception("The wandb backend process has shutdown")
Exception: The wandb backend process has shutdown
