wandb: Currently logged in as: nilm (use `wandb login --relogin` to force relogin)
True
1.10.2
patience:  20
training_home:  [142, 145, 183, 335]
test_home:  [3383]
wandb: wandb version 0.12.14 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.12.11
wandb: Run data is saved locally in /home/Alfredo/private_nilm/src_3/wandb/run-20220413_180227-14owe0t5
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run curious-rain-34
wandb: ‚≠êÔ∏è View project at https://wandb.ai/nilm/march7_FL_trials
wandb: üöÄ View run at https://wandb.ai/nilm/march7_FL_trials/runs/14owe0t5
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
[34m[1mwandb[0m: [33mWARNING[0m Step must only increase in log calls.  Step 9 < 10; dropping {'Training_Loss': 0.9076011327589736, 'Validation_Loss': 1.016072069897371, 'Training_R2': 0.0777922459844762, 'Validation_R2': 0.18821906753404527, 'Training_F1': 0.5310782866246577, 'Validation_F1': 0.3684811308463275, 'Training_NEP': 0.9377751072012164, 'Validation_NEP': 1.2966033602175802, 'Training_NDE': 0.5787232975982628, 'Validation_NDE': 0.6573632558480141, 'Training_MAE': 47.186793804150305, 'Validation_MAE': 37.043837945549576, 'Training_MSE': 3934.0166, 'Validation_MSE': 2820.7522}.
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
[34m[1mwandb[0m: [33mWARNING[0m Step must only increase in log calls.  Step 17 < 18; dropping {'Training_Loss': 0.7374607437186771, 'Validation_Loss': 1.2029390376718605, 'Training_R2': 0.25184113855583723, 'Validation_R2': 0.03680261893275216, 'Training_F1': 0.5738788510309972, 'Validation_F1': 0.4756435308028421, 'Training_NEP': 0.8467590367861867, 'Validation_NEP': 1.1940265990928565, 'Training_NDE': 0.47315985342004474, 'Validation_NDE': 0.7799771356038852, 'Training_MAE': 42.19534708362671, 'Validation_MAE': 34.113229378064474, 'Training_MSE': 3196.5393, 'Validation_MSE': 3346.89}.
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
[34m[1mwandb[0m: [33mWARNING[0m Step must only increase in log calls.  Step 25 < 26; dropping {'Training_Loss': 0.6607289303784017, 'Validation_Loss': 1.8767530707752003, 'Training_R2': 0.32662310311637954, 'Validation_R2': -0.5007432571155457, 'Training_F1': 0.6009218675907096, 'Validation_F1': 0.42360352454413186, 'Training_NEP': 0.7922365944534023, 'Validation_NEP': 1.94852169008461, 'Training_NDE': 0.4275940505440887, 'Validation_NDE': 1.215270566521717, 'Training_MAE': 39.17130092549839, 'Validation_MAE': 55.6690842670423, 'Training_MSE': 2863.9438, 'Validation_MSE': 5214.738}.
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
wandb: Network error (ReadTimeout), entering retry loop.
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
[34m[1mwandb[0m: [33mWARNING[0m Step must only increase in log calls.  Step 33 < 34; dropping {'Training_Loss': 0.6844974294304847, 'Validation_Loss': 1.4095477742307327, 'Training_R2': 0.3392271663084524, 'Validation_R2': -0.12781465499401579, 'Training_F1': 0.6181860147226538, 'Validation_F1': 0.44909859208286895, 'Training_NEP': 0.7572386028696235, 'Validation_NEP': 1.609720450366674, 'Training_NDE': 0.4151334570577832, 'Validation_NDE': 0.9132807681844188, 'Training_MAE': 39.031771744456556, 'Validation_MAE': 45.98956421878603, 'Training_MSE': 2966.9685, 'Validation_MSE': 3918.8972}.
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
[34m[1mwandb[0m: [33mWARNING[0m Step must only increase in log calls.  Step 41 < 42; dropping {'Training_Loss': 0.5610726192317627, 'Validation_Loss': 1.1152194186168558, 'Training_R2': 0.42434422714688314, 'Validation_R2': 0.10795349135258103, 'Training_F1': 0.6381804956748606, 'Validation_F1': 0.4271533227162037, 'Training_NEP': 0.7221550029652483, 'Validation_NEP': 1.3448669012753722, 'Training_NDE': 0.36581656794530365, 'Validation_NDE': 0.7223606441592714, 'Training_MAE': 35.550092961924314, 'Validation_MAE': 38.422722844724305, 'Training_MSE': 2431.9814, 'Validation_MSE': 3099.6567}.
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
LSTM(
  (conv1): Conv1d(1, 30, kernel_size=(10,), stride=(1,))
  (conv2): Conv1d(30, 30, kernel_size=(8,), stride=(1,))
  (conv3): Conv1d(30, 40, kernel_size=(6,), stride=(1,))
  (conv4): Conv1d(40, 50, kernel_size=(5,), stride=(1,))
  (conv5): Conv1d(50, 50, kernel_size=(5,), stride=(1,))
  (linear1): Linear(in_features=11000, out_features=1024, bias=True)
  (linear2): Linear(in_features=1024, out_features=1, bias=True)
  (relu): ReLU()
  (leaky): LeakyReLU(negative_slope=0.01)
  (dropout): Dropout(p=0.2, inplace=False)
)
Window Length:  249
trigger times: 0
Loss after 103680 batches: 1.0232
trigger times: 0
Loss after 207360 batches: 0.9899
Time to train on one home:  80.87813973426819
trigger times: 0
Loss after 288000 batches: 0.8867
trigger times: 0
Loss after 368640 batches: 0.7228
Time to train on one home:  70.29371500015259
trigger times: 0
Loss after 472320 batches: 0.6062
trigger times: 1
Loss after 576000 batches: 0.4527
Time to train on one home:  76.8132472038269
trigger times: 0
Loss after 679680 batches: 0.9805
trigger times: 0
Loss after 783360 batches: 0.9411
Time to train on one home:  75.69192814826965
<__main__.ExperimentLogger object at 0x7f1cf2f71880>
train_results:  [0.776631212045512]
test_results:  [[1.0655969127136118, 0.01441275958099264, 0.2394067208896335, 1.4815654841311863, 0.7924160583825194, 40.05714086757766, 2955.4534]]
Round_0_results:  [1.0655969127136118, 0.01441275958099264, 0.2394067208896335, 1.4815654841311863, 0.7924160583825194, 40.05714086757766, 2955.4534]
trigger times: 0
Loss after 887040 batches: 0.9076
trigger times: 0
Loss after 990720 batches: 0.7520
Time to train on one home:  79.01091694831848
trigger times: 0
Loss after 1071360 batches: 0.7555
trigger times: 0
Loss after 1152000 batches: 0.6333
Time to train on one home:  69.76600456237793
trigger times: 0
Loss after 1255680 batches: 0.4885
trigger times: 1
Loss after 1359360 batches: 0.3779
Time to train on one home:  74.74855160713196
trigger times: 0
Loss after 1463040 batches: 0.7994
trigger times: 1
Loss after 1566720 batches: 0.7264
Time to train on one home:  74.33300352096558
<__main__.ExperimentLogger object at 0x7f1cf2f71880>
train_results:  [0.776631212045512, 0.6223768898688349]
test_results:  [[1.0655969127136118, 0.01441275958099264, 0.2394067208896335, 1.4815654841311863, 0.7924160583825194, 40.05714086757766, 2955.4534], [0.7792356478817323, 0.27877051472350955, 0.41824675289558144, 1.2080452672324111, 0.5798713725931349, 32.66196463284669, 2162.7312]]
Round_1_results:  [0.7792356478817323, 0.27877051472350955, 0.41824675289558144, 1.2080452672324111, 0.5798713725931349, 32.66196463284669, 2162.7312]
trigger times: 0
Loss after 1670400 batches: 0.7375
trigger times: 1
Loss after 1774080 batches: 0.6707
Time to train on one home:  75.68154335021973
trigger times: 0
Loss after 1854720 batches: 0.6590
trigger times: 0
Loss after 1935360 batches: 0.5777
Time to train on one home:  69.2429723739624
trigger times: 0
Loss after 2039040 batches: 0.4147
trigger times: 1
Loss after 2142720 batches: 0.3438
Time to train on one home:  76.53753709793091
trigger times: 0
Loss after 2246400 batches: 0.7235
trigger times: 1
Loss after 2350080 batches: 0.6482
Time to train on one home:  75.13348031044006
<__main__.ExperimentLogger object at 0x7f1cf2f71880>
train_results:  [0.776631212045512, 0.6223768898688349, 0.5600800268546673]
test_results:  [[1.0655969127136118, 0.01441275958099264, 0.2394067208896335, 1.4815654841311863, 0.7924160583825194, 40.05714086757766, 2955.4534], [0.7792356478817323, 0.27877051472350955, 0.41824675289558144, 1.2080452672324111, 0.5798713725931349, 32.66196463284669, 2162.7312], [0.938461613129167, 0.13147656859254908, 0.47776673872323333, 1.3822970624216429, 0.6982962906826609, 37.37321687318661, 2604.4175]]
Round_2_results:  [0.938461613129167, 0.13147656859254908, 0.47776673872323333, 1.3822970624216429, 0.6982962906826609, 37.37321687318661, 2604.4175]
trigger times: 0
Loss after 2453760 batches: 0.6607
trigger times: 1
Loss after 2557440 batches: 0.5952
Time to train on one home:  77.04993748664856
trigger times: 0
Loss after 2638080 batches: 0.6272
trigger times: 0
Loss after 2718720 batches: 0.5468
Time to train on one home:  69.90368723869324
trigger times: 0
Loss after 2822400 batches: 0.3714
trigger times: 1
Loss after 2926080 batches: 0.3124
Time to train on one home:  74.59100937843323
trigger times: 0
Loss after 3029760 batches: 0.6887
trigger times: 1
Loss after 3133440 batches: 0.6157
Time to train on one home:  74.0646607875824
<__main__.ExperimentLogger object at 0x7f1cf2f71880>
train_results:  [0.776631212045512, 0.6223768898688349, 0.5600800268546673, 0.517516588391342]
test_results:  [[1.0655969127136118, 0.01441275958099264, 0.2394067208896335, 1.4815654841311863, 0.7924160583825194, 40.05714086757766, 2955.4534], [0.7792356478817323, 0.27877051472350955, 0.41824675289558144, 1.2080452672324111, 0.5798713725931349, 32.66196463284669, 2162.7312], [0.938461613129167, 0.13147656859254908, 0.47776673872323333, 1.3822970624216429, 0.6982962906826609, 37.37321687318661, 2604.4175], [0.8546626050682629, 0.21045468392136657, 0.4722596176999952, 1.1971473939598656, 0.6347975720702576, 32.367318429549535, 2367.588]]
Round_3_results:  [0.8546626050682629, 0.21045468392136657, 0.4722596176999952, 1.1971473939598656, 0.6347975720702576, 32.367318429549535, 2367.588]
trigger times: 0
Loss after 3237120 batches: 0.6845
trigger times: 1
Loss after 3340800 batches: 0.6162
Time to train on one home:  74.44015383720398
trigger times: 0
Loss after 3421440 batches: 0.5333
trigger times: 0
Loss after 3502080 batches: 0.4735
Time to train on one home:  69.4755973815918
trigger times: 0
Loss after 3605760 batches: 0.3310
trigger times: 1
Loss after 3709440 batches: 0.2805
Time to train on one home:  75.07327365875244
trigger times: 0
Loss after 3813120 batches: 0.6493
trigger times: 0
Loss after 3916800 batches: 0.5696
Time to train on one home:  74.6599633693695
<__main__.ExperimentLogger object at 0x7f1cf2f71880>
train_results:  [0.776631212045512, 0.6223768898688349, 0.5600800268546673, 0.517516588391342, 0.48495044601383924]
test_results:  [[1.0655969127136118, 0.01441275958099264, 0.2394067208896335, 1.4815654841311863, 0.7924160583825194, 40.05714086757766, 2955.4534], [0.7792356478817323, 0.27877051472350955, 0.41824675289558144, 1.2080452672324111, 0.5798713725931349, 32.66196463284669, 2162.7312], [0.938461613129167, 0.13147656859254908, 0.47776673872323333, 1.3822970624216429, 0.6982962906826609, 37.37321687318661, 2604.4175], [0.8546626050682629, 0.21045468392136657, 0.4722596176999952, 1.1971473939598656, 0.6347975720702576, 32.367318429549535, 2367.588], [0.8835127257248935, 0.1830664961413957, 0.36265375656191146, 1.1475171348481348, 0.6568177838960704, 31.025463275776968, 2449.7163]]
Round_4_results:  [0.8835127257248935, 0.1830664961413957, 0.36265375656191146, 1.1475171348481348, 0.6568177838960704, 31.025463275776968, 2449.7163]
trigger times: 0
Loss after 4020480 batches: 0.5611
trigger times: 1
Loss after 4124160 batches: 0.4825
Time to train on one home:  74.22527742385864
trigger times: 0
Loss after 4204800 batches: 0.4565
trigger times: 1
Loss after 4285440 batches: 0.3869
Time to train on one home:  71.03345608711243
trigger times: 0
Loss after 4389120 batches: 0.2957
trigger times: 0
Loss after 4492800 batches: 0.2477
Time to train on one home:  75.02768659591675
trigger times: 0
Loss after 4596480 batches: 0.5430
trigger times: 1
Loss after 4700160 batches: 0.4855
Time to train on one home:  74.74253559112549
<__main__.ExperimentLogger object at 0x7f1cf2f71880>
train_results:  [0.776631212045512, 0.6223768898688349, 0.5600800268546673, 0.517516588391342, 0.48495044601383924, 0.400670545045541]
test_results:  /home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
[34m[1mwandb[0m: [33mWARNING[0m Step must only increase in log calls.  Step 49 < 50; dropping {'Training_Loss': 0.5407056893739436, 'Validation_Loss': 1.7662311538177378, 'Training_R2': 0.45846405383388034, 'Validation_R2': -0.4116192105604921, 'Training_F1': 0.6513505651200262, 'Validation_F1': 0.3861175695160521, 'Training_NEP': 0.6952589798777263, 'Validation_NEP': 1.8935196519263109, 'Training_NDE': 0.3388040095247141, 'Validation_NDE': 1.143099773793425, 'Training_MAE': 35.38105754975552, 'Validation_MAE': 54.097681129641, 'Training_MSE': 2343.7004, 'Validation_MSE': 4905.0527}.
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
[34m[1mwandb[0m: [33mWARNING[0m Step must only increase in log calls.  Step 57 < 58; dropping {'Training_Loss': 0.5509795175934279, 'Validation_Loss': 1.478676379603498, 'Training_R2': 0.4464068013357928, 'Validation_R2': -0.18087712919867838, 'Training_F1': 0.6424061561380453, 'Validation_F1': 0.35178460990296884, 'Training_NEP': 0.7158928057551935, 'Validation_NEP': 1.4869155461511823, 'Training_NDE': 0.3481183517268522, 'Validation_NDE': 0.9562496522903425, 'Training_MAE': 36.124912119169295, 'Validation_MAE': 42.4810394761739, 'Training_MSE': 2388.2324, 'Validation_MSE': 4103.277}.
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
[34m[1mwandb[0m: [33mWARNING[0m Step must only increase in log calls.  Step 65 < 66; dropping {'Training_Loss': 0.4892254995941012, 'Validation_Loss': 1.6328630605164696, 'Training_R2': 0.4974354508985035, 'Validation_R2': -0.3037318094574095, 'Training_F1': 0.6569645224781335, 'Validation_F1': 0.35989348809535576, 'Training_NEP': 0.6840412910841054, 'Validation_NEP': 1.7289416157751727, 'Training_NDE': 0.3188334025904914, 'Validation_NDE': 1.055734808175589, 'Training_MAE': 33.73036106898461, 'Validation_MAE': 49.39570187551004, 'Training_MSE': 2120.5586, 'Validation_MSE': 4530.169}.
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
[34m[1mwandb[0m: [33mWARNING[0m Step must only increase in log calls.  Step 73 < 74; dropping {'Training_Loss': 0.435813682673522, 'Validation_Loss': 1.3272016951266457, 'Training_R2': 0.5578566630024383, 'Validation_R2': -0.06065244441819506, 'Training_F1': 0.6805894993012157, 'Validation_F1': 0.36263752191552273, 'Training_NEP': 0.638394132967884, 'Validation_NEP': 1.4096995440765885, 'Training_NDE': 0.28166707849693373, 'Validation_NDE': 0.8588942118508565, 'Training_MAE': 31.496745895658748, 'Validation_MAE': 40.27498544653257, 'Training_MSE': 1889.0437, 'Validation_MSE': 3685.524}.
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
/home/Alfredo/private_nilm/src_3/clean_data_seq2point.py:320: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  i['net_power'] = split_data(normalize_x(i['net_power'].values), window_length)
[[1.0655969127136118, 0.01441275958099264, 0.2394067208896335, 1.4815654841311863, 0.7924160583825194, 40.05714086757766, 2955.4534], [0.7792356478817323, 0.27877051472350955, 0.41824675289558144, 1.2080452672324111, 0.5798713725931349, 32.66196463284669, 2162.7312], [0.938461613129167, 0.13147656859254908, 0.47776673872323333, 1.3822970624216429, 0.6982962906826609, 37.37321687318661, 2604.4175], [0.8546626050682629, 0.21045468392136657, 0.4722596176999952, 1.1971473939598656, 0.6347975720702576, 32.367318429549535, 2367.588], [0.8835127257248935, 0.1830664961413957, 0.36265375656191146, 1.1475171348481348, 0.6568177838960704, 31.025463275776968, 2449.7163], [0.9993005491354886, 0.07533176763203753, 0.2357872416813867, 1.1741518078913904, 0.7434369337949696, 31.745585917322725, 2772.7773]]
Round_5_results:  [0.9993005491354886, 0.07533176763203753, 0.2357872416813867, 1.1741518078913904, 0.7434369337949696, 31.745585917322725, 2772.7773]
trigger times: 0
Loss after 4803840 batches: 0.5407
trigger times: 0
Loss after 4907520 batches: 0.4877
Time to train on one home:  77.38900113105774
trigger times: 0
Loss after 4988160 batches: 0.3760
trigger times: 1
Loss after 5068800 batches: 0.3145
Time to train on one home:  69.20838832855225
trigger times: 0
Loss after 5172480 batches: 0.2788
trigger times: 0
Loss after 5276160 batches: 0.2321
Time to train on one home:  75.24471235275269
trigger times: 0
Loss after 5379840 batches: 0.4941
trigger times: 0
Loss after 5483520 batches: 0.4102
Time to train on one home:  74.58311891555786
<__main__.ExperimentLogger object at 0x7f1cf2f71880>
train_results:  [0.776631212045512, 0.6223768898688349, 0.5600800268546673, 0.517516588391342, 0.48495044601383924, 0.400670545045541, 0.3611375375052527]
test_results:  [[1.0655969127136118, 0.01441275958099264, 0.2394067208896335, 1.4815654841311863, 0.7924160583825194, 40.05714086757766, 2955.4534], [0.7792356478817323, 0.27877051472350955, 0.41824675289558144, 1.2080452672324111, 0.5798713725931349, 32.66196463284669, 2162.7312], [0.938461613129167, 0.13147656859254908, 0.47776673872323333, 1.3822970624216429, 0.6982962906826609, 37.37321687318661, 2604.4175], [0.8546626050682629, 0.21045468392136657, 0.4722596176999952, 1.1971473939598656, 0.6347975720702576, 32.367318429549535, 2367.588], [0.8835127257248935, 0.1830664961413957, 0.36265375656191146, 1.1475171348481348, 0.6568177838960704, 31.025463275776968, 2449.7163], [0.9993005491354886, 0.07533176763203753, 0.2357872416813867, 1.1741518078913904, 0.7434369337949696, 31.745585917322725, 2772.7773], [1.100617726059521, -0.019110489385223195, 0.41479912842982447, 1.3289639374546076, 0.8193688837850593, 35.93124719814018, 3055.979]]
Round_6_results:  [1.100617726059521, -0.019110489385223195, 0.41479912842982447, 1.3289639374546076, 0.8193688837850593, 35.93124719814018, 3055.979]
trigger times: 0
Loss after 5587200 batches: 0.5510
trigger times: 1
Loss after 5690880 batches: 0.4923
Time to train on one home:  75.62067651748657
trigger times: 0
Loss after 5771520 batches: 0.3429
trigger times: 1
Loss after 5852160 batches: 0.2601
Time to train on one home:  71.36668062210083
trigger times: 0
Loss after 5955840 batches: 0.2601
trigger times: 1
Loss after 6059520 batches: 0.2049
Time to train on one home:  75.47516965866089
trigger times: 0
Loss after 6163200 batches: 0.4193
trigger times: 1
Loss after 6266880 batches: 0.3465
Time to train on one home:  74.48074197769165
<__main__.ExperimentLogger object at 0x7f1cf2f71880>
train_results:  [0.776631212045512, 0.6223768898688349, 0.5600800268546673, 0.517516588391342, 0.48495044601383924, 0.400670545045541, 0.3611375375052527, 0.32594088089013407]
test_results:  [[1.0655969127136118, 0.01441275958099264, 0.2394067208896335, 1.4815654841311863, 0.7924160583825194, 40.05714086757766, 2955.4534], [0.7792356478817323, 0.27877051472350955, 0.41824675289558144, 1.2080452672324111, 0.5798713725931349, 32.66196463284669, 2162.7312], [0.938461613129167, 0.13147656859254908, 0.47776673872323333, 1.3822970624216429, 0.6982962906826609, 37.37321687318661, 2604.4175], [0.8546626050682629, 0.21045468392136657, 0.4722596176999952, 1.1971473939598656, 0.6347975720702576, 32.367318429549535, 2367.588], [0.8835127257248935, 0.1830664961413957, 0.36265375656191146, 1.1475171348481348, 0.6568177838960704, 31.025463275776968, 2449.7163], [0.9993005491354886, 0.07533176763203753, 0.2357872416813867, 1.1741518078913904, 0.7434369337949696, 31.745585917322725, 2772.7773], [1.100617726059521, -0.019110489385223195, 0.41479912842982447, 1.3289639374546076, 0.8193688837850593, 35.93124719814018, 3055.979], [1.2861504949191038, -0.18920610404830507, 0.40071249614264687, 1.5074394748430755, 0.9561264339966153, 40.756696912756674, 3566.0398]]
Round_7_results:  [1.2861504949191038, -0.18920610404830507, 0.40071249614264687, 1.5074394748430755, 0.9561264339966153, 40.756696912756674, 3566.0398]
trigger times: 0
Loss after 6370560 batches: 0.4892
trigger times: 1
Loss after 6474240 batches: 0.4108
Time to train on one home:  76.26808381080627
trigger times: 0
Loss after 6554880 batches: 0.2867
trigger times: 0
Loss after 6635520 batches: 0.2153
Time to train on one home:  69.84295201301575
trigger times: 0
Loss after 6739200 batches: 0.2308
trigger times: 1
Loss after 6842880 batches: 0.1780
Time to train on one home:  75.25972747802734
trigger times: 0
Loss after 6946560 batches: 0.3326
trigger times: 1
Loss after 7050240 batches: 0.2689
Time to train on one home:  74.1781485080719
<__main__.ExperimentLogger object at 0x7f1cf2f71880>
train_results:  [0.776631212045512, 0.6223768898688349, 0.5600800268546673, 0.517516588391342, 0.48495044601383924, 0.400670545045541, 0.3611375375052527, 0.32594088089013407, 0.26825357700108404]
test_results:  [[1.0655969127136118, 0.01441275958099264, 0.2394067208896335, 1.4815654841311863, 0.7924160583825194, 40.05714086757766, 2955.4534], [0.7792356478817323, 0.27877051472350955, 0.41824675289558144, 1.2080452672324111, 0.5798713725931349, 32.66196463284669, 2162.7312], [0.938461613129167, 0.13147656859254908, 0.47776673872323333, 1.3822970624216429, 0.6982962906826609, 37.37321687318661, 2604.4175], [0.8546626050682629, 0.21045468392136657, 0.4722596176999952, 1.1971473939598656, 0.6347975720702576, 32.367318429549535, 2367.588], [0.8835127257248935, 0.1830664961413957, 0.36265375656191146, 1.1475171348481348, 0.6568177838960704, 31.025463275776968, 2449.7163], [0.9993005491354886, 0.07533176763203753, 0.2357872416813867, 1.1741518078913904, 0.7434369337949696, 31.745585917322725, 2772.7773], [1.100617726059521, -0.019110489385223195, 0.41479912842982447, 1.3289639374546076, 0.8193688837850593, 35.93124719814018, 3055.979], [1.2861504949191038, -0.18920610404830507, 0.40071249614264687, 1.5074394748430755, 0.9561264339966153, 40.756696912756674, 3566.0398], [1.117577270111617, -0.032393898282644606, 0.2763314199994242, 1.3619789058675342, 0.8300487973317311, 36.823874121904375, 3095.8115]]
Round_8_results:  [1.117577270111617, -0.032393898282644606, 0.2763314199994242, 1.3619789058675342, 0.8300487973317311, 36.823874121904375, 3095.8115]
trigger times: 0
Loss after 7153920 batches: 0.4358
trigger times: 1
Loss after 7257600 batches: 0.3471
Time to train on one home:  75.07862639427185
trigger times: 0
Loss after 7338240 batches: 0.2094
trigger times: 1
Loss after 7418880 batches: 0.1750
Time to train on one home:  70.4440906047821
trigger times: 0
Loss after 7522560 batches: 0.1861
trigger times: 1
Loss after 7626240 batches: 0.1395
Time to train on one home:  74.98063158988953
trigger times: 0
Loss after 7729920 batches: 0.2790
trigger times: 1
Loss after 7833600 batches: 0.2322
Time to train on one home:  75.93464374542236
<__main__.ExperimentLogger object at 0x7f1cf2f71880>
train_results:  [0.776631212045512, 0.6223768898688349, 0.5600800268546673, 0.517516588391342, 0.48495044601383924, 0.400670545045541, 0.3611375375052527, 0.32594088089013407, 0.26825357700108404, 0.2234619165137509]
test_results:  [[1.0655969127136118, 0.01441275958099264, 0.2394067208896335, 1.4815654841311863, 0.7924160583825194, 40.05714086757766, 2955.4534], [0.7792356478817323, 0.27877051472350955, 0.41824675289558144, 1.2080452672324111, 0.5798713725931349, 32.66196463284669, 2162.7312], [0.938461613129167, 0.13147656859254908, 0.47776673872323333, 1.3822970624216429, 0.6982962906826609, 37.37321687318661, 2604.4175], [0.8546626050682629, 0.21045468392136657, 0.4722596176999952, 1.1971473939598656, 0.6347975720702576, 32.367318429549535, 2367.588], [0.8835127257248935, 0.1830664961413957, 0.36265375656191146, 1.1475171348481348, 0.6568177838960704, 31.025463275776968, 2449.7163], [0.9993005491354886, 0.07533176763203753, 0.2357872416813867, 1.1741518078913904, 0.7434369337949696, 31.745585917322725, 2772.7773], [1.100617726059521, -0.019110489385223195, 0.41479912842982447, 1.3289639374546076, 0.8193688837850593, 35.93124719814018, 3055.979], [1.2861504949191038, -0.18920610404830507, 0.40071249614264687, 1.5074394748430755, 0.9561264339966153, 40.756696912756674, 3566.0398], [1.117577270111617, -0.032393898282644606, 0.2763314199994242, 1.3619789058675342, 0.8300487973317311, 36.823874121904375, 3095.8115], [0.9990798256853047, 0.0764238375981996, 0.20749799999465776, 1.253168848203852, 0.7425589052018883, 33.88197256282524, 2769.5024]]
Round_9_results:  [0.9990798256853047, 0.0764238375981996, 0.20749799999465776, 1.253168848203852, 0.7425589052018883, 33.88197256282524, 2769.5024]
wandb: Waiting for W&B process to finish... (success).
wandb: - 76.411 MB of 76.411 MB uploaded (0.000 MB deduped)wandb: \ 76.411 MB of 76.411 MB uploaded (0.000 MB deduped)wandb: | 76.411 MB of 76.479 MB uploaded (0.000 MB deduped)wandb: / 76.411 MB of 76.479 MB uploaded (0.000 MB deduped)wandb: - 76.479 MB of 76.479 MB uploaded (0.000 MB deduped)wandb: \ 76.479 MB of 76.479 MB uploaded (0.000 MB deduped)wandb: | 76.479 MB of 76.479 MB uploaded (0.000 MB deduped)wandb: / 76.479 MB of 76.479 MB uploaded (0.000 MB deduped)wandb: - 76.479 MB of 76.479 MB uploaded (0.000 MB deduped)wandb: \ 76.479 MB of 76.479 MB uploaded (0.000 MB deduped)wandb: | 76.479 MB of 76.479 MB uploaded (0.000 MB deduped)wandb: / 76.479 MB of 76.479 MB uploaded (0.000 MB deduped)wandb:                                                                                
wandb: 
wandb: Run history:
wandb:   Test_F1_Score ‚ñÇ‚ñÇ‚ñÜ‚ñÜ‚ñà‚ñà‚ñà‚ñà‚ñÖ‚ñÖ‚ñÇ‚ñÇ‚ñÜ‚ñÜ‚ñÜ‚ñÜ‚ñÉ‚ñÉ‚ñÅ‚ñÅ
wandb:       Test_Loss ‚ñÖ‚ñÖ‚ñÅ‚ñÅ‚ñÉ‚ñÉ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÑ‚ñÑ‚ñÖ‚ñÖ‚ñà‚ñà‚ñÜ‚ñÜ‚ñÑ‚ñÑ
wandb:        Test_MAE ‚ñá‚ñá‚ñÇ‚ñÇ‚ñÜ‚ñÜ‚ñÇ‚ñÇ‚ñÅ‚ñÅ‚ñÇ‚ñÇ‚ñÖ‚ñÖ‚ñà‚ñà‚ñÖ‚ñÖ‚ñÉ‚ñÉ
wandb:        Test_MSE ‚ñÖ‚ñÖ‚ñÅ‚ñÅ‚ñÉ‚ñÉ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÑ‚ñÑ‚ñÖ‚ñÖ‚ñà‚ñà‚ñÜ‚ñÜ‚ñÑ‚ñÑ
wandb:        Test_NDE ‚ñÖ‚ñÖ‚ñÅ‚ñÅ‚ñÉ‚ñÉ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÑ‚ñÑ‚ñÖ‚ñÖ‚ñà‚ñà‚ñÜ‚ñÜ‚ñÑ‚ñÑ
wandb:        Test_NEP ‚ñá‚ñá‚ñÇ‚ñÇ‚ñÜ‚ñÜ‚ñÇ‚ñÇ‚ñÅ‚ñÅ‚ñÇ‚ñÇ‚ñÖ‚ñÖ‚ñà‚ñà‚ñÖ‚ñÖ‚ñÉ‚ñÉ
wandb:   Test_R2_Value ‚ñÑ‚ñÑ‚ñà‚ñà‚ñÜ‚ñÜ‚ñá‚ñá‚ñá‚ñá‚ñÖ‚ñÖ‚ñÑ‚ñÑ‚ñÅ‚ñÅ‚ñÉ‚ñÉ‚ñÖ‚ñÖ
wandb:     Training_F1 ‚ñÅ‚ñÅ‚ñÑ‚ñÜ‚ñÑ‚ñÉ‚ñÖ‚ñá‚ñÖ‚ñÖ‚ñÖ‚ñá‚ñÖ‚ñÖ‚ñá‚ñá‚ñÖ‚ñÖ‚ñá‚ñÖ‚ñÜ‚ñÜ‚ñá‚ñÜ‚ñÖ‚ñÜ‚ñá‚ñÜ‚ñÖ‚ñá‚ñá‚ñÜ‚ñÖ‚ñá‚ñà‚ñá‚ñÖ‚ñá‚ñà‚ñá
wandb:   Training_Loss ‚ñà‚ñà‚ñÜ‚ñÉ‚ñá‚ñÜ‚ñÖ‚ñÉ‚ñÜ‚ñÖ‚ñÑ‚ñÉ‚ñÖ‚ñÖ‚ñÉ‚ñÇ‚ñÖ‚ñÑ‚ñÉ‚ñÖ‚ñÑ‚ñÑ‚ñÇ‚ñÑ‚ñÑ‚ñÉ‚ñÇ‚ñÑ‚ñÑ‚ñÇ‚ñÇ‚ñÉ‚ñÉ‚ñÇ‚ñÅ‚ñÉ‚ñÉ‚ñÅ‚ñÅ‚ñÇ
wandb:    Training_MAE ‚ñà‚ñà‚ñÜ‚ñÑ‚ñà‚ñÖ‚ñÜ‚ñÉ‚ñÜ‚ñÜ‚ñÖ‚ñÉ‚ñÖ‚ñÖ‚ñÉ‚ñÉ‚ñÖ‚ñÖ‚ñÉ‚ñÖ‚ñÖ‚ñÑ‚ñÇ‚ñÖ‚ñÑ‚ñÑ‚ñÇ‚ñÑ‚ñÑ‚ñÉ‚ñÇ‚ñÑ‚ñÉ‚ñÇ‚ñÅ‚ñÉ‚ñÉ‚ñÇ‚ñÅ‚ñÇ
wandb:    Training_MSE ‚ñÖ‚ñÖ‚ñà‚ñÉ‚ñÜ‚ñÑ‚ñá‚ñÉ‚ñÑ‚ñá‚ñÜ‚ñÇ‚ñÑ‚ñá‚ñÉ‚ñÇ‚ñÑ‚ñÜ‚ñÇ‚ñÑ‚ñÉ‚ñÖ‚ñÇ‚ñÉ‚ñÉ‚ñÑ‚ñÇ‚ñÉ‚ñÉ‚ñÉ‚ñÇ‚ñÉ‚ñÇ‚ñÇ‚ñÅ‚ñÇ‚ñÇ‚ñÇ‚ñÅ‚ñÅ
wandb:    Training_NDE ‚ñà‚ñà‚ñÜ‚ñÉ‚ñÜ‚ñÜ‚ñÖ‚ñÉ‚ñÖ‚ñÜ‚ñÖ‚ñÇ‚ñÑ‚ñÖ‚ñÉ‚ñÇ‚ñÑ‚ñÖ‚ñÇ‚ñÑ‚ñÑ‚ñÑ‚ñÇ‚ñÉ‚ñÑ‚ñÉ‚ñÇ‚ñÉ‚ñÑ‚ñÇ‚ñÇ‚ñÉ‚ñÉ‚ñÇ‚ñÅ‚ñÇ‚ñÉ‚ñÇ‚ñÅ‚ñÇ
wandb:    Training_NEP ‚ñà‚ñà‚ñÖ‚ñÉ‚ñÖ‚ñÜ‚ñÑ‚ñÇ‚ñÑ‚ñÑ‚ñÑ‚ñÇ‚ñÑ‚ñÑ‚ñÇ‚ñÇ‚ñÑ‚ñÑ‚ñÇ‚ñÑ‚ñÉ‚ñÉ‚ñÇ‚ñÉ‚ñÑ‚ñÉ‚ñÇ‚ñÉ‚ñÑ‚ñÇ‚ñÇ‚ñÉ‚ñÑ‚ñÇ‚ñÅ‚ñÇ‚ñÑ‚ñÇ‚ñÅ‚ñÇ
wandb:     Training_R2 ‚ñÅ‚ñÅ‚ñÉ‚ñÖ‚ñÅ‚ñÉ‚ñÑ‚ñÜ‚ñÉ‚ñÑ‚ñÑ‚ñÜ‚ñÑ‚ñÑ‚ñÜ‚ñá‚ñÑ‚ñÖ‚ñÜ‚ñÑ‚ñÑ‚ñÖ‚ñá‚ñÖ‚ñÖ‚ñÜ‚ñá‚ñÖ‚ñÖ‚ñá‚ñá‚ñÜ‚ñÜ‚ñá‚ñà‚ñÜ‚ñÜ‚ñà‚ñà‚ñá
wandb:   Validation_F1 ‚ñÖ‚ñÜ‚ñá‚ñá‚ñÜ‚ñá‚ñà‚ñá‚ñÜ‚ñà‚ñà‚ñá‚ñá‚ñà‚ñá‚ñá‚ñÜ‚ñá‚ñá‚ñá‚ñá‚ñÖ‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñÜ‚ñÜ‚ñá‚ñÖ‚ñá‚ñÖ‚ñá‚ñÅ
wandb: Validation_Loss ‚ñÇ‚ñÅ‚ñÇ‚ñÇ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÇ‚ñÇ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÇ‚ñÅ‚ñÅ‚ñÅ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñà‚ñÇ‚ñÇ‚ñÇ‚ñÉ‚ñÉ‚ñÇ‚ñÇ‚ñÉ‚ñÇ‚ñÇ‚ñÇ‚ñÑ
wandb:  Validation_MAE ‚ñÉ‚ñÇ‚ñÇ‚ñÑ‚ñÇ‚ñÇ‚ñÅ‚ñÉ‚ñÇ‚ñÇ‚ñÇ‚ñÉ‚ñÑ‚ñÇ‚ñÇ‚ñÉ‚ñÉ‚ñÅ‚ñÉ‚ñÉ‚ñÉ‚ñÅ‚ñÉ‚ñÑ‚ñÑ‚ñÇ‚ñÑ‚ñà‚ñÉ‚ñÑ‚ñÑ‚ñÖ‚ñÖ‚ñÉ‚ñÉ‚ñÑ‚ñÉ‚ñÇ‚ñÑ‚ñÑ
wandb:  Validation_MSE ‚ñÇ‚ñÅ‚ñÇ‚ñÇ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÇ‚ñÇ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÇ‚ñÅ‚ñÅ‚ñÅ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñà‚ñÇ‚ñÇ‚ñÇ‚ñÉ‚ñÉ‚ñÇ‚ñÇ‚ñÉ‚ñÇ‚ñÇ‚ñÇ‚ñÑ
wandb:  Validation_NDE ‚ñÇ‚ñÅ‚ñÇ‚ñÇ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÇ‚ñÇ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÇ‚ñÅ‚ñÅ‚ñÅ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñà‚ñÇ‚ñÇ‚ñÇ‚ñÉ‚ñÉ‚ñÇ‚ñÇ‚ñÉ‚ñÇ‚ñÇ‚ñÇ‚ñÑ
wandb:  Validation_NEP ‚ñÉ‚ñÇ‚ñÇ‚ñÑ‚ñÇ‚ñÇ‚ñÅ‚ñÉ‚ñÇ‚ñÇ‚ñÇ‚ñÉ‚ñÑ‚ñÇ‚ñÇ‚ñÉ‚ñÉ‚ñÅ‚ñÉ‚ñÉ‚ñÉ‚ñÅ‚ñÉ‚ñÑ‚ñÑ‚ñÇ‚ñÑ‚ñà‚ñÉ‚ñÑ‚ñÑ‚ñÖ‚ñÖ‚ñÉ‚ñÉ‚ñÑ‚ñÉ‚ñÇ‚ñÑ‚ñÑ
wandb:   Validation_R2 ‚ñá‚ñà‚ñá‚ñá‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñá‚ñá‚ñà‚ñà‚ñà‚ñà‚ñà‚ñá‚ñà‚ñà‚ñà‚ñá‚ñá‚ñá‚ñá‚ñá‚ñÅ‚ñá‚ñá‚ñá‚ñÜ‚ñÜ‚ñá‚ñá‚ñÜ‚ñá‚ñá‚ñá‚ñÖ
wandb: 
wandb: Run summary:
wandb:   Test_F1_Score 0.2075
wandb:       Test_Loss 0.99908
wandb:        Test_MAE 33.88197
wandb:        Test_MSE 2769.50244
wandb:        Test_NDE 0.74256
wandb:        Test_NEP 1.25317
wandb:   Test_R2_Value 0.07642
wandb:     Training_F1 0.82524
wandb:   Training_Loss 0.23225
wandb:    Training_MAE 24.55076
wandb:    Training_MSE 1115.0957
wandb:    Training_NDE 0.11404
wandb:    Training_NEP 0.34913
wandb:     Training_R2 0.76928
wandb:   Validation_F1 -0.04335
wandb: Validation_Loss 2.46844
wandb:  Validation_MAE 49.92404
wandb:  Validation_MSE 6862.86768
wandb:  Validation_NDE 1.59936
wandb:  Validation_NEP 1.74743
wandb:   Validation_R2 -0.97506
wandb: 
wandb: Synced curious-rain-34: https://wandb.ai/nilm/march7_FL_trials/runs/14owe0t5
wandb: Synced 7 W&B file(s), 0 media file(s), 0 artifact file(s) and 2 other file(s)
wandb: Find logs at: ./wandb/run-20220413_180227-14owe0t5/logs

{'Train_home_[142, 145, 183, 335]_Test_home_[3383]': [[1.0655969127136118, 0.01441275958099264, 0.2394067208896335, 1.4815654841311863, 0.7924160583825194, 40.05714086757766, 2955.4534], [0.7792356478817323, 0.27877051472350955, 0.41824675289558144, 1.2080452672324111, 0.5798713725931349, 32.66196463284669, 2162.7312], [0.938461613129167, 0.13147656859254908, 0.47776673872323333, 1.3822970624216429, 0.6982962906826609, 37.37321687318661, 2604.4175], [0.8546626050682629, 0.21045468392136657, 0.4722596176999952, 1.1971473939598656, 0.6347975720702576, 32.367318429549535, 2367.588], [0.8835127257248935, 0.1830664961413957, 0.36265375656191146, 1.1475171348481348, 0.6568177838960704, 31.025463275776968, 2449.7163], [0.9993005491354886, 0.07533176763203753, 0.2357872416813867, 1.1741518078913904, 0.7434369337949696, 31.745585917322725, 2772.7773], [1.100617726059521, -0.019110489385223195, 0.41479912842982447, 1.3289639374546076, 0.8193688837850593, 35.93124719814018, 3055.979], [1.2861504949191038, -0.18920610404830507, 0.40071249614264687, 1.5074394748430755, 0.9561264339966153, 40.756696912756674, 3566.0398], [1.117577270111617, -0.032393898282644606, 0.2763314199994242, 1.3619789058675342, 0.8300487973317311, 36.823874121904375, 3095.8115], [0.9990798256853047, 0.0764238375981996, 0.20749799999465776, 1.253168848203852, 0.7425589052018883, 33.88197256282524, 2769.5024]]}
[(array([0, 1, 2, 3]), {'conv1.weight': tensor([[[ 2.6329e-01,  1.2529e-01, -1.6246e-01,  9.6107e-02, -1.8625e-01,
          -1.9330e-02,  2.8818e-02, -1.5796e-01,  1.6457e-01, -1.4320e-01]],

        [[-2.6773e-01, -1.8389e-01,  1.8848e-01, -8.5973e-03, -1.0511e-01,
          -2.4364e-01,  1.5016e-01, -5.7343e-02, -1.6288e-01,  1.6062e-01]],

        [[-3.9616e-03, -2.5681e-01,  1.9828e-01,  1.4007e-01,  2.6343e-01,
          -1.0916e-01, -2.4729e-01, -2.2169e-01,  1.9001e-01, -1.1100e-01]],

        [[ 2.1143e-01, -1.0739e-01,  1.3639e-02, -2.6336e-01, -2.0421e-01,
          -2.9928e-02,  1.7040e-01,  2.8660e-01, -1.6874e-01,  1.8634e-01]],

        [[ 2.9864e-01, -2.1084e-01,  2.3916e-01, -2.1192e-01,  2.3490e-01,
          -1.8366e-01, -1.6645e-01, -1.1508e-02, -2.6290e-01,  3.0179e-01]],

        [[ 2.4197e-01,  2.6341e-01, -2.4585e-01,  2.5805e-01, -2.2441e-01,
          -3.7542e-01,  1.9736e-01, -2.1143e-01, -1.6540e-01,  2.0379e-01]],

        [[ 2.7874e-01,  1.5274e-01, -2.9126e-01, -2.0472e-01,  1.7408e-01,
           8.2583e-02,  2.0098e-01, -1.3528e-01, -3.2527e-02, -2.2899e-01]],

        [[-9.5531e-02,  2.0475e-01,  1.3981e-02, -3.6620e-01,  1.2115e-01,
           1.9605e-01,  2.7600e-01,  9.1612e-02, -1.2580e-01, -1.3829e-01]],

        [[-2.5945e-01,  3.2737e-01,  4.6582e-02,  2.2551e-01,  9.6561e-02,
          -3.0647e-01, -2.5855e-01, -2.2367e-01,  2.9882e-01, -2.1833e-01]],

        [[-1.5845e-01, -1.5362e-01,  3.0993e-01, -9.0946e-02,  4.8942e-02,
           5.9046e-03,  9.8302e-02, -2.6134e-01,  1.7693e-01, -2.2490e-02]],

        [[ 1.3256e-01,  2.2850e-01, -6.2110e-02,  4.2387e-02,  2.6560e-01,
           6.3369e-02, -1.0674e-01,  1.9797e-01, -2.1916e-01,  8.7746e-02]],

        [[ 2.5500e-01, -2.7149e-01,  1.2919e-01,  2.3523e-01,  1.1262e-01,
           4.7908e-02, -1.7789e-03, -2.7532e-02, -1.1416e-01,  6.7114e-02]],

        [[-5.6031e-02, -2.9713e-01, -1.9816e-01, -7.1036e-02, -2.6941e-01,
          -4.6317e-03,  2.6698e-01,  1.8561e-01, -2.8490e-01, -1.6260e-01]],

        [[ 1.6343e-01,  8.0972e-02, -7.1240e-02, -2.1751e-01, -1.3460e-01,
          -1.2682e-01, -1.5328e-01,  2.3285e-01, -2.3598e-01, -1.0267e-01]],

        [[-3.1918e-01,  2.6308e-01, -2.4245e-01,  4.6363e-02,  2.7275e-02,
           2.3683e-01, -2.7622e-01,  1.7349e-01,  2.5279e-01, -2.2722e-01]],

        [[-8.8978e-02, -3.2027e-01,  1.6706e-01,  1.9700e-01, -2.9714e-01,
           1.7310e-01,  1.0080e-01, -2.6991e-01,  7.5179e-02, -8.5023e-03]],

        [[-3.3556e-01,  1.0071e-01, -2.2838e-01,  2.7587e-01, -2.9989e-01,
          -7.5857e-02,  2.5512e-01,  7.7325e-02,  3.6405e-02,  5.6885e-02]],

        [[-7.6676e-02, -2.8515e-02,  2.9670e-01,  9.2348e-02, -2.6525e-02,
           1.2644e-01, -1.6562e-01, -1.2521e-01, -2.9480e-01, -1.5170e-01]],

        [[-1.3629e-01,  1.3283e-01,  1.4076e-01, -2.2401e-01, -1.8896e-01,
          -1.1478e-01, -3.2534e-02,  1.0451e-01, -2.2728e-01, -1.2575e-03]],

        [[ 2.2814e-01, -7.0040e-02,  1.3479e-01,  1.0057e-01,  1.1499e-01,
           2.8102e-01, -2.6286e-01, -2.8567e-01,  1.9643e-01,  7.3627e-02]],

        [[-1.0784e-01, -1.5169e-01,  1.7177e-01, -2.1053e-01,  2.4021e-01,
          -1.2961e-01,  1.7217e-01, -1.3187e-01, -1.2728e-01,  2.0317e-01]],

        [[-8.7473e-02, -7.9290e-02, -2.7072e-01,  8.1485e-02,  2.2477e-01,
          -2.9275e-01, -9.0547e-02,  2.1420e-01,  5.3448e-02,  2.5865e-01]],

        [[-3.1350e-01, -1.4853e-03,  2.0530e-01,  1.8217e-01,  1.5729e-01,
           3.5186e-02, -4.0196e-02,  1.8256e-01, -5.7018e-02, -1.7413e-01]],

        [[ 1.2243e-01,  1.0964e-01, -1.1012e-01,  7.1492e-02, -1.3871e-02,
           1.7507e-02,  2.2401e-01, -1.3000e-01,  7.6217e-02,  4.1771e-02]],

        [[ 1.8314e-01, -5.0219e-02,  2.5941e-01, -2.0081e-01, -6.1995e-02,
          -1.6796e-01, -2.1148e-01, -4.1564e-03,  1.5996e-01, -1.2019e-01]],

        [[-9.3124e-03, -2.4743e-01,  6.7480e-02,  2.9858e-04, -2.7580e-01,
           2.4094e-01,  1.1562e-01,  2.3409e-01, -1.3442e-01, -7.2057e-02]],

        [[-2.8852e-02, -2.6443e-01, -2.6706e-01,  3.4038e-01, -2.3157e-01,
          -2.0965e-01,  1.2875e-02, -8.7459e-02,  1.3675e-01,  9.3155e-02]],

        [[-3.1245e-01, -3.2874e-01,  1.1160e-01, -1.6189e-02,  2.4240e-01,
           2.8615e-01,  2.3486e-01, -6.7971e-03, -7.7096e-02, -7.2324e-02]],

        [[ 1.6423e-01, -2.5257e-01,  1.6773e-01, -1.8313e-01, -1.3480e-01,
           1.7761e-01, -2.7150e-01, -2.2648e-01,  6.4619e-02, -1.3288e-01]],

        [[ 2.5429e-01,  3.3535e-01, -5.7385e-02, -4.9321e-03,  1.1944e-01,
          -1.9126e-01, -2.4919e-01, -2.3754e-01, -1.5921e-01, -2.1315e-01]]]), 'conv1.bias': tensor([ 0.0989, -0.2164,  0.0982,  0.0949, -0.0867, -0.0799,  0.1245, -0.1020,
        -0.0920, -0.0022, -0.1719, -0.3295, -0.0940, -0.1306,  0.0160, -0.1610,
         0.0362, -0.1108,  0.0493, -0.2933, -0.0072, -0.0293, -0.0812, -0.2278,
         0.2265,  0.0308, -0.0925,  0.1795,  0.2451,  0.0758]), 'conv2.weight': tensor([[[ 1.3677e-02, -8.3520e-02, -8.2364e-02,  ..., -6.0192e-02,
           3.8556e-02, -2.7262e-03],
         [ 2.4523e-02, -6.3023e-02, -4.5053e-02,  ...,  3.9837e-02,
           5.5899e-02,  8.6624e-03],
         [ 1.5459e-02, -4.2219e-03,  6.2151e-03,  ...,  4.3306e-03,
           5.3829e-02,  7.3821e-02],
         ...,
         [ 2.1060e-03,  3.2993e-02,  5.4580e-02,  ...,  3.1033e-02,
           2.4409e-02, -7.9483e-02],
         [-5.2360e-03, -6.2648e-02, -8.6069e-02,  ...,  3.2887e-02,
          -1.2470e-02, -4.0906e-02],
         [-2.0258e-02, -2.8354e-02, -5.1502e-02,  ..., -2.4104e-02,
           7.6758e-02,  6.8347e-02]],

        [[-2.6130e-02, -2.7664e-02,  5.3896e-03,  ...,  2.0667e-02,
           5.5661e-02, -2.9065e-02],
         [-2.0227e-03, -5.8078e-03,  6.2507e-02,  ...,  7.2487e-02,
          -3.2441e-02, -2.7859e-02],
         [ 7.8591e-03, -5.2154e-02,  4.9938e-02,  ...,  2.2649e-02,
          -2.7245e-02,  4.3652e-02],
         ...,
         [ 3.9818e-02,  1.8154e-02, -3.2959e-02,  ...,  2.0914e-02,
          -7.1538e-02, -5.2754e-02],
         [-6.5464e-02,  6.3731e-03,  5.2124e-02,  ...,  5.7396e-02,
           2.5427e-02,  2.9249e-04],
         [ 4.0405e-02,  4.9884e-02,  1.3532e-02,  ..., -4.8334e-02,
           2.3316e-02, -5.0898e-02]],

        [[ 6.1180e-02,  1.6214e-02, -4.3292e-02,  ...,  6.2206e-02,
          -2.9621e-03,  5.1320e-02],
         [ 2.2138e-02,  3.6736e-02, -5.0046e-02,  ..., -9.2420e-04,
           4.9046e-02,  4.8125e-02],
         [ 1.4654e-02, -6.0031e-02, -1.6114e-02,  ...,  1.6838e-03,
           5.9942e-02, -2.3730e-02],
         ...,
         [-9.0554e-02, -5.1339e-02, -7.5310e-02,  ..., -3.4632e-03,
           1.0261e-02, -1.8986e-02],
         [ 3.8386e-02, -5.4861e-02,  9.3447e-03,  ..., -4.1249e-02,
           5.0207e-02,  4.5309e-02],
         [-5.0550e-02,  4.4601e-02, -2.6261e-02,  ...,  5.4610e-02,
           4.5470e-02,  8.7773e-03]],

        ...,

        [[ 9.0164e-03, -3.1130e-02,  4.5190e-02,  ..., -1.6119e-02,
          -2.0532e-02, -6.7419e-02],
         [ 3.4252e-02,  8.3024e-03,  3.3741e-02,  ...,  2.8275e-03,
           9.8999e-02,  8.8388e-03],
         [ 6.0086e-02,  2.3034e-02, -1.9566e-02,  ..., -2.8704e-02,
          -6.1906e-02, -2.8248e-02],
         ...,
         [-4.6124e-02, -6.4922e-02,  9.0238e-04,  ..., -8.8998e-02,
           1.9414e-02, -5.1811e-02],
         [-5.4227e-02,  2.8736e-02, -1.8961e-02,  ...,  6.8624e-06,
           2.8300e-02, -3.3540e-02],
         [-4.0741e-02,  4.3177e-02, -1.6612e-02,  ...,  6.0779e-02,
           2.9651e-02, -2.5645e-02]],

        [[ 6.0556e-02,  2.2039e-02, -1.6832e-02,  ..., -5.0718e-02,
           4.2653e-02,  1.0644e-02],
         [-1.4721e-02, -1.8077e-02,  1.7775e-03,  ...,  6.8816e-02,
           6.5590e-02, -5.7600e-04],
         [-3.8019e-02,  1.0437e-02, -5.3380e-02,  ...,  6.1090e-02,
           4.3729e-02,  1.4309e-02],
         ...,
         [ 1.5917e-02, -6.6543e-02, -2.0820e-02,  ..., -7.6617e-02,
          -2.0983e-02,  2.3523e-02],
         [ 5.7836e-02, -4.0871e-02,  2.0695e-02,  ..., -2.2524e-02,
           6.5329e-02,  4.9082e-02],
         [ 4.0734e-02,  2.0496e-02,  5.2170e-02,  ...,  7.0299e-02,
          -2.0804e-02,  3.0682e-02]],

        [[-3.7788e-02,  6.5111e-02,  6.0901e-02,  ...,  4.2961e-02,
           7.8627e-03,  5.9840e-02],
         [-4.9242e-02, -8.3640e-02, -8.2371e-02,  ..., -4.1350e-02,
           3.7060e-02, -5.1492e-02],
         [-5.4063e-02,  2.3265e-02, -6.8259e-02,  ...,  5.0794e-02,
          -1.0073e-02,  7.6328e-02],
         ...,
         [ 1.3203e-02, -3.0331e-02, -4.7924e-02,  ..., -5.4165e-02,
          -3.7211e-02,  9.3068e-03],
         [-5.7548e-02, -3.0169e-02,  2.4352e-02,  ...,  1.2325e-02,
           6.7941e-03,  5.3705e-02],
         [ 1.0474e-02,  1.3003e-02,  2.4004e-02,  ...,  5.6720e-02,
           2.7598e-02,  8.2592e-02]]]), 'conv2.bias': tensor([ 0.0544, -0.0699,  0.0502, -0.0511, -0.0223,  0.0310, -0.0284,  0.0022,
         0.0383,  0.0262,  0.0088, -0.0109,  0.0170, -0.0543, -0.0715, -0.0576,
        -0.0354, -0.0199,  0.0214, -0.0417, -0.0562, -0.0448,  0.0084, -0.0238,
        -0.0314,  0.0569, -0.0672, -0.0599,  0.0465,  0.0553]), 'conv3.weight': tensor([[[-0.0440, -0.0290, -0.0104, -0.0367,  0.0646, -0.0359],
         [ 0.0185, -0.0587,  0.0545,  0.0212,  0.0677,  0.0412],
         [ 0.0126, -0.0579,  0.0189, -0.0201, -0.0734,  0.0238],
         ...,
         [-0.0026, -0.0557,  0.0291, -0.0147,  0.0638,  0.0006],
         [-0.0189,  0.0333, -0.0444, -0.0464, -0.0514, -0.0664],
         [-0.0586, -0.0420, -0.0127, -0.0320,  0.0276, -0.0014]],

        [[-0.0736,  0.0319, -0.0336, -0.0036, -0.0756, -0.0295],
         [ 0.0382, -0.0173,  0.0656,  0.0252, -0.0327, -0.0553],
         [ 0.0263, -0.0044, -0.0274,  0.0367, -0.0216,  0.0313],
         ...,
         [ 0.0741,  0.0265, -0.0438, -0.0318, -0.0136, -0.0257],
         [-0.0004, -0.0723,  0.0327, -0.0829, -0.0584,  0.0152],
         [-0.0376,  0.0344, -0.0313, -0.0579,  0.0374, -0.0700]],

        [[ 0.0019, -0.0821, -0.0033,  0.0598, -0.0275,  0.0522],
         [-0.0594,  0.0500,  0.0322, -0.0448,  0.0186, -0.0256],
         [ 0.0025, -0.0372,  0.0285, -0.0180,  0.0274,  0.0754],
         ...,
         [ 0.0407,  0.0124, -0.0579, -0.0100,  0.0511, -0.0797],
         [-0.0820, -0.0266,  0.0269, -0.0404, -0.0580, -0.0155],
         [-0.0483,  0.0045,  0.0693, -0.0215, -0.0302, -0.0553]],

        ...,

        [[-0.0303,  0.0173, -0.0378,  0.0412,  0.0642, -0.0763],
         [-0.0794, -0.0569,  0.0677,  0.0292, -0.0431, -0.0011],
         [-0.0493,  0.0363,  0.1004,  0.0446,  0.0518,  0.0019],
         ...,
         [-0.0043,  0.0467,  0.0523,  0.0723,  0.0145, -0.0091],
         [ 0.0040, -0.0600,  0.0485,  0.0776,  0.0691,  0.0792],
         [ 0.0433,  0.0808,  0.0316, -0.0176, -0.0584, -0.0256]],

        [[ 0.0632, -0.0301,  0.0099, -0.0502,  0.0449,  0.0647],
         [-0.0539, -0.0789,  0.0744,  0.0021, -0.0207, -0.0350],
         [-0.0171, -0.0524, -0.0110, -0.0214,  0.0365,  0.0400],
         ...,
         [-0.0073, -0.0599, -0.0043, -0.0560, -0.0723, -0.0801],
         [ 0.0459, -0.0483, -0.0536, -0.0261, -0.0615,  0.0264],
         [-0.0491, -0.0225, -0.0211,  0.0451, -0.0514,  0.0840]],

        [[-0.0299,  0.0540, -0.0070,  0.0413,  0.0757,  0.0049],
         [ 0.0378,  0.0233, -0.0432, -0.0768,  0.0011,  0.0624],
         [ 0.0366,  0.0399,  0.0598,  0.0365, -0.0716,  0.0024],
         ...,
         [-0.0760, -0.0426,  0.0111, -0.0142,  0.0162,  0.0328],
         [ 0.0593, -0.0402,  0.0139, -0.0794,  0.0370,  0.0476],
         [ 0.0335,  0.0547,  0.0246,  0.0587,  0.0250, -0.0433]]]), 'conv3.bias': tensor([-0.0666,  0.0196,  0.0109, -0.0947,  0.0587, -0.0786,  0.0103, -0.0218,
         0.0326, -0.0183, -0.0557, -0.0233,  0.0277, -0.0663, -0.0202, -0.0369,
         0.0475, -0.0002,  0.0017, -0.0206,  0.0303,  0.0251,  0.0500, -0.0944,
         0.0406,  0.0321,  0.0452, -0.0167, -0.0814, -0.0018,  0.0353, -0.0534,
        -0.0068, -0.0041, -0.0801, -0.0093,  0.0522,  0.0138,  0.0004, -0.0918]), 'conv4.weight': tensor([[[ 0.0863,  0.0481, -0.0332,  0.0771, -0.0452],
         [ 0.0603,  0.0720, -0.0594,  0.0268,  0.0037],
         [ 0.0668,  0.0043,  0.0433,  0.0274, -0.0120],
         ...,
         [ 0.0694, -0.0130, -0.0075, -0.0195, -0.0027],
         [-0.0407,  0.0337,  0.0132, -0.0045,  0.0046],
         [ 0.0711,  0.0058, -0.0468, -0.0339, -0.0044]],

        [[-0.0545,  0.0053, -0.0651, -0.0643,  0.0116],
         [-0.0848,  0.0159, -0.0871, -0.0087,  0.0082],
         [-0.0390,  0.0452,  0.0024,  0.0647, -0.0402],
         ...,
         [ 0.0771, -0.0346, -0.0518, -0.0324, -0.0985],
         [-0.0075, -0.0373, -0.0565,  0.0009,  0.0642],
         [ 0.0536, -0.0031, -0.0488, -0.0615, -0.0503]],

        [[ 0.0029, -0.0680,  0.0460,  0.0278, -0.0263],
         [-0.0558, -0.0102,  0.0803, -0.0481, -0.0492],
         [-0.0054, -0.0596, -0.0714, -0.0681,  0.0049],
         ...,
         [ 0.0090,  0.0713,  0.0759,  0.0091,  0.0372],
         [-0.0130,  0.0301,  0.0258,  0.0297, -0.0441],
         [ 0.0229, -0.0380,  0.0388,  0.0470,  0.0248]],

        ...,

        [[-0.0253, -0.0163, -0.0370, -0.0394, -0.0721],
         [-0.0268, -0.0466, -0.0299, -0.0429,  0.0136],
         [ 0.0350, -0.0298,  0.0087,  0.0801,  0.0229],
         ...,
         [-0.0061, -0.0751, -0.0403, -0.0695, -0.0241],
         [-0.0553,  0.0705,  0.0472,  0.0821,  0.0857],
         [-0.0522, -0.0469, -0.0636, -0.0818,  0.0065]],

        [[ 0.0377,  0.0505, -0.0530, -0.0831,  0.0596],
         [-0.0322,  0.0525, -0.0248, -0.0307, -0.0789],
         [-0.0337, -0.0485,  0.0684,  0.0438,  0.0773],
         ...,
         [ 0.0356, -0.0277, -0.0135, -0.0658, -0.0450],
         [-0.0601,  0.0506,  0.0194,  0.0188, -0.0503],
         [-0.0502, -0.0171, -0.0555,  0.0119,  0.0134]],

        [[-0.0289,  0.0194, -0.0576,  0.0452, -0.0510],
         [-0.0590,  0.0155, -0.0350,  0.0559,  0.0485],
         [ 0.0200, -0.0547, -0.0329, -0.0196,  0.0175],
         ...,
         [-0.0249, -0.0611, -0.0103,  0.0366,  0.0305],
         [-0.0607, -0.0078,  0.0294, -0.0585,  0.0031],
         [ 0.0347,  0.0206,  0.0501,  0.0110,  0.0477]]]), 'conv4.bias': tensor([-0.0387, -0.0434, -0.0816, -0.0586, -0.0541,  0.0608, -0.0219,  0.0119,
        -0.0331, -0.0262,  0.0568,  0.0346, -0.0565,  0.0590, -0.0175,  0.0764,
        -0.0236,  0.0326, -0.0010, -0.0245, -0.0718, -0.0540, -0.0447,  0.0411,
         0.0623, -0.0616,  0.0017, -0.0583, -0.0329,  0.0502, -0.0651, -0.0008,
        -0.0192, -0.0488,  0.0682,  0.0472,  0.0293,  0.0411, -0.0127,  0.0402,
         0.0558, -0.0505, -0.0812, -0.0499,  0.0129, -0.0141,  0.0553,  0.0557,
         0.0125,  0.0390]), 'conv5.weight': tensor([[[-0.0824,  0.0362,  0.0520, -0.0189,  0.0758],
         [ 0.0152, -0.0310, -0.0640, -0.0468, -0.0789],
         [-0.0670,  0.0159, -0.0069,  0.0030, -0.0086],
         ...,
         [ 0.0083,  0.0242,  0.0629,  0.0184,  0.0538],
         [-0.0007,  0.0118, -0.0696, -0.0099, -0.0434],
         [-0.0764,  0.0277,  0.0368, -0.0144,  0.0294]],

        [[-0.0870, -0.0131, -0.0739, -0.0415, -0.0081],
         [ 0.0702, -0.0579, -0.0222,  0.0347, -0.0590],
         [-0.0178, -0.0049,  0.0256, -0.0616, -0.0070],
         ...,
         [ 0.0722,  0.0170,  0.0201,  0.0163,  0.0447],
         [-0.0297, -0.0018, -0.0243, -0.0729, -0.0886],
         [ 0.0385,  0.0352, -0.0350,  0.0207,  0.0352]],

        [[-0.0025, -0.0356, -0.0109, -0.0010,  0.0453],
         [-0.0487,  0.0034, -0.0351, -0.0346, -0.0265],
         [ 0.0059, -0.0017, -0.0591, -0.0208,  0.0327],
         ...,
         [ 0.0645,  0.0643,  0.0450,  0.0295,  0.0604],
         [ 0.0141, -0.0507, -0.0291,  0.0635,  0.0410],
         [ 0.0067, -0.0247,  0.0303, -0.0316, -0.0085]],

        ...,

        [[-0.1010, -0.1113, -0.0523, -0.0304, -0.0471],
         [ 0.0155, -0.0852, -0.0513,  0.0196, -0.0220],
         [-0.0192, -0.0204, -0.0582,  0.0235, -0.0487],
         ...,
         [ 0.0140, -0.0214,  0.0763,  0.0015,  0.0068],
         [-0.0393, -0.0855, -0.0309, -0.0775,  0.0170],
         [ 0.0328,  0.0448, -0.0534,  0.0546, -0.0019]],

        [[-0.0070, -0.0682,  0.0321, -0.0009,  0.0236],
         [ 0.0216, -0.0547,  0.0350,  0.0116, -0.0167],
         [-0.0088, -0.0513, -0.0183,  0.0408, -0.0457],
         ...,
         [ 0.0629,  0.0122, -0.0043,  0.0100,  0.0454],
         [ 0.0118, -0.0626, -0.0672,  0.0056, -0.0117],
         [-0.0776, -0.0707,  0.0455, -0.0179,  0.0437]],

        [[-0.0225,  0.0155,  0.0126,  0.0687, -0.0108],
         [ 0.0224, -0.0731, -0.0604,  0.0014, -0.0285],
         [ 0.0140,  0.0354, -0.0615,  0.0075, -0.0061],
         ...,
         [ 0.0829,  0.0573,  0.0074, -0.0207,  0.0372],
         [-0.0357, -0.0380,  0.0135,  0.0654, -0.0351],
         [-0.0518, -0.0211, -0.0356,  0.0754,  0.0225]]]), 'conv5.bias': tensor([ 0.0212,  0.0414, -0.0733, -0.0507,  0.0287,  0.0223, -0.0494,  0.0189,
         0.0033,  0.0321, -0.0283, -0.0293,  0.0027, -0.0429, -0.0257, -0.0122,
        -0.0719, -0.0586,  0.0291,  0.0411, -0.0238, -0.0719,  0.0090,  0.0202,
         0.0446, -0.0218,  0.0296, -0.0203,  0.0398,  0.0176, -0.0625, -0.0418,
         0.0403, -0.0583,  0.0139, -0.0385,  0.0401, -0.0624, -0.0509, -0.0256,
        -0.0272, -0.0545,  0.0183, -0.0421,  0.0335, -0.0489,  0.0230,  0.0578,
        -0.0070, -0.0245]), 'linear1.weight': tensor([[-0.0117, -0.0097,  0.0025,  ..., -0.0021, -0.0024,  0.0094],
        [-0.0182, -0.0076, -0.0067,  ..., -0.0064, -0.0178, -0.0112],
        [-0.0007, -0.0088,  0.0026,  ...,  0.0026, -0.0042,  0.0012],
        ...,
        [-0.0099, -0.0053, -0.0104,  ...,  0.0007, -0.0105, -0.0183],
        [-0.0072, -0.0112, -0.0163,  ..., -0.0099, -0.0066, -0.0028],
        [-0.0005,  0.0015,  0.0024,  ..., -0.0158,  0.0005,  0.0060]]), 'linear1.bias': tensor([-0.0080,  0.0167, -0.0092,  ..., -0.0065,  0.0288, -0.0152]), 'linear2.weight': tensor([[-0.0148,  0.0620, -0.0036,  ...,  0.0143,  0.0251,  0.0005]]), 'linear2.bias': tensor([0.0221])}), (array([0, 2, 3]), {'conv1.weight': tensor([[[ 2.6460e-01,  1.2757e-01, -1.6199e-01,  9.6245e-02, -1.8872e-01,
          -1.9504e-02,  2.8996e-02, -1.5728e-01,  1.6418e-01, -1.4611e-01]],

        [[-2.7031e-01, -1.8210e-01,  1.9441e-01, -2.7284e-03, -1.0427e-01,
          -2.4548e-01,  1.5053e-01, -5.5538e-02, -1.5826e-01,  1.6554e-01]],

        [[-2.6523e-03, -2.5564e-01,  2.0456e-01,  1.5343e-01,  2.8134e-01,
          -1.0235e-01, -2.5617e-01, -2.2890e-01,  1.9256e-01, -9.7381e-02]],

        [[ 2.0269e-01, -1.1495e-01,  6.3658e-03, -2.7228e-01, -2.0998e-01,
          -3.5681e-02,  1.6565e-01,  2.8237e-01, -1.7044e-01,  1.8393e-01]],

        [[ 3.0489e-01, -2.0736e-01,  2.4289e-01, -2.0777e-01,  2.4183e-01,
          -1.7815e-01, -1.7019e-01, -1.6370e-02, -2.6589e-01,  3.0196e-01]],

        [[ 2.4151e-01,  2.6096e-01, -2.4887e-01,  2.5698e-01, -2.2596e-01,
          -3.8256e-01,  2.0090e-01, -2.1080e-01, -1.6688e-01,  2.0359e-01]],

        [[ 2.8224e-01,  1.5592e-01, -2.9099e-01, -2.0367e-01,  1.7654e-01,
           8.5793e-02,  2.0302e-01, -1.3490e-01, -3.7034e-02, -2.3641e-01]],

        [[-9.4241e-02,  2.0987e-01,  1.5214e-02, -3.7072e-01,  1.1912e-01,
           1.9515e-01,  2.7339e-01,  8.3899e-02, -1.3953e-01, -1.5279e-01]],

        [[-2.5940e-01,  3.2532e-01,  4.4878e-02,  2.2618e-01,  9.8023e-02,
          -3.1708e-01, -2.7756e-01, -2.3461e-01,  3.0099e-01, -2.0889e-01]],

        [[-1.7712e-01, -1.6264e-01,  3.1656e-01, -8.6229e-02,  4.5150e-02,
          -1.1967e-03,  8.8895e-02, -2.6703e-01,  1.7388e-01, -2.3351e-02]],

        [[ 1.2816e-01,  2.2356e-01, -6.9638e-02,  3.3936e-02,  2.5765e-01,
           5.4138e-02, -1.1648e-01,  1.8704e-01, -2.3047e-01,  7.3980e-02]],

        [[ 2.4797e-01, -2.8024e-01,  1.2151e-01,  2.2808e-01,  1.0409e-01,
           3.8972e-02, -9.9047e-03, -3.2156e-02, -1.1589e-01,  6.4078e-02]],

        [[-5.5872e-02, -2.9947e-01, -2.0127e-01, -7.0669e-02, -2.6530e-01,
           4.1939e-03,  2.7445e-01,  1.9018e-01, -2.8607e-01, -1.6650e-01]],

        [[ 1.7055e-01,  9.3974e-02, -5.9553e-02, -2.1542e-01, -1.3364e-01,
          -1.1906e-01, -1.4137e-01,  2.4850e-01, -2.1757e-01, -8.5408e-02]],

        [[-3.2594e-01,  2.6296e-01, -2.3908e-01,  5.1655e-02,  3.0559e-02,
           2.3720e-01, -2.7717e-01,  1.7283e-01,  2.5321e-01, -2.3412e-01]],

        [[-9.0025e-02, -3.2284e-01,  1.7490e-01,  2.0809e-01, -2.9104e-01,
           1.8107e-01,  1.0928e-01, -2.6706e-01,  7.8773e-02, -1.2658e-03]],

        [[-3.4065e-01,  1.0226e-01, -2.2539e-01,  2.8093e-01, -2.9528e-01,
          -7.3884e-02,  2.5542e-01,  7.8901e-02,  3.9633e-02,  6.3353e-02]],

        [[-7.1273e-02, -2.5327e-02,  2.9985e-01,  9.6296e-02, -1.8844e-02,
           1.3410e-01, -1.6160e-01, -1.2922e-01, -3.0171e-01, -1.5539e-01]],

        [[-1.4088e-01,  1.3346e-01,  1.4535e-01, -2.1901e-01, -1.8426e-01,
          -1.0991e-01, -2.7984e-02,  1.1159e-01, -2.2107e-01, -2.0475e-04]],

        [[ 2.2593e-01, -7.7365e-02,  1.2670e-01,  9.1277e-02,  1.0626e-01,
           2.7395e-01, -2.7055e-01, -2.9302e-01,  1.8940e-01,  6.0487e-02]],

        [[-1.2123e-01, -1.6037e-01,  1.7606e-01, -2.0353e-01,  2.4596e-01,
          -1.2890e-01,  1.7077e-01, -1.3014e-01, -1.2804e-01,  2.0337e-01]],

        [[-8.6834e-02, -7.8304e-02, -2.6658e-01,  8.8100e-02,  2.3170e-01,
          -2.8720e-01, -8.5828e-02,  2.1884e-01,  5.7155e-02,  2.6464e-01]],

        [[-3.2325e-01, -5.1371e-03,  2.0604e-01,  1.7971e-01,  1.4949e-01,
           2.3525e-02, -4.9543e-02,  1.7442e-01, -6.4827e-02, -1.8274e-01]],

        [[ 1.1370e-01,  1.0054e-01, -1.1899e-01,  6.3469e-02, -2.1991e-02,
           9.0360e-03,  2.1689e-01, -1.3831e-01,  6.7457e-02,  3.0098e-02]],

        [[ 1.8492e-01, -4.5894e-02,  2.6611e-01, -1.9319e-01, -5.7649e-02,
          -1.6748e-01, -2.0853e-01,  3.2313e-03,  1.6941e-01, -1.1096e-01]],

        [[-1.0754e-03, -2.4650e-01,  6.7213e-02, -2.2577e-03, -2.7456e-01,
           2.4190e-01,  1.1714e-01,  2.3376e-01, -1.3740e-01, -7.7971e-02]],

        [[-1.8195e-02, -2.6020e-01, -2.5909e-01,  3.5363e-01, -2.2243e-01,
          -1.9898e-01,  2.5061e-02, -7.4756e-02,  1.4828e-01,  1.0262e-01]],

        [[-3.2220e-01, -3.3666e-01,  1.0673e-01, -2.0780e-02,  2.3718e-01,
           2.7889e-01,  2.2716e-01, -1.4254e-02, -8.2402e-02, -7.5988e-02]],

        [[ 1.7074e-01, -2.4541e-01,  1.7944e-01, -1.6615e-01, -1.1541e-01,
           1.9465e-01, -2.5914e-01, -2.1813e-01,  7.2662e-02, -1.2556e-01]],

        [[ 2.6363e-01,  3.4495e-01, -4.7185e-02,  7.7251e-03,  1.3434e-01,
          -1.7750e-01, -2.4304e-01, -2.3421e-01, -1.5655e-01, -2.0829e-01]]]), 'conv1.bias': tensor([ 0.0908, -0.2128,  0.0810,  0.0912, -0.0991, -0.0828,  0.1236, -0.0957,
        -0.0885, -0.0031, -0.1840, -0.3429, -0.0882, -0.1385,  0.0115, -0.1556,
         0.0278, -0.1093,  0.0465, -0.3080, -0.0036, -0.0294, -0.0901, -0.2397,
         0.2211,  0.0265, -0.1001,  0.1668,  0.2458,  0.0769]), 'conv2.weight': tensor([[[ 0.0129, -0.0859, -0.0825,  ..., -0.0605,  0.0361, -0.0033],
         [ 0.0278, -0.0627, -0.0451,  ...,  0.0438,  0.0610,  0.0152],
         [ 0.0087, -0.0089,  0.0059,  ...,  0.0020,  0.0525,  0.0740],
         ...,
         [-0.0040,  0.0304,  0.0536,  ...,  0.0272,  0.0184, -0.0896],
         [-0.0118, -0.0723, -0.0950,  ...,  0.0287, -0.0164, -0.0466],
         [-0.0296, -0.0390, -0.0642,  ..., -0.0220,  0.0786,  0.0693]],

        [[-0.0282, -0.0323,  0.0019,  ...,  0.0181,  0.0526, -0.0311],
         [ 0.0013, -0.0039,  0.0650,  ...,  0.0691, -0.0431, -0.0412],
         [-0.0003, -0.0599,  0.0487,  ...,  0.0157, -0.0388,  0.0321],
         ...,
         [ 0.0355,  0.0135, -0.0363,  ...,  0.0096, -0.0780, -0.0521],
         [-0.0647,  0.0081,  0.0538,  ...,  0.0562,  0.0234, -0.0003],
         [ 0.0373,  0.0496,  0.0166,  ..., -0.0515,  0.0189, -0.0572]],

        [[ 0.0668,  0.0172, -0.0420,  ...,  0.0624, -0.0059,  0.0487],
         [ 0.0203,  0.0391, -0.0479,  ..., -0.0004,  0.0513,  0.0492],
         [ 0.0113, -0.0623, -0.0175,  ...,  0.0038,  0.0637, -0.0239],
         ...,
         [-0.0918, -0.0503, -0.0746,  ..., -0.0039,  0.0081, -0.0225],
         [ 0.0382, -0.0547,  0.0068,  ..., -0.0424,  0.0495,  0.0418],
         [-0.0466,  0.0448, -0.0282,  ...,  0.0528,  0.0425,  0.0046]],

        ...,

        [[-0.0016, -0.0404,  0.0410,  ..., -0.0172, -0.0267, -0.0730],
         [ 0.0250,  0.0051,  0.0340,  ..., -0.0039,  0.0957,  0.0040],
         [ 0.0675,  0.0279, -0.0142,  ..., -0.0336, -0.0695, -0.0350],
         ...,
         [-0.0432, -0.0643, -0.0004,  ..., -0.1027,  0.0209, -0.0451],
         [-0.0552,  0.0250, -0.0215,  ..., -0.0038,  0.0255, -0.0381],
         [-0.0378,  0.0492, -0.0127,  ...,  0.0604,  0.0260, -0.0292]],

        [[ 0.0552,  0.0206, -0.0159,  ..., -0.0503,  0.0416,  0.0141],
         [-0.0140, -0.0163,  0.0034,  ...,  0.0674,  0.0614, -0.0078],
         [-0.0380,  0.0094, -0.0565,  ...,  0.0692,  0.0518,  0.0184],
         ...,
         [ 0.0162, -0.0665, -0.0190,  ..., -0.0749, -0.0221,  0.0189],
         [ 0.0584, -0.0405,  0.0213,  ..., -0.0187,  0.0685,  0.0519],
         [ 0.0346,  0.0144,  0.0483,  ...,  0.0746, -0.0185,  0.0315]],

        [[-0.0296,  0.0701,  0.0613,  ...,  0.0416,  0.0056,  0.0584],
         [-0.0533, -0.0912, -0.0877,  ..., -0.0422,  0.0337, -0.0558],
         [-0.0612,  0.0160, -0.0753,  ...,  0.0462, -0.0131,  0.0812],
         ...,
         [ 0.0033, -0.0372, -0.0514,  ..., -0.0483, -0.0293,  0.0163],
         [-0.0683, -0.0384,  0.0146,  ...,  0.0027, -0.0010,  0.0485],
         [ 0.0111,  0.0100,  0.0177,  ...,  0.0500,  0.0239,  0.0831]]]), 'conv2.bias': tensor([ 0.0498, -0.0742,  0.0494, -0.0514, -0.0096,  0.0335, -0.0297,  0.0080,
         0.0418,  0.0273,  0.0148, -0.0141,  0.0175, -0.0522, -0.0651, -0.0574,
        -0.0375, -0.0176,  0.0204, -0.0379, -0.0603, -0.0378,  0.0149, -0.0285,
        -0.0331,  0.0565, -0.0687, -0.0685,  0.0488,  0.0529]), 'conv3.weight': tensor([[[-0.0335, -0.0222, -0.0080, -0.0391,  0.0586, -0.0409],
         [ 0.0189, -0.0579,  0.0556,  0.0245,  0.0726,  0.0460],
         [ 0.0074, -0.0584,  0.0181, -0.0211, -0.0767,  0.0200],
         ...,
         [ 0.0017, -0.0553,  0.0333, -0.0123,  0.0649, -0.0014],
         [-0.0199,  0.0329, -0.0442, -0.0487, -0.0549, -0.0704],
         [-0.0606, -0.0430, -0.0150, -0.0319,  0.0279, -0.0011]],

        [[-0.0749,  0.0265, -0.0420, -0.0108, -0.0830, -0.0376],
         [ 0.0397, -0.0174,  0.0700,  0.0312, -0.0236, -0.0455],
         [ 0.0369,  0.0077, -0.0318,  0.0283, -0.0333,  0.0220],
         ...,
         [ 0.0595,  0.0161, -0.0551, -0.0392, -0.0209, -0.0338],
         [ 0.0031, -0.0703,  0.0368, -0.0894, -0.0629,  0.0153],
         [-0.0491,  0.0242, -0.0364, -0.0630,  0.0342, -0.0740]],

        [[ 0.0008, -0.0824, -0.0013,  0.0636, -0.0219,  0.0576],
         [-0.0578,  0.0534,  0.0315, -0.0465,  0.0080, -0.0391],
         [-0.0127, -0.0487,  0.0218, -0.0209,  0.0249,  0.0718],
         ...,
         [ 0.0381,  0.0066, -0.0671, -0.0291,  0.0368, -0.0817],
         [-0.0830, -0.0294,  0.0207, -0.0488, -0.0623, -0.0154],
         [-0.0445,  0.0069,  0.0712, -0.0201, -0.0290, -0.0538]],

        ...,

        [[-0.0348,  0.0152, -0.0378,  0.0411,  0.0589, -0.0814],
         [-0.0809, -0.0591,  0.0654,  0.0282, -0.0397,  0.0060],
         [-0.0465,  0.0378,  0.1035,  0.0489,  0.0550,  0.0039],
         ...,
         [-0.0058,  0.0462,  0.0518,  0.0748,  0.0178, -0.0057],
         [ 0.0084, -0.0556,  0.0537,  0.0841,  0.0761,  0.0840],
         [ 0.0436,  0.0767,  0.0238, -0.0256, -0.0612, -0.0210]],

        [[ 0.0609, -0.0352,  0.0044, -0.0545,  0.0489,  0.0728],
         [-0.0535, -0.0763,  0.0790,  0.0041, -0.0243, -0.0403],
         [-0.0427, -0.0708, -0.0187, -0.0286,  0.0322,  0.0374],
         ...,
         [-0.0189, -0.0635, -0.0031, -0.0510, -0.0711, -0.0828],
         [ 0.0402, -0.0503, -0.0544, -0.0283, -0.0670,  0.0206],
         [-0.0472, -0.0212, -0.0148,  0.0508, -0.0470,  0.0876]],

        [[-0.0197,  0.0603, -0.0021,  0.0459,  0.0800,  0.0092],
         [ 0.0337,  0.0227, -0.0412, -0.0770, -0.0012,  0.0611],
         [ 0.0384,  0.0371,  0.0551,  0.0335, -0.0713,  0.0035],
         ...,
         [-0.0796, -0.0451,  0.0083, -0.0212,  0.0078,  0.0238],
         [ 0.0553, -0.0466,  0.0071, -0.0864,  0.0347,  0.0487],
         [ 0.0380,  0.0591,  0.0267,  0.0590,  0.0252, -0.0423]]]), 'conv3.bias': tensor([-0.0700,  0.0174,  0.0126, -0.0981,  0.0600, -0.0708,  0.0086, -0.0234,
         0.0348, -0.0138, -0.0621, -0.0258,  0.0326, -0.0711, -0.0226, -0.0384,
         0.0534, -0.0006,  0.0021, -0.0202,  0.0251,  0.0229,  0.0499, -0.0963,
         0.0358,  0.0295,  0.0450, -0.0191, -0.0846, -0.0055,  0.0378, -0.0584,
        -0.0063, -0.0119, -0.0774, -0.0068,  0.0577,  0.0202,  0.0023, -0.0950]), 'conv4.weight': tensor([[[ 0.0819,  0.0472, -0.0282,  0.0850, -0.0369],
         [ 0.0597,  0.0733, -0.0595,  0.0204, -0.0016],
         [ 0.0659,  0.0063,  0.0461,  0.0277, -0.0141],
         ...,
         [ 0.0637, -0.0188, -0.0124, -0.0222, -0.0036],
         [-0.0346,  0.0389,  0.0119, -0.0045,  0.0092],
         [ 0.0735,  0.0087, -0.0408, -0.0310, -0.0086]],

        [[-0.0571,  0.0030, -0.0663, -0.0659,  0.0102],
         [-0.0959,  0.0076, -0.0975, -0.0243, -0.0018],
         [-0.0446,  0.0375, -0.0032,  0.0606, -0.0410],
         ...,
         [ 0.0830, -0.0330, -0.0540, -0.0370, -0.1031],
         [-0.0093, -0.0442, -0.0640,  0.0040,  0.0732],
         [ 0.0526, -0.0083, -0.0642, -0.0791, -0.0616]],

        [[ 0.0094, -0.0627,  0.0518,  0.0319, -0.0277],
         [-0.0477, -0.0065,  0.0845, -0.0432, -0.0463],
         [-0.0096, -0.0666, -0.0782, -0.0753, -0.0049],
         ...,
         [ 0.0080,  0.0697,  0.0739,  0.0069,  0.0354],
         [-0.0162,  0.0263,  0.0223,  0.0278, -0.0465],
         [ 0.0300, -0.0299,  0.0464,  0.0512,  0.0251]],

        ...,

        [[-0.0337, -0.0228, -0.0378, -0.0375, -0.0684],
         [-0.0327, -0.0514, -0.0337, -0.0452,  0.0121],
         [ 0.0288, -0.0321,  0.0088,  0.0832,  0.0274],
         ...,
         [-0.0384, -0.1042, -0.0597, -0.0769, -0.0265],
         [-0.0531,  0.0739,  0.0502,  0.0848,  0.0886],
         [-0.0629, -0.0536, -0.0651, -0.0790,  0.0126]],

        [[ 0.0338,  0.0476, -0.0552, -0.0863,  0.0562],
         [-0.0345,  0.0477, -0.0331, -0.0407, -0.0865],
         [-0.0303, -0.0519,  0.0633,  0.0392,  0.0746],
         ...,
         [ 0.0400, -0.0262, -0.0140, -0.0681, -0.0471],
         [-0.0630,  0.0436,  0.0115,  0.0123, -0.0555],
         [-0.0535, -0.0235, -0.0658,  0.0043,  0.0099]],

        [[-0.0235,  0.0184, -0.0663,  0.0353, -0.0619],
         [-0.0530,  0.0201, -0.0336,  0.0589,  0.0532],
         [ 0.0258, -0.0622, -0.0430, -0.0253,  0.0157],
         ...,
         [-0.0308, -0.0615, -0.0045,  0.0457,  0.0377],
         [-0.0609, -0.0072,  0.0318, -0.0560, -0.0017],
         [ 0.0408,  0.0215,  0.0442, -0.0047,  0.0314]]]), 'conv4.bias': tensor([-0.0441, -0.0383, -0.0837, -0.0539, -0.0567,  0.0613, -0.0191,  0.0117,
        -0.0296, -0.0248,  0.0559,  0.0343, -0.0576,  0.0618, -0.0164,  0.0775,
        -0.0274,  0.0337,  0.0032, -0.0192, -0.0763, -0.0523, -0.0506,  0.0443,
         0.0615, -0.0560,  0.0010, -0.0466, -0.0310,  0.0506, -0.0662,  0.0057,
        -0.0263, -0.0520,  0.0657,  0.0461,  0.0288,  0.0410, -0.0072,  0.0404,
         0.0552, -0.0579, -0.0837, -0.0484,  0.0181, -0.0089,  0.0562,  0.0535,
         0.0128,  0.0421]), 'conv5.weight': tensor([[[-0.0935,  0.0302,  0.0495, -0.0197,  0.0759],
         [ 0.0079, -0.0318, -0.0625, -0.0459, -0.0788],
         [-0.0728,  0.0126, -0.0098,  0.0018, -0.0091],
         ...,
         [ 0.0126,  0.0281,  0.0656,  0.0200,  0.0532],
         [-0.0132,  0.0043, -0.0721, -0.0108, -0.0419],
         [-0.0879,  0.0171,  0.0271, -0.0195,  0.0298]],

        [[-0.0882, -0.0139, -0.0768, -0.0403, -0.0021],
         [ 0.0758, -0.0572, -0.0297,  0.0273, -0.0657],
         [-0.0281, -0.0106,  0.0228, -0.0641, -0.0122],
         ...,
         [ 0.0623,  0.0102,  0.0156,  0.0135,  0.0432],
         [-0.0318, -0.0101, -0.0352, -0.0805, -0.0930],
         [ 0.0325,  0.0338, -0.0360,  0.0154,  0.0243]],

        [[-0.0002, -0.0322, -0.0057,  0.0049,  0.0517],
         [-0.0485,  0.0068, -0.0280, -0.0267, -0.0147],
         [ 0.0010, -0.0075, -0.0722, -0.0315,  0.0269],
         ...,
         [ 0.0725,  0.0750,  0.0575,  0.0416,  0.0692],
         [ 0.0121, -0.0501, -0.0275,  0.0641,  0.0415],
         [ 0.0147, -0.0191,  0.0302, -0.0402, -0.0184]],

        ...,

        [[-0.1017, -0.1114, -0.0529, -0.0295, -0.0427],
         [ 0.0136, -0.0916, -0.0636,  0.0112, -0.0273],
         [-0.0263, -0.0245, -0.0591,  0.0222, -0.0515],
         ...,
         [ 0.0028, -0.0300,  0.0686, -0.0047,  0.0005],
         [-0.0445, -0.0933, -0.0388, -0.0829,  0.0134],
         [ 0.0338,  0.0448, -0.0558,  0.0476, -0.0134]],

        [[-0.0077, -0.0693,  0.0244, -0.0054,  0.0254],
         [ 0.0186, -0.0571,  0.0276,  0.0006, -0.0231],
         [-0.0153, -0.0574, -0.0226,  0.0366, -0.0494],
         ...,
         [ 0.0571,  0.0087, -0.0046,  0.0121,  0.0490],
         [ 0.0166, -0.0575, -0.0631,  0.0111, -0.0042],
         [-0.0834, -0.0781,  0.0417, -0.0249,  0.0322]],

        [[-0.0236,  0.0162,  0.0136,  0.0704, -0.0113],
         [ 0.0102, -0.0791, -0.0643,  0.0021, -0.0257],
         [ 0.0057,  0.0282, -0.0687,  0.0004, -0.0128],
         ...,
         [ 0.0851,  0.0545,  0.0004, -0.0350,  0.0210],
         [-0.0401, -0.0419,  0.0092,  0.0621, -0.0356],
         [-0.0554, -0.0226, -0.0336,  0.0798,  0.0280]]]), 'conv5.bias': tensor([ 0.0198,  0.0429, -0.0730, -0.0495,  0.0293,  0.0236, -0.0553,  0.0204,
         0.0108,  0.0345, -0.0261, -0.0382,  0.0101, -0.0427, -0.0227, -0.0110,
        -0.0743, -0.0636,  0.0297,  0.0423, -0.0285, -0.0745,  0.0118,  0.0206,
         0.0449, -0.0214,  0.0350, -0.0181,  0.0379,  0.0149, -0.0640, -0.0432,
         0.0429, -0.0622,  0.0177, -0.0430,  0.0390, -0.0644, -0.0504, -0.0239,
        -0.0289, -0.0562,  0.0201, -0.0442,  0.0354, -0.0547,  0.0248,  0.0566,
        -0.0076, -0.0272]), 'linear1.weight': tensor([[-1.2181e-02, -1.0138e-02,  1.1463e-03,  ..., -4.0122e-03,
         -4.8853e-03,  8.6261e-03],
        [-2.2304e-02, -1.2411e-02, -9.2612e-03,  ..., -1.3229e-02,
         -2.4549e-02, -2.1798e-02],
        [-1.5506e-03, -9.9072e-03,  1.1820e-03,  ..., -3.9252e-03,
         -1.2635e-02, -4.3283e-03],
        ...,
        [-1.3056e-02,  5.0819e-04, -4.0209e-03,  ..., -5.2384e-03,
         -1.3235e-02, -1.7633e-02],
        [ 2.2354e-07, -4.5833e-03, -9.1730e-03,  ..., -1.6910e-02,
         -1.2094e-02, -1.0483e-02],
        [ 2.5407e-03,  9.1338e-03,  8.9245e-03,  ..., -3.6355e-02,
         -1.4123e-02, -3.6572e-03]]), 'linear1.bias': tensor([-0.0076,  0.0139, -0.0029,  ..., -0.0106,  0.0368, -0.0212]), 'linear2.weight': tensor([[-0.0136,  0.0670, -0.0090,  ...,  0.0176,  0.0221, -0.0029]]), 'linear2.bias': tensor([0.0276])}), (array([0, 2]), {'conv1.weight': tensor([[[ 0.2598,  0.1282, -0.1714,  0.0941, -0.1885, -0.0092,  0.0331,
          -0.1545,  0.1545, -0.1628]],

        [[-0.3015, -0.1804,  0.1927, -0.0132, -0.1302, -0.2841,  0.1380,
          -0.0671, -0.1724,  0.1626]],

        [[ 0.0087, -0.2687,  0.1896,  0.1633,  0.3131, -0.0990, -0.2987,
          -0.2282,  0.2119, -0.0863]],

        [[ 0.2051, -0.1120,  0.0027, -0.2906, -0.2203, -0.0454,  0.1585,
           0.2751, -0.1837,  0.1719]],

        [[ 0.3110, -0.2248,  0.2431, -0.2068,  0.2695, -0.1652, -0.1781,
          -0.0319, -0.2872,  0.2757]],

        [[ 0.2302,  0.2415, -0.2548,  0.2654, -0.2416, -0.4082,  0.2257,
          -0.2037, -0.1686,  0.1941]],

        [[ 0.2966,  0.1664, -0.2965, -0.2065,  0.1776,  0.0817,  0.1985,
          -0.1334, -0.0469, -0.2597]],

        [[-0.0872,  0.2234,  0.0263, -0.3800,  0.1075,  0.1799,  0.2708,
           0.0723, -0.1608, -0.1742]],

        [[-0.2401,  0.3232,  0.0282,  0.2290,  0.1306, -0.3207, -0.3114,
          -0.2186,  0.3342, -0.1817]],

        [[-0.2151, -0.1780,  0.3386, -0.0622,  0.0415, -0.0113,  0.0813,
          -0.2662,  0.1860, -0.0170]],

        [[ 0.0979,  0.1879, -0.1104, -0.0029,  0.2228,  0.0217, -0.1429,
           0.1617, -0.2516,  0.0514]],

        [[ 0.2391, -0.2917,  0.1126,  0.2193,  0.0945,  0.0282, -0.0220,
          -0.0287, -0.1094,  0.0701]],

        [[-0.0507, -0.3006, -0.1864, -0.0295, -0.2345,  0.0190,  0.2792,
           0.2115, -0.2820, -0.1684]],

        [[ 0.1732,  0.1156, -0.0221, -0.2180, -0.1493, -0.0797, -0.0869,
           0.2684, -0.2293, -0.1212]],

        [[-0.3235,  0.2821, -0.2279,  0.0657,  0.0373,  0.2286, -0.2953,
           0.1693,  0.2691, -0.2435]],

        [[-0.1166, -0.3497,  0.1972,  0.2160, -0.2993,  0.1678,  0.1209,
          -0.2696,  0.0775,  0.0111]],

        [[-0.3595,  0.0997, -0.2312,  0.2834, -0.2915, -0.0752,  0.2547,
           0.0834,  0.0461,  0.0682]],

        [[-0.0564, -0.0183,  0.2941,  0.0799, -0.0271,  0.1429, -0.1438,
          -0.1387, -0.3224, -0.1732]],

        [[-0.1439,  0.1578,  0.1971, -0.1879, -0.1744, -0.0884,  0.0007,
           0.1322, -0.2505, -0.0325]],

        [[ 0.2163, -0.0930,  0.1022,  0.0624,  0.0852,  0.2627, -0.2827,
          -0.2966,  0.1891,  0.0540]],

        [[-0.1550, -0.1633,  0.1939, -0.1811,  0.2478, -0.1246,  0.1633,
          -0.1471, -0.1425,  0.2097]],

        [[-0.1041, -0.0912, -0.2745,  0.0791,  0.2257, -0.2913, -0.0884,
           0.2207,  0.0630,  0.2693]],

        [[-0.3204, -0.0060,  0.2071,  0.1888,  0.1554,  0.0111, -0.0650,
           0.1636, -0.0829, -0.1968]],

        [[ 0.0901,  0.0827, -0.1361,  0.0528, -0.0324,  0.0019,  0.2142,
          -0.1449,  0.0627,  0.0165]],

        [[ 0.1751, -0.0520,  0.2699, -0.1851, -0.0537, -0.1757, -0.2137,
           0.0214,  0.1716, -0.1147]],

        [[ 0.0171, -0.2514,  0.0840,  0.0134, -0.2762,  0.2433,  0.1296,
           0.2310, -0.1576, -0.0994]],

        [[ 0.0059, -0.2808, -0.2750,  0.3784, -0.1912, -0.1660,  0.0631,
          -0.0419,  0.1708,  0.1072]],

        [[-0.3455, -0.3535,  0.0987, -0.0210,  0.2393,  0.2846,  0.2275,
          -0.0156, -0.0784, -0.0613]],

        [[ 0.1751, -0.2472,  0.1897, -0.1402, -0.0833,  0.2218, -0.2377,
          -0.2173,  0.0991, -0.1054]],

        [[ 0.2717,  0.3527, -0.0437,  0.0160,  0.1525, -0.1574, -0.2485,
          -0.2373, -0.1608, -0.2109]]]), 'conv1.bias': tensor([ 0.0635, -0.1751,  0.0783,  0.0810, -0.1174, -0.0977,  0.1019, -0.0791,
        -0.0976,  0.0097, -0.2419, -0.3827, -0.0619, -0.1425,  0.0178, -0.1284,
         0.0338, -0.1413,  0.0374, -0.3469,  0.0056, -0.0234, -0.0992, -0.2778,
         0.2026,  0.0306, -0.0988,  0.1310,  0.2117,  0.0644]), 'conv2.weight': tensor([[[-0.0295, -0.1203, -0.0888,  ..., -0.0588,  0.0352, -0.0088],
         [ 0.0158, -0.0538, -0.0197,  ...,  0.0659,  0.0591,  0.0264],
         [-0.0125, -0.0377, -0.0063,  ..., -0.0299,  0.0400,  0.0706],
         ...,
         [-0.0088,  0.0254,  0.0413,  ...,  0.0061, -0.0043, -0.1148],
         [-0.0532, -0.1135, -0.1334,  ...,  0.0192, -0.0095, -0.0492],
         [-0.0305, -0.0332, -0.0647,  ..., -0.0177,  0.0885,  0.0778]],

        [[-0.0232, -0.0294, -0.0077,  ...,  0.0056,  0.0461, -0.0285],
         [ 0.0618,  0.0321,  0.0861,  ...,  0.0860, -0.0874, -0.0933],
         [-0.0239, -0.1052,  0.0438,  ..., -0.0425, -0.0910,  0.0107],
         ...,
         [ 0.0246,  0.0115, -0.0341,  ..., -0.0063, -0.1024, -0.0809],
         [-0.0616,  0.0150,  0.0709,  ...,  0.0560,  0.0272,  0.0023],
         [ 0.0326,  0.0415,  0.0056,  ..., -0.0674,  0.0123, -0.0690]],

        [[ 0.0489,  0.0128, -0.0488,  ...,  0.0389, -0.0298,  0.0282],
         [ 0.0002,  0.0485, -0.0550,  ..., -0.0044,  0.0474,  0.0446],
         [-0.0075, -0.0814, -0.0239,  ...,  0.0046,  0.0836, -0.0359],
         ...,
         [-0.1304, -0.0949, -0.1139,  ..., -0.0261, -0.0173, -0.0386],
         [ 0.0328, -0.0523,  0.0100,  ..., -0.0317,  0.0424,  0.0311],
         [-0.0407,  0.0521, -0.0226,  ...,  0.0592,  0.0559,  0.0108]],

        ...,

        [[ 0.0082, -0.0367,  0.0599,  ..., -0.0058, -0.0340, -0.0504],
         [-0.0059, -0.0008,  0.0312,  ...,  0.0083,  0.1205,  0.0452],
         [ 0.0729,  0.0006, -0.0396,  ..., -0.0234, -0.0744, -0.0681],
         ...,
         [-0.0453, -0.0878, -0.0458,  ..., -0.1503,  0.0030, -0.0804],
         [-0.0506,  0.0044, -0.0268,  ...,  0.0017,  0.0197, -0.0588],
         [-0.0377,  0.0568, -0.0055,  ...,  0.0685,  0.0395, -0.0157]],

        [[ 0.0459,  0.0220, -0.0216,  ..., -0.0499,  0.0494,  0.0206],
         [-0.0003,  0.0056,  0.0217,  ...,  0.0543,  0.0582,  0.0007],
         [-0.0488, -0.0046, -0.0731,  ...,  0.0777,  0.0675,  0.0231],
         ...,
         [ 0.0187, -0.0650, -0.0145,  ..., -0.0686, -0.0255, -0.0029],
         [ 0.0563, -0.0456,  0.0172,  ..., -0.0158,  0.0782,  0.0624],
         [ 0.0088, -0.0128,  0.0234,  ...,  0.0818, -0.0106,  0.0397]],

        [[-0.0248,  0.0834,  0.0646,  ...,  0.0273, -0.0023,  0.0531],
         [-0.0718, -0.0998, -0.1011,  ..., -0.0641,  0.0355, -0.0367],
         [-0.0931, -0.0205, -0.1022,  ...,  0.0397, -0.0099,  0.0926],
         ...,
         [-0.0384, -0.0686, -0.0706,  ..., -0.0440, -0.0302,  0.0130],
         [-0.0735, -0.0315,  0.0155,  ..., -0.0114, -0.0158,  0.0445],
         [ 0.0301,  0.0300,  0.0286,  ...,  0.0541,  0.0303,  0.0938]]]), 'conv2.bias': tensor([ 0.0288, -0.0820,  0.0364, -0.0373, -0.0101,  0.0386, -0.0383,  0.0240,
         0.0530,  0.0314,  0.0332, -0.0051,  0.0166, -0.0751, -0.0804, -0.0478,
        -0.0500, -0.0065,  0.0007, -0.0432, -0.0761, -0.0062,  0.0136, -0.0313,
        -0.0291,  0.0509, -0.0631, -0.0983,  0.0558,  0.0418]), 'conv3.weight': tensor([[[-0.0259, -0.0196, -0.0148, -0.0523,  0.0618, -0.0348],
         [ 0.0168, -0.0662,  0.0464,  0.0120,  0.0346, -0.0167],
         [ 0.0114, -0.0307,  0.0381, -0.0328, -0.0824,  0.0214],
         ...,
         [-0.0130, -0.0421,  0.0687,  0.0005,  0.0468, -0.0450],
         [-0.0276,  0.0214, -0.0704, -0.0807, -0.0905, -0.0959],
         [-0.0460, -0.0272,  0.0089,  0.0023,  0.0532,  0.0253]],

        [[-0.0559,  0.0303, -0.0558, -0.0374, -0.0976, -0.0568],
         [ 0.0109, -0.0396,  0.0664,  0.0428, -0.0035, -0.0616],
         [ 0.0550, -0.0125, -0.0517,  0.0033, -0.0541, -0.0203],
         ...,
         [ 0.0474,  0.0056, -0.0964, -0.0515, -0.0270, -0.0441],
         [-0.0266, -0.0546,  0.0593, -0.0933, -0.0795, -0.0058],
         [-0.0601,  0.0246, -0.0590, -0.0936,  0.0040, -0.0888]],

        [[ 0.0290, -0.0399,  0.0212,  0.0713, -0.0217,  0.0344],
         [-0.0682,  0.0229, -0.0087, -0.0626, -0.0048, -0.0794],
         [ 0.0073, -0.0286,  0.0327, -0.0200,  0.0264,  0.0719],
         ...,
         [ 0.0257,  0.0250, -0.0303, -0.0426,  0.0111, -0.0620],
         [-0.0818, -0.0361,  0.0112, -0.0619, -0.0737, -0.0156],
         [-0.0457,  0.0059,  0.0712, -0.0193, -0.0336, -0.0671]],

        ...,

        [[-0.0571,  0.0132, -0.0443,  0.0181,  0.0360, -0.0725],
         [-0.0983, -0.0788,  0.0472,  0.0155, -0.0357,  0.0315],
         [-0.0279,  0.0391,  0.0997,  0.0461,  0.0554,  0.0089],
         ...,
         [-0.0056,  0.0423,  0.0440,  0.0916,  0.0516,  0.0170],
         [-0.0103, -0.0754,  0.0378,  0.0730,  0.0739,  0.0883],
         [ 0.0329,  0.0609,  0.0060, -0.0358, -0.0520, -0.0092]],

        [[ 0.0638, -0.0227,  0.0339, -0.0151,  0.0687,  0.0789],
         [-0.0554, -0.0738,  0.0635, -0.0240, -0.0311, -0.0431],
         [-0.0307, -0.0471, -0.0069, -0.0243,  0.0340,  0.0487],
         ...,
         [-0.0751, -0.0876, -0.0057, -0.0315, -0.0533, -0.0583],
         [ 0.0331, -0.0400, -0.0456, -0.0354, -0.0797,  0.0046],
         [-0.0432, -0.0410, -0.0179,  0.0564, -0.0391,  0.0911]],

        [[-0.0213,  0.0551, -0.0108,  0.0370,  0.0675, -0.0116],
         [-0.0047, -0.0124, -0.0762, -0.0957, -0.0262,  0.0055],
         [ 0.0698,  0.0471,  0.0580,  0.0401, -0.0526,  0.0216],
         ...,
         [-0.1074, -0.0251,  0.0077, -0.0514, -0.0154, -0.0031],
         [ 0.0251, -0.0655, -0.0121, -0.1047,  0.0313,  0.0506],
         [ 0.0628,  0.0906,  0.0522,  0.0838,  0.0490, -0.0205]]]), 'conv3.bias': tensor([-0.0779,  0.0151,  0.0210, -0.1207,  0.0652, -0.0705,  0.0042, -0.0117,
         0.0525, -0.0067, -0.0574, -0.0280,  0.0404, -0.0730, -0.0276, -0.0203,
         0.0699, -0.0048,  0.0040, -0.0149,  0.0098,  0.0162,  0.0744, -0.1128,
         0.0222,  0.0240,  0.0553, -0.0253, -0.1048, -0.0183,  0.0323, -0.0731,
         0.0034, -0.0133, -0.0945,  0.0121,  0.0842,  0.0234, -0.0078, -0.0992]), 'conv4.weight': tensor([[[ 0.0839,  0.0632, -0.0243,  0.0910, -0.0204],
         [ 0.0745,  0.0900, -0.0299,  0.0464,  0.0239],
         [ 0.0896,  0.0408,  0.0792,  0.0512, -0.0019],
         ...,
         [ 0.0701, -0.0227, -0.0185, -0.0161,  0.0076],
         [-0.0124,  0.0600,  0.0115,  0.0043,  0.0408],
         [ 0.0689,  0.0108, -0.0267, -0.0380, -0.0347]],

        [[-0.0507, -0.0091, -0.0709, -0.0559,  0.0227],
         [-0.1552, -0.0292, -0.1359, -0.0170, -0.0038],
         [-0.0669,  0.0165, -0.0115,  0.0420, -0.0548],
         ...,
         [ 0.0919, -0.0302, -0.0467, -0.0288, -0.1025],
         [-0.0229, -0.0826, -0.0718,  0.0296,  0.1003],
         [ 0.0318, -0.0586, -0.1261, -0.1208, -0.0500]],

        [[-0.0015, -0.0708,  0.0615,  0.0511, -0.0156],
         [-0.0304, -0.0074,  0.0713, -0.0505, -0.0719],
         [-0.0165, -0.0757, -0.0816, -0.0685,  0.0077],
         ...,
         [-0.0157,  0.0622,  0.0770,  0.0070,  0.0372],
         [ 0.0031,  0.0264,  0.0165,  0.0368, -0.0393],
         [ 0.0424, -0.0172,  0.0594,  0.0678,  0.0320]],

        ...,

        [[-0.0048, -0.0011, -0.0431, -0.0407, -0.0590],
         [-0.0469, -0.0999, -0.0695, -0.0743, -0.0057],
         [-0.0156, -0.0656, -0.0130,  0.0759,  0.0253],
         ...,
         [-0.0866, -0.1394, -0.0924, -0.0918, -0.0333],
         [-0.0775,  0.0591,  0.0374,  0.0727,  0.0749],
         [-0.0717, -0.0548, -0.0483, -0.0596,  0.0418]],

        [[-0.0133,  0.0082, -0.1196, -0.1700, -0.0373],
         [-0.0721,  0.0206, -0.0505, -0.0547, -0.0984],
         [-0.0218, -0.0489,  0.0739,  0.0475,  0.0863],
         ...,
         [ 0.0361, -0.0383, -0.0199, -0.0649, -0.0417],
         [-0.0501,  0.0528,  0.0042,  0.0103, -0.0668],
         [-0.1181, -0.0714, -0.1033, -0.0174,  0.0025]],

        [[-0.0687, -0.0137, -0.0646,  0.0414, -0.0756],
         [-0.0491,  0.0480,  0.0050,  0.0943,  0.0728],
         [ 0.0289, -0.0814, -0.0761, -0.0292,  0.0074],
         ...,
         [-0.0560, -0.0773, -0.0081,  0.0430,  0.0266],
         [-0.0965, -0.0196,  0.0201, -0.0700, -0.0098],
         [ 0.0232,  0.0029,  0.0160, -0.0445,  0.0008]]]), 'conv4.bias': tensor([-0.0629, -0.0414, -0.1023, -0.0677, -0.0539,  0.0659, -0.0192,  0.0274,
        -0.0171, -0.0180,  0.0614,  0.0319, -0.0626,  0.0670, -0.0142,  0.0775,
        -0.0502,  0.0405,  0.0090, -0.0080, -0.0989, -0.0440, -0.0589,  0.0388,
         0.0639, -0.0392, -0.0090, -0.0556, -0.0382,  0.0578, -0.0647, -0.0128,
        -0.0407, -0.0728,  0.0784,  0.0512,  0.0316,  0.0513, -0.0008,  0.0413,
         0.0618, -0.0532, -0.0980, -0.0566,  0.0050,  0.0287,  0.0559,  0.0478,
         0.0266,  0.0607]), 'conv5.weight': tensor([[[-0.1045,  0.0321,  0.0547, -0.0165,  0.0794],
         [-0.0327, -0.0493, -0.0672, -0.0510, -0.0847],
         [-0.0549,  0.0101, -0.0269, -0.0193, -0.0182],
         ...,
         [ 0.0010,  0.0214,  0.0588,  0.0127,  0.0403],
         [-0.0590, -0.0325, -0.0967, -0.0244, -0.0464],
         [-0.1480, -0.0512, -0.0235, -0.0242,  0.0446]],

        [[-0.1161, -0.0308, -0.0979, -0.0504,  0.0042],
         [ 0.0862, -0.0504, -0.0494, -0.0181, -0.0965],
         [-0.0435, -0.0213,  0.0091, -0.0733, -0.0279],
         ...,
         [ 0.0350, -0.0174, -0.0103, -0.0089,  0.0207],
         [-0.0797, -0.0658, -0.0984, -0.1422, -0.1550],
         [ 0.0069,  0.0044, -0.0755, -0.0300, -0.0200]],

        [[-0.0066, -0.0308,  0.0051,  0.0303,  0.0777],
         [-0.0513,  0.0009, -0.0407, -0.0335, -0.0110],
         [-0.0456, -0.0344, -0.0808, -0.0267,  0.0537],
         ...,
         [ 0.1085,  0.1093,  0.0936,  0.0811,  0.1048],
         [-0.0194, -0.0733, -0.0313,  0.0601,  0.0291],
         [ 0.0105, -0.0227,  0.0217, -0.0788, -0.0869]],

        ...,

        [[-0.1066, -0.1235, -0.0683, -0.0201, -0.0205],
         [ 0.0015, -0.1134, -0.1067, -0.0395, -0.0742],
         [-0.0331, -0.0316, -0.0650,  0.0110, -0.0598],
         ...,
         [-0.0363, -0.0643,  0.0404, -0.0297, -0.0228],
         [-0.1064, -0.1552, -0.0990, -0.1355, -0.0274],
         [ 0.0057,  0.0240, -0.0707,  0.0386, -0.0162]],

        [[-0.0421, -0.1046, -0.0609, -0.0385,  0.0253],
         [ 0.0471, -0.0282,  0.0220, -0.0431, -0.0185],
         [-0.0491, -0.0864, -0.0589, -0.0091, -0.0916],
         ...,
         [ 0.0427,  0.0019, -0.0041,  0.0193,  0.0527],
         [ 0.0302, -0.0511, -0.0697, -0.0061, -0.0036],
         [-0.1027, -0.1102,  0.0382, -0.0230,  0.0123]],

        [[-0.0198,  0.0117,  0.0147,  0.0880,  0.0179],
         [-0.0117, -0.1129, -0.0991, -0.0434, -0.0345],
         [-0.0184,  0.0025, -0.1005, -0.0307, -0.0351],
         ...,
         [ 0.0595,  0.0403, -0.0082, -0.0463, -0.0094],
         [-0.0393, -0.0437,  0.0034,  0.0577, -0.0284],
         [-0.0890, -0.0473, -0.0429,  0.0779,  0.0254]]]), 'conv5.bias': tensor([ 0.0284,  0.0615, -0.0788, -0.0596,  0.0492,  0.0231, -0.0796,  0.0332,
         0.0077,  0.0442, -0.0164, -0.0479,  0.0099, -0.0451, -0.0079,  0.0032,
        -0.0951, -0.0734,  0.0577,  0.0567, -0.0539, -0.0895,  0.0106,  0.0118,
         0.0612, -0.0239,  0.0564, -0.0154,  0.0470,  0.0061, -0.0766, -0.0496,
         0.0611, -0.0748,  0.0257, -0.0531,  0.0367, -0.0661, -0.0591, -0.0141,
        -0.0255, -0.0621,  0.0286, -0.0410,  0.0477, -0.0701,  0.0410,  0.0778,
         0.0066, -0.0363]), 'linear1.weight': tensor([[-0.0009,  0.0022,  0.0263,  ...,  0.0015, -0.0095, -0.0095],
        [-0.0100,  0.0092, -0.0006,  ..., -0.0194, -0.0407, -0.0468],
        [ 0.0044, -0.0094,  0.0336,  ...,  0.0256,  0.0065,  0.0003],
        ...,
        [-0.0158,  0.0327,  0.0386,  ...,  0.0018, -0.0040, -0.0012],
        [-0.0126, -0.0093, -0.0148,  ..., -0.0114, -0.0134, -0.0226],
        [ 0.0024,  0.0043,  0.0110,  ..., -0.0460, -0.0219, -0.0104]]), 'linear1.bias': tensor([-0.0214, -0.0073, -0.0047,  ..., -0.0191,  0.0638, -0.0309]), 'linear2.weight': tensor([[ 0.0136,  0.0671,  0.0165,  ...,  0.0347,  0.0135, -0.0008]]), 'linear2.bias': tensor([0.0408])}), (array([1]), {'conv1.weight': tensor([[[ 0.2598,  0.1282, -0.1714,  0.0941, -0.1885, -0.0092,  0.0331,
          -0.1545,  0.1545, -0.1628]],

        [[-0.3015, -0.1804,  0.1927, -0.0132, -0.1302, -0.2841,  0.1380,
          -0.0671, -0.1724,  0.1626]],

        [[ 0.0087, -0.2687,  0.1896,  0.1633,  0.3131, -0.0990, -0.2987,
          -0.2282,  0.2119, -0.0863]],

        [[ 0.2051, -0.1120,  0.0027, -0.2906, -0.2203, -0.0454,  0.1585,
           0.2751, -0.1837,  0.1719]],

        [[ 0.3110, -0.2248,  0.2431, -0.2068,  0.2695, -0.1652, -0.1781,
          -0.0319, -0.2872,  0.2757]],

        [[ 0.2302,  0.2415, -0.2548,  0.2654, -0.2416, -0.4082,  0.2257,
          -0.2037, -0.1686,  0.1941]],

        [[ 0.2966,  0.1664, -0.2965, -0.2065,  0.1776,  0.0817,  0.1985,
          -0.1334, -0.0469, -0.2597]],

        [[-0.0872,  0.2234,  0.0263, -0.3800,  0.1075,  0.1799,  0.2708,
           0.0723, -0.1608, -0.1742]],

        [[-0.2401,  0.3232,  0.0282,  0.2290,  0.1306, -0.3207, -0.3114,
          -0.2186,  0.3342, -0.1817]],

        [[-0.2151, -0.1780,  0.3386, -0.0622,  0.0415, -0.0113,  0.0813,
          -0.2662,  0.1860, -0.0170]],

        [[ 0.0979,  0.1879, -0.1104, -0.0029,  0.2228,  0.0217, -0.1429,
           0.1617, -0.2516,  0.0514]],

        [[ 0.2391, -0.2917,  0.1126,  0.2193,  0.0945,  0.0282, -0.0220,
          -0.0287, -0.1094,  0.0701]],

        [[-0.0507, -0.3006, -0.1864, -0.0295, -0.2345,  0.0190,  0.2792,
           0.2115, -0.2820, -0.1684]],

        [[ 0.1732,  0.1156, -0.0221, -0.2180, -0.1493, -0.0797, -0.0869,
           0.2684, -0.2293, -0.1212]],

        [[-0.3235,  0.2821, -0.2279,  0.0657,  0.0373,  0.2286, -0.2953,
           0.1693,  0.2691, -0.2435]],

        [[-0.1166, -0.3497,  0.1972,  0.2160, -0.2993,  0.1678,  0.1209,
          -0.2696,  0.0775,  0.0111]],

        [[-0.3595,  0.0997, -0.2312,  0.2834, -0.2915, -0.0752,  0.2547,
           0.0834,  0.0461,  0.0682]],

        [[-0.0564, -0.0183,  0.2941,  0.0799, -0.0271,  0.1429, -0.1438,
          -0.1387, -0.3224, -0.1732]],

        [[-0.1439,  0.1578,  0.1971, -0.1879, -0.1744, -0.0884,  0.0007,
           0.1322, -0.2505, -0.0325]],

        [[ 0.2163, -0.0930,  0.1022,  0.0624,  0.0852,  0.2627, -0.2827,
          -0.2966,  0.1891,  0.0540]],

        [[-0.1550, -0.1633,  0.1939, -0.1811,  0.2478, -0.1246,  0.1633,
          -0.1471, -0.1425,  0.2097]],

        [[-0.1041, -0.0912, -0.2745,  0.0791,  0.2257, -0.2913, -0.0884,
           0.2207,  0.0630,  0.2693]],

        [[-0.3204, -0.0060,  0.2071,  0.1888,  0.1554,  0.0111, -0.0650,
           0.1636, -0.0829, -0.1968]],

        [[ 0.0901,  0.0827, -0.1361,  0.0528, -0.0324,  0.0019,  0.2142,
          -0.1449,  0.0627,  0.0165]],

        [[ 0.1751, -0.0520,  0.2699, -0.1851, -0.0537, -0.1757, -0.2137,
           0.0214,  0.1716, -0.1147]],

        [[ 0.0171, -0.2514,  0.0840,  0.0134, -0.2762,  0.2433,  0.1296,
           0.2310, -0.1576, -0.0994]],

        [[ 0.0059, -0.2808, -0.2750,  0.3784, -0.1912, -0.1660,  0.0631,
          -0.0419,  0.1708,  0.1072]],

        [[-0.3455, -0.3535,  0.0987, -0.0210,  0.2393,  0.2846,  0.2275,
          -0.0156, -0.0784, -0.0613]],

        [[ 0.1751, -0.2472,  0.1897, -0.1402, -0.0833,  0.2218, -0.2377,
          -0.2173,  0.0991, -0.1054]],

        [[ 0.2717,  0.3527, -0.0437,  0.0160,  0.1525, -0.1574, -0.2485,
          -0.2373, -0.1608, -0.2109]]]), 'conv1.bias': tensor([ 0.0635, -0.1751,  0.0783,  0.0810, -0.1174, -0.0977,  0.1019, -0.0791,
        -0.0976,  0.0097, -0.2419, -0.3827, -0.0619, -0.1425,  0.0178, -0.1284,
         0.0338, -0.1413,  0.0374, -0.3469,  0.0056, -0.0234, -0.0992, -0.2778,
         0.2026,  0.0306, -0.0988,  0.1310,  0.2117,  0.0644]), 'conv2.weight': tensor([[[-0.0295, -0.1203, -0.0888,  ..., -0.0588,  0.0352, -0.0088],
         [ 0.0158, -0.0538, -0.0197,  ...,  0.0659,  0.0591,  0.0264],
         [-0.0125, -0.0377, -0.0063,  ..., -0.0299,  0.0400,  0.0706],
         ...,
         [-0.0088,  0.0254,  0.0413,  ...,  0.0061, -0.0043, -0.1148],
         [-0.0532, -0.1135, -0.1334,  ...,  0.0192, -0.0095, -0.0492],
         [-0.0305, -0.0332, -0.0647,  ..., -0.0177,  0.0885,  0.0778]],

        [[-0.0232, -0.0294, -0.0077,  ...,  0.0056,  0.0461, -0.0285],
         [ 0.0618,  0.0321,  0.0861,  ...,  0.0860, -0.0874, -0.0933],
         [-0.0239, -0.1052,  0.0438,  ..., -0.0425, -0.0910,  0.0107],
         ...,
         [ 0.0246,  0.0115, -0.0341,  ..., -0.0063, -0.1024, -0.0809],
         [-0.0616,  0.0150,  0.0709,  ...,  0.0560,  0.0272,  0.0023],
         [ 0.0326,  0.0415,  0.0056,  ..., -0.0674,  0.0123, -0.0690]],

        [[ 0.0489,  0.0128, -0.0488,  ...,  0.0389, -0.0298,  0.0282],
         [ 0.0002,  0.0485, -0.0550,  ..., -0.0044,  0.0474,  0.0446],
         [-0.0075, -0.0814, -0.0239,  ...,  0.0046,  0.0836, -0.0359],
         ...,
         [-0.1304, -0.0949, -0.1139,  ..., -0.0261, -0.0173, -0.0386],
         [ 0.0328, -0.0523,  0.0100,  ..., -0.0317,  0.0424,  0.0311],
         [-0.0407,  0.0521, -0.0226,  ...,  0.0592,  0.0559,  0.0108]],

        ...,

        [[ 0.0082, -0.0367,  0.0599,  ..., -0.0058, -0.0340, -0.0504],
         [-0.0059, -0.0008,  0.0312,  ...,  0.0083,  0.1205,  0.0452],
         [ 0.0729,  0.0006, -0.0396,  ..., -0.0234, -0.0744, -0.0681],
         ...,
         [-0.0453, -0.0878, -0.0458,  ..., -0.1503,  0.0030, -0.0804],
         [-0.0506,  0.0044, -0.0268,  ...,  0.0017,  0.0197, -0.0588],
         [-0.0377,  0.0568, -0.0055,  ...,  0.0685,  0.0395, -0.0157]],

        [[ 0.0459,  0.0220, -0.0216,  ..., -0.0499,  0.0494,  0.0206],
         [-0.0003,  0.0056,  0.0217,  ...,  0.0543,  0.0582,  0.0007],
         [-0.0488, -0.0046, -0.0731,  ...,  0.0777,  0.0675,  0.0231],
         ...,
         [ 0.0187, -0.0650, -0.0145,  ..., -0.0686, -0.0255, -0.0029],
         [ 0.0563, -0.0456,  0.0172,  ..., -0.0158,  0.0782,  0.0624],
         [ 0.0088, -0.0128,  0.0234,  ...,  0.0818, -0.0106,  0.0397]],

        [[-0.0248,  0.0834,  0.0646,  ...,  0.0273, -0.0023,  0.0531],
         [-0.0718, -0.0998, -0.1011,  ..., -0.0641,  0.0355, -0.0367],
         [-0.0931, -0.0205, -0.1022,  ...,  0.0397, -0.0099,  0.0926],
         ...,
         [-0.0384, -0.0686, -0.0706,  ..., -0.0440, -0.0302,  0.0130],
         [-0.0735, -0.0315,  0.0155,  ..., -0.0114, -0.0158,  0.0445],
         [ 0.0301,  0.0300,  0.0286,  ...,  0.0541,  0.0303,  0.0938]]]), 'conv2.bias': tensor([ 0.0288, -0.0820,  0.0364, -0.0373, -0.0101,  0.0386, -0.0383,  0.0240,
         0.0530,  0.0314,  0.0332, -0.0051,  0.0166, -0.0751, -0.0804, -0.0478,
        -0.0500, -0.0065,  0.0007, -0.0432, -0.0761, -0.0062,  0.0136, -0.0313,
        -0.0291,  0.0509, -0.0631, -0.0983,  0.0558,  0.0418]), 'conv3.weight': tensor([[[-0.0259, -0.0196, -0.0148, -0.0523,  0.0618, -0.0348],
         [ 0.0168, -0.0662,  0.0464,  0.0120,  0.0346, -0.0167],
         [ 0.0114, -0.0307,  0.0381, -0.0328, -0.0824,  0.0214],
         ...,
         [-0.0130, -0.0421,  0.0687,  0.0005,  0.0468, -0.0450],
         [-0.0276,  0.0214, -0.0704, -0.0807, -0.0905, -0.0959],
         [-0.0460, -0.0272,  0.0089,  0.0023,  0.0532,  0.0253]],

        [[-0.0559,  0.0303, -0.0558, -0.0374, -0.0976, -0.0568],
         [ 0.0109, -0.0396,  0.0664,  0.0428, -0.0035, -0.0616],
         [ 0.0550, -0.0125, -0.0517,  0.0033, -0.0541, -0.0203],
         ...,
         [ 0.0474,  0.0056, -0.0964, -0.0515, -0.0270, -0.0441],
         [-0.0266, -0.0546,  0.0593, -0.0933, -0.0795, -0.0058],
         [-0.0601,  0.0246, -0.0590, -0.0936,  0.0040, -0.0888]],

        [[ 0.0290, -0.0399,  0.0212,  0.0713, -0.0217,  0.0344],
         [-0.0682,  0.0229, -0.0087, -0.0626, -0.0048, -0.0794],
         [ 0.0073, -0.0286,  0.0327, -0.0200,  0.0264,  0.0719],
         ...,
         [ 0.0257,  0.0250, -0.0303, -0.0426,  0.0111, -0.0620],
         [-0.0818, -0.0361,  0.0112, -0.0619, -0.0737, -0.0156],
         [-0.0457,  0.0059,  0.0712, -0.0193, -0.0336, -0.0671]],

        ...,

        [[-0.0571,  0.0132, -0.0443,  0.0181,  0.0360, -0.0725],
         [-0.0983, -0.0788,  0.0472,  0.0155, -0.0357,  0.0315],
         [-0.0279,  0.0391,  0.0997,  0.0461,  0.0554,  0.0089],
         ...,
         [-0.0056,  0.0423,  0.0440,  0.0916,  0.0516,  0.0170],
         [-0.0103, -0.0754,  0.0378,  0.0730,  0.0739,  0.0883],
         [ 0.0329,  0.0609,  0.0060, -0.0358, -0.0520, -0.0092]],

        [[ 0.0638, -0.0227,  0.0339, -0.0151,  0.0687,  0.0789],
         [-0.0554, -0.0738,  0.0635, -0.0240, -0.0311, -0.0431],
         [-0.0307, -0.0471, -0.0069, -0.0243,  0.0340,  0.0487],
         ...,
         [-0.0751, -0.0876, -0.0057, -0.0315, -0.0533, -0.0583],
         [ 0.0331, -0.0400, -0.0456, -0.0354, -0.0797,  0.0046],
         [-0.0432, -0.0410, -0.0179,  0.0564, -0.0391,  0.0911]],

        [[-0.0213,  0.0551, -0.0108,  0.0370,  0.0675, -0.0116],
         [-0.0047, -0.0124, -0.0762, -0.0957, -0.0262,  0.0055],
         [ 0.0698,  0.0471,  0.0580,  0.0401, -0.0526,  0.0216],
         ...,
         [-0.1074, -0.0251,  0.0077, -0.0514, -0.0154, -0.0031],
         [ 0.0251, -0.0655, -0.0121, -0.1047,  0.0313,  0.0506],
         [ 0.0628,  0.0906,  0.0522,  0.0838,  0.0490, -0.0205]]]), 'conv3.bias': tensor([-0.0779,  0.0151,  0.0210, -0.1207,  0.0652, -0.0705,  0.0042, -0.0117,
         0.0525, -0.0067, -0.0574, -0.0280,  0.0404, -0.0730, -0.0276, -0.0203,
         0.0699, -0.0048,  0.0040, -0.0149,  0.0098,  0.0162,  0.0744, -0.1128,
         0.0222,  0.0240,  0.0553, -0.0253, -0.1048, -0.0183,  0.0323, -0.0731,
         0.0034, -0.0133, -0.0945,  0.0121,  0.0842,  0.0234, -0.0078, -0.0992]), 'conv4.weight': tensor([[[ 0.0839,  0.0632, -0.0243,  0.0910, -0.0204],
         [ 0.0745,  0.0900, -0.0299,  0.0464,  0.0239],
         [ 0.0896,  0.0408,  0.0792,  0.0512, -0.0019],
         ...,
         [ 0.0701, -0.0227, -0.0185, -0.0161,  0.0076],
         [-0.0124,  0.0600,  0.0115,  0.0043,  0.0408],
         [ 0.0689,  0.0108, -0.0267, -0.0380, -0.0347]],

        [[-0.0507, -0.0091, -0.0709, -0.0559,  0.0227],
         [-0.1552, -0.0292, -0.1359, -0.0170, -0.0038],
         [-0.0669,  0.0165, -0.0115,  0.0420, -0.0548],
         ...,
         [ 0.0919, -0.0302, -0.0467, -0.0288, -0.1025],
         [-0.0229, -0.0826, -0.0718,  0.0296,  0.1003],
         [ 0.0318, -0.0586, -0.1261, -0.1208, -0.0500]],

        [[-0.0015, -0.0708,  0.0615,  0.0511, -0.0156],
         [-0.0304, -0.0074,  0.0713, -0.0505, -0.0719],
         [-0.0165, -0.0757, -0.0816, -0.0685,  0.0077],
         ...,
         [-0.0157,  0.0622,  0.0770,  0.0070,  0.0372],
         [ 0.0031,  0.0264,  0.0165,  0.0368, -0.0393],
         [ 0.0424, -0.0172,  0.0594,  0.0678,  0.0320]],

        ...,

        [[-0.0048, -0.0011, -0.0431, -0.0407, -0.0590],
         [-0.0469, -0.0999, -0.0695, -0.0743, -0.0057],
         [-0.0156, -0.0656, -0.0130,  0.0759,  0.0253],
         ...,
         [-0.0866, -0.1394, -0.0924, -0.0918, -0.0333],
         [-0.0775,  0.0591,  0.0374,  0.0727,  0.0749],
         [-0.0717, -0.0548, -0.0483, -0.0596,  0.0418]],

        [[-0.0133,  0.0082, -0.1196, -0.1700, -0.0373],
         [-0.0721,  0.0206, -0.0505, -0.0547, -0.0984],
         [-0.0218, -0.0489,  0.0739,  0.0475,  0.0863],
         ...,
         [ 0.0361, -0.0383, -0.0199, -0.0649, -0.0417],
         [-0.0501,  0.0528,  0.0042,  0.0103, -0.0668],
         [-0.1181, -0.0714, -0.1033, -0.0174,  0.0025]],

        [[-0.0687, -0.0137, -0.0646,  0.0414, -0.0756],
         [-0.0491,  0.0480,  0.0050,  0.0943,  0.0728],
         [ 0.0289, -0.0814, -0.0761, -0.0292,  0.0074],
         ...,
         [-0.0560, -0.0773, -0.0081,  0.0430,  0.0266],
         [-0.0965, -0.0196,  0.0201, -0.0700, -0.0098],
         [ 0.0232,  0.0029,  0.0160, -0.0445,  0.0008]]]), 'conv4.bias': tensor([-0.0629, -0.0414, -0.1023, -0.0677, -0.0539,  0.0659, -0.0192,  0.0274,
        -0.0171, -0.0180,  0.0614,  0.0319, -0.0626,  0.0670, -0.0142,  0.0775,
        -0.0502,  0.0405,  0.0090, -0.0080, -0.0989, -0.0440, -0.0589,  0.0388,
         0.0639, -0.0392, -0.0090, -0.0556, -0.0382,  0.0578, -0.0647, -0.0128,
        -0.0407, -0.0728,  0.0784,  0.0512,  0.0316,  0.0513, -0.0008,  0.0413,
         0.0618, -0.0532, -0.0980, -0.0566,  0.0050,  0.0287,  0.0559,  0.0478,
         0.0266,  0.0607]), 'conv5.weight': tensor([[[-0.1045,  0.0321,  0.0547, -0.0165,  0.0794],
         [-0.0327, -0.0493, -0.0672, -0.0510, -0.0847],
         [-0.0549,  0.0101, -0.0269, -0.0193, -0.0182],
         ...,
         [ 0.0010,  0.0214,  0.0588,  0.0127,  0.0403],
         [-0.0590, -0.0325, -0.0967, -0.0244, -0.0464],
         [-0.1480, -0.0512, -0.0235, -0.0242,  0.0446]],

        [[-0.1161, -0.0308, -0.0979, -0.0504,  0.0042],
         [ 0.0862, -0.0504, -0.0494, -0.0181, -0.0965],
         [-0.0435, -0.0213,  0.0091, -0.0733, -0.0279],
         ...,
         [ 0.0350, -0.0174, -0.0103, -0.0089,  0.0207],
         [-0.0797, -0.0658, -0.0984, -0.1422, -0.1550],
         [ 0.0069,  0.0044, -0.0755, -0.0300, -0.0200]],

        [[-0.0066, -0.0308,  0.0051,  0.0303,  0.0777],
         [-0.0513,  0.0009, -0.0407, -0.0335, -0.0110],
         [-0.0456, -0.0344, -0.0808, -0.0267,  0.0537],
         ...,
         [ 0.1085,  0.1093,  0.0936,  0.0811,  0.1048],
         [-0.0194, -0.0733, -0.0313,  0.0601,  0.0291],
         [ 0.0105, -0.0227,  0.0217, -0.0788, -0.0869]],

        ...,

        [[-0.1066, -0.1235, -0.0683, -0.0201, -0.0205],
         [ 0.0015, -0.1134, -0.1067, -0.0395, -0.0742],
         [-0.0331, -0.0316, -0.0650,  0.0110, -0.0598],
         ...,
         [-0.0363, -0.0643,  0.0404, -0.0297, -0.0228],
         [-0.1064, -0.1552, -0.0990, -0.1355, -0.0274],
         [ 0.0057,  0.0240, -0.0707,  0.0386, -0.0162]],

        [[-0.0421, -0.1046, -0.0609, -0.0385,  0.0253],
         [ 0.0471, -0.0282,  0.0220, -0.0431, -0.0185],
         [-0.0491, -0.0864, -0.0589, -0.0091, -0.0916],
         ...,
         [ 0.0427,  0.0019, -0.0041,  0.0193,  0.0527],
         [ 0.0302, -0.0511, -0.0697, -0.0061, -0.0036],
         [-0.1027, -0.1102,  0.0382, -0.0230,  0.0123]],

        [[-0.0198,  0.0117,  0.0147,  0.0880,  0.0179],
         [-0.0117, -0.1129, -0.0991, -0.0434, -0.0345],
         [-0.0184,  0.0025, -0.1005, -0.0307, -0.0351],
         ...,
         [ 0.0595,  0.0403, -0.0082, -0.0463, -0.0094],
         [-0.0393, -0.0437,  0.0034,  0.0577, -0.0284],
         [-0.0890, -0.0473, -0.0429,  0.0779,  0.0254]]]), 'conv5.bias': tensor([ 0.0284,  0.0615, -0.0788, -0.0596,  0.0492,  0.0231, -0.0796,  0.0332,
         0.0077,  0.0442, -0.0164, -0.0479,  0.0099, -0.0451, -0.0079,  0.0032,
        -0.0951, -0.0734,  0.0577,  0.0567, -0.0539, -0.0895,  0.0106,  0.0118,
         0.0612, -0.0239,  0.0564, -0.0154,  0.0470,  0.0061, -0.0766, -0.0496,
         0.0611, -0.0748,  0.0257, -0.0531,  0.0367, -0.0661, -0.0591, -0.0141,
        -0.0255, -0.0621,  0.0286, -0.0410,  0.0477, -0.0701,  0.0410,  0.0778,
         0.0066, -0.0363]), 'linear1.weight': tensor([[-0.0009,  0.0022,  0.0263,  ...,  0.0015, -0.0095, -0.0095],
        [-0.0100,  0.0092, -0.0006,  ..., -0.0194, -0.0407, -0.0468],
        [ 0.0044, -0.0094,  0.0336,  ...,  0.0256,  0.0065,  0.0003],
        ...,
        [-0.0158,  0.0327,  0.0386,  ...,  0.0018, -0.0040, -0.0012],
        [-0.0126, -0.0093, -0.0148,  ..., -0.0114, -0.0134, -0.0226],
        [ 0.0024,  0.0043,  0.0110,  ..., -0.0460, -0.0219, -0.0104]]), 'linear1.bias': tensor([-0.0214, -0.0073, -0.0047,  ..., -0.0191,  0.0638, -0.0309]), 'linear2.weight': tensor([[ 0.0136,  0.0671,  0.0165,  ...,  0.0347,  0.0135, -0.0008]]), 'linear2.bias': tensor([0.0408])}), (array([1]), {'conv1.weight': tensor([[[ 0.2598,  0.1282, -0.1714,  0.0941, -0.1885, -0.0092,  0.0331,
          -0.1545,  0.1545, -0.1628]],

        [[-0.3015, -0.1804,  0.1927, -0.0132, -0.1302, -0.2841,  0.1380,
          -0.0671, -0.1724,  0.1626]],

        [[ 0.0087, -0.2687,  0.1896,  0.1633,  0.3131, -0.0990, -0.2987,
          -0.2282,  0.2119, -0.0863]],

        [[ 0.2051, -0.1120,  0.0027, -0.2906, -0.2203, -0.0454,  0.1585,
           0.2751, -0.1837,  0.1719]],

        [[ 0.3110, -0.2248,  0.2431, -0.2068,  0.2695, -0.1652, -0.1781,
          -0.0319, -0.2872,  0.2757]],

        [[ 0.2302,  0.2415, -0.2548,  0.2654, -0.2416, -0.4082,  0.2257,
          -0.2037, -0.1686,  0.1941]],

        [[ 0.2966,  0.1664, -0.2965, -0.2065,  0.1776,  0.0817,  0.1985,
          -0.1334, -0.0469, -0.2597]],

        [[-0.0872,  0.2234,  0.0263, -0.3800,  0.1075,  0.1799,  0.2708,
           0.0723, -0.1608, -0.1742]],

        [[-0.2401,  0.3232,  0.0282,  0.2290,  0.1306, -0.3207, -0.3114,
          -0.2186,  0.3342, -0.1817]],

        [[-0.2151, -0.1780,  0.3386, -0.0622,  0.0415, -0.0113,  0.0813,
          -0.2662,  0.1860, -0.0170]],

        [[ 0.0979,  0.1879, -0.1104, -0.0029,  0.2228,  0.0217, -0.1429,
           0.1617, -0.2516,  0.0514]],

        [[ 0.2391, -0.2917,  0.1126,  0.2193,  0.0945,  0.0282, -0.0220,
          -0.0287, -0.1094,  0.0701]],

        [[-0.0507, -0.3006, -0.1864, -0.0295, -0.2345,  0.0190,  0.2792,
           0.2115, -0.2820, -0.1684]],

        [[ 0.1732,  0.1156, -0.0221, -0.2180, -0.1493, -0.0797, -0.0869,
           0.2684, -0.2293, -0.1212]],

        [[-0.3235,  0.2821, -0.2279,  0.0657,  0.0373,  0.2286, -0.2953,
           0.1693,  0.2691, -0.2435]],

        [[-0.1166, -0.3497,  0.1972,  0.2160, -0.2993,  0.1678,  0.1209,
          -0.2696,  0.0775,  0.0111]],

        [[-0.3595,  0.0997, -0.2312,  0.2834, -0.2915, -0.0752,  0.2547,
           0.0834,  0.0461,  0.0682]],

        [[-0.0564, -0.0183,  0.2941,  0.0799, -0.0271,  0.1429, -0.1438,
          -0.1387, -0.3224, -0.1732]],

        [[-0.1439,  0.1578,  0.1971, -0.1879, -0.1744, -0.0884,  0.0007,
           0.1322, -0.2505, -0.0325]],

        [[ 0.2163, -0.0930,  0.1022,  0.0624,  0.0852,  0.2627, -0.2827,
          -0.2966,  0.1891,  0.0540]],

        [[-0.1550, -0.1633,  0.1939, -0.1811,  0.2478, -0.1246,  0.1633,
          -0.1471, -0.1425,  0.2097]],

        [[-0.1041, -0.0912, -0.2745,  0.0791,  0.2257, -0.2913, -0.0884,
           0.2207,  0.0630,  0.2693]],

        [[-0.3204, -0.0060,  0.2071,  0.1888,  0.1554,  0.0111, -0.0650,
           0.1636, -0.0829, -0.1968]],

        [[ 0.0901,  0.0827, -0.1361,  0.0528, -0.0324,  0.0019,  0.2142,
          -0.1449,  0.0627,  0.0165]],

        [[ 0.1751, -0.0520,  0.2699, -0.1851, -0.0537, -0.1757, -0.2137,
           0.0214,  0.1716, -0.1147]],

        [[ 0.0171, -0.2514,  0.0840,  0.0134, -0.2762,  0.2433,  0.1296,
           0.2310, -0.1576, -0.0994]],

        [[ 0.0059, -0.2808, -0.2750,  0.3784, -0.1912, -0.1660,  0.0631,
          -0.0419,  0.1708,  0.1072]],

        [[-0.3455, -0.3535,  0.0987, -0.0210,  0.2393,  0.2846,  0.2275,
          -0.0156, -0.0784, -0.0613]],

        [[ 0.1751, -0.2472,  0.1897, -0.1402, -0.0833,  0.2218, -0.2377,
          -0.2173,  0.0991, -0.1054]],

        [[ 0.2717,  0.3527, -0.0437,  0.0160,  0.1525, -0.1574, -0.2485,
          -0.2373, -0.1608, -0.2109]]]), 'conv1.bias': tensor([ 0.0635, -0.1751,  0.0783,  0.0810, -0.1174, -0.0977,  0.1019, -0.0791,
        -0.0976,  0.0097, -0.2419, -0.3827, -0.0619, -0.1425,  0.0178, -0.1284,
         0.0338, -0.1413,  0.0374, -0.3469,  0.0056, -0.0234, -0.0992, -0.2778,
         0.2026,  0.0306, -0.0988,  0.1310,  0.2117,  0.0644]), 'conv2.weight': tensor([[[-0.0295, -0.1203, -0.0888,  ..., -0.0588,  0.0352, -0.0088],
         [ 0.0158, -0.0538, -0.0197,  ...,  0.0659,  0.0591,  0.0264],
         [-0.0125, -0.0377, -0.0063,  ..., -0.0299,  0.0400,  0.0706],
         ...,
         [-0.0088,  0.0254,  0.0413,  ...,  0.0061, -0.0043, -0.1148],
         [-0.0532, -0.1135, -0.1334,  ...,  0.0192, -0.0095, -0.0492],
         [-0.0305, -0.0332, -0.0647,  ..., -0.0177,  0.0885,  0.0778]],

        [[-0.0232, -0.0294, -0.0077,  ...,  0.0056,  0.0461, -0.0285],
         [ 0.0618,  0.0321,  0.0861,  ...,  0.0860, -0.0874, -0.0933],
         [-0.0239, -0.1052,  0.0438,  ..., -0.0425, -0.0910,  0.0107],
         ...,
         [ 0.0246,  0.0115, -0.0341,  ..., -0.0063, -0.1024, -0.0809],
         [-0.0616,  0.0150,  0.0709,  ...,  0.0560,  0.0272,  0.0023],
         [ 0.0326,  0.0415,  0.0056,  ..., -0.0674,  0.0123, -0.0690]],

        [[ 0.0489,  0.0128, -0.0488,  ...,  0.0389, -0.0298,  0.0282],
         [ 0.0002,  0.0485, -0.0550,  ..., -0.0044,  0.0474,  0.0446],
         [-0.0075, -0.0814, -0.0239,  ...,  0.0046,  0.0836, -0.0359],
         ...,
         [-0.1304, -0.0949, -0.1139,  ..., -0.0261, -0.0173, -0.0386],
         [ 0.0328, -0.0523,  0.0100,  ..., -0.0317,  0.0424,  0.0311],
         [-0.0407,  0.0521, -0.0226,  ...,  0.0592,  0.0559,  0.0108]],

        ...,

        [[ 0.0082, -0.0367,  0.0599,  ..., -0.0058, -0.0340, -0.0504],
         [-0.0059, -0.0008,  0.0312,  ...,  0.0083,  0.1205,  0.0452],
         [ 0.0729,  0.0006, -0.0396,  ..., -0.0234, -0.0744, -0.0681],
         ...,
         [-0.0453, -0.0878, -0.0458,  ..., -0.1503,  0.0030, -0.0804],
         [-0.0506,  0.0044, -0.0268,  ...,  0.0017,  0.0197, -0.0588],
         [-0.0377,  0.0568, -0.0055,  ...,  0.0685,  0.0395, -0.0157]],

        [[ 0.0459,  0.0220, -0.0216,  ..., -0.0499,  0.0494,  0.0206],
         [-0.0003,  0.0056,  0.0217,  ...,  0.0543,  0.0582,  0.0007],
         [-0.0488, -0.0046, -0.0731,  ...,  0.0777,  0.0675,  0.0231],
         ...,
         [ 0.0187, -0.0650, -0.0145,  ..., -0.0686, -0.0255, -0.0029],
         [ 0.0563, -0.0456,  0.0172,  ..., -0.0158,  0.0782,  0.0624],
         [ 0.0088, -0.0128,  0.0234,  ...,  0.0818, -0.0106,  0.0397]],

        [[-0.0248,  0.0834,  0.0646,  ...,  0.0273, -0.0023,  0.0531],
         [-0.0718, -0.0998, -0.1011,  ..., -0.0641,  0.0355, -0.0367],
         [-0.0931, -0.0205, -0.1022,  ...,  0.0397, -0.0099,  0.0926],
         ...,
         [-0.0384, -0.0686, -0.0706,  ..., -0.0440, -0.0302,  0.0130],
         [-0.0735, -0.0315,  0.0155,  ..., -0.0114, -0.0158,  0.0445],
         [ 0.0301,  0.0300,  0.0286,  ...,  0.0541,  0.0303,  0.0938]]]), 'conv2.bias': tensor([ 0.0288, -0.0820,  0.0364, -0.0373, -0.0101,  0.0386, -0.0383,  0.0240,
         0.0530,  0.0314,  0.0332, -0.0051,  0.0166, -0.0751, -0.0804, -0.0478,
        -0.0500, -0.0065,  0.0007, -0.0432, -0.0761, -0.0062,  0.0136, -0.0313,
        -0.0291,  0.0509, -0.0631, -0.0983,  0.0558,  0.0418]), 'conv3.weight': tensor([[[-0.0259, -0.0196, -0.0148, -0.0523,  0.0618, -0.0348],
         [ 0.0168, -0.0662,  0.0464,  0.0120,  0.0346, -0.0167],
         [ 0.0114, -0.0307,  0.0381, -0.0328, -0.0824,  0.0214],
         ...,
         [-0.0130, -0.0421,  0.0687,  0.0005,  0.0468, -0.0450],
         [-0.0276,  0.0214, -0.0704, -0.0807, -0.0905, -0.0959],
         [-0.0460, -0.0272,  0.0089,  0.0023,  0.0532,  0.0253]],

        [[-0.0559,  0.0303, -0.0558, -0.0374, -0.0976, -0.0568],
         [ 0.0109, -0.0396,  0.0664,  0.0428, -0.0035, -0.0616],
         [ 0.0550, -0.0125, -0.0517,  0.0033, -0.0541, -0.0203],
         ...,
         [ 0.0474,  0.0056, -0.0964, -0.0515, -0.0270, -0.0441],
         [-0.0266, -0.0546,  0.0593, -0.0933, -0.0795, -0.0058],
         [-0.0601,  0.0246, -0.0590, -0.0936,  0.0040, -0.0888]],

        [[ 0.0290, -0.0399,  0.0212,  0.0713, -0.0217,  0.0344],
         [-0.0682,  0.0229, -0.0087, -0.0626, -0.0048, -0.0794],
         [ 0.0073, -0.0286,  0.0327, -0.0200,  0.0264,  0.0719],
         ...,
         [ 0.0257,  0.0250, -0.0303, -0.0426,  0.0111, -0.0620],
         [-0.0818, -0.0361,  0.0112, -0.0619, -0.0737, -0.0156],
         [-0.0457,  0.0059,  0.0712, -0.0193, -0.0336, -0.0671]],

        ...,

        [[-0.0571,  0.0132, -0.0443,  0.0181,  0.0360, -0.0725],
         [-0.0983, -0.0788,  0.0472,  0.0155, -0.0357,  0.0315],
         [-0.0279,  0.0391,  0.0997,  0.0461,  0.0554,  0.0089],
         ...,
         [-0.0056,  0.0423,  0.0440,  0.0916,  0.0516,  0.0170],
         [-0.0103, -0.0754,  0.0378,  0.0730,  0.0739,  0.0883],
         [ 0.0329,  0.0609,  0.0060, -0.0358, -0.0520, -0.0092]],

        [[ 0.0638, -0.0227,  0.0339, -0.0151,  0.0687,  0.0789],
         [-0.0554, -0.0738,  0.0635, -0.0240, -0.0311, -0.0431],
         [-0.0307, -0.0471, -0.0069, -0.0243,  0.0340,  0.0487],
         ...,
         [-0.0751, -0.0876, -0.0057, -0.0315, -0.0533, -0.0583],
         [ 0.0331, -0.0400, -0.0456, -0.0354, -0.0797,  0.0046],
         [-0.0432, -0.0410, -0.0179,  0.0564, -0.0391,  0.0911]],

        [[-0.0213,  0.0551, -0.0108,  0.0370,  0.0675, -0.0116],
         [-0.0047, -0.0124, -0.0762, -0.0957, -0.0262,  0.0055],
         [ 0.0698,  0.0471,  0.0580,  0.0401, -0.0526,  0.0216],
         ...,
         [-0.1074, -0.0251,  0.0077, -0.0514, -0.0154, -0.0031],
         [ 0.0251, -0.0655, -0.0121, -0.1047,  0.0313,  0.0506],
         [ 0.0628,  0.0906,  0.0522,  0.0838,  0.0490, -0.0205]]]), 'conv3.bias': tensor([-0.0779,  0.0151,  0.0210, -0.1207,  0.0652, -0.0705,  0.0042, -0.0117,
         0.0525, -0.0067, -0.0574, -0.0280,  0.0404, -0.0730, -0.0276, -0.0203,
         0.0699, -0.0048,  0.0040, -0.0149,  0.0098,  0.0162,  0.0744, -0.1128,
         0.0222,  0.0240,  0.0553, -0.0253, -0.1048, -0.0183,  0.0323, -0.0731,
         0.0034, -0.0133, -0.0945,  0.0121,  0.0842,  0.0234, -0.0078, -0.0992]), 'conv4.weight': tensor([[[ 0.0839,  0.0632, -0.0243,  0.0910, -0.0204],
         [ 0.0745,  0.0900, -0.0299,  0.0464,  0.0239],
         [ 0.0896,  0.0408,  0.0792,  0.0512, -0.0019],
         ...,
         [ 0.0701, -0.0227, -0.0185, -0.0161,  0.0076],
         [-0.0124,  0.0600,  0.0115,  0.0043,  0.0408],
         [ 0.0689,  0.0108, -0.0267, -0.0380, -0.0347]],

        [[-0.0507, -0.0091, -0.0709, -0.0559,  0.0227],
         [-0.1552, -0.0292, -0.1359, -0.0170, -0.0038],
         [-0.0669,  0.0165, -0.0115,  0.0420, -0.0548],
         ...,
         [ 0.0919, -0.0302, -0.0467, -0.0288, -0.1025],
         [-0.0229, -0.0826, -0.0718,  0.0296,  0.1003],
         [ 0.0318, -0.0586, -0.1261, -0.1208, -0.0500]],

        [[-0.0015, -0.0708,  0.0615,  0.0511, -0.0156],
         [-0.0304, -0.0074,  0.0713, -0.0505, -0.0719],
         [-0.0165, -0.0757, -0.0816, -0.0685,  0.0077],
         ...,
         [-0.0157,  0.0622,  0.0770,  0.0070,  0.0372],
         [ 0.0031,  0.0264,  0.0165,  0.0368, -0.0393],
         [ 0.0424, -0.0172,  0.0594,  0.0678,  0.0320]],

        ...,

        [[-0.0048, -0.0011, -0.0431, -0.0407, -0.0590],
         [-0.0469, -0.0999, -0.0695, -0.0743, -0.0057],
         [-0.0156, -0.0656, -0.0130,  0.0759,  0.0253],
         ...,
         [-0.0866, -0.1394, -0.0924, -0.0918, -0.0333],
         [-0.0775,  0.0591,  0.0374,  0.0727,  0.0749],
         [-0.0717, -0.0548, -0.0483, -0.0596,  0.0418]],

        [[-0.0133,  0.0082, -0.1196, -0.1700, -0.0373],
         [-0.0721,  0.0206, -0.0505, -0.0547, -0.0984],
         [-0.0218, -0.0489,  0.0739,  0.0475,  0.0863],
         ...,
         [ 0.0361, -0.0383, -0.0199, -0.0649, -0.0417],
         [-0.0501,  0.0528,  0.0042,  0.0103, -0.0668],
         [-0.1181, -0.0714, -0.1033, -0.0174,  0.0025]],

        [[-0.0687, -0.0137, -0.0646,  0.0414, -0.0756],
         [-0.0491,  0.0480,  0.0050,  0.0943,  0.0728],
         [ 0.0289, -0.0814, -0.0761, -0.0292,  0.0074],
         ...,
         [-0.0560, -0.0773, -0.0081,  0.0430,  0.0266],
         [-0.0965, -0.0196,  0.0201, -0.0700, -0.0098],
         [ 0.0232,  0.0029,  0.0160, -0.0445,  0.0008]]]), 'conv4.bias': tensor([-0.0629, -0.0414, -0.1023, -0.0677, -0.0539,  0.0659, -0.0192,  0.0274,
        -0.0171, -0.0180,  0.0614,  0.0319, -0.0626,  0.0670, -0.0142,  0.0775,
        -0.0502,  0.0405,  0.0090, -0.0080, -0.0989, -0.0440, -0.0589,  0.0388,
         0.0639, -0.0392, -0.0090, -0.0556, -0.0382,  0.0578, -0.0647, -0.0128,
        -0.0407, -0.0728,  0.0784,  0.0512,  0.0316,  0.0513, -0.0008,  0.0413,
         0.0618, -0.0532, -0.0980, -0.0566,  0.0050,  0.0287,  0.0559,  0.0478,
         0.0266,  0.0607]), 'conv5.weight': tensor([[[-0.1045,  0.0321,  0.0547, -0.0165,  0.0794],
         [-0.0327, -0.0493, -0.0672, -0.0510, -0.0847],
         [-0.0549,  0.0101, -0.0269, -0.0193, -0.0182],
         ...,
         [ 0.0010,  0.0214,  0.0588,  0.0127,  0.0403],
         [-0.0590, -0.0325, -0.0967, -0.0244, -0.0464],
         [-0.1480, -0.0512, -0.0235, -0.0242,  0.0446]],

        [[-0.1161, -0.0308, -0.0979, -0.0504,  0.0042],
         [ 0.0862, -0.0504, -0.0494, -0.0181, -0.0965],
         [-0.0435, -0.0213,  0.0091, -0.0733, -0.0279],
         ...,
         [ 0.0350, -0.0174, -0.0103, -0.0089,  0.0207],
         [-0.0797, -0.0658, -0.0984, -0.1422, -0.1550],
         [ 0.0069,  0.0044, -0.0755, -0.0300, -0.0200]],

        [[-0.0066, -0.0308,  0.0051,  0.0303,  0.0777],
         [-0.0513,  0.0009, -0.0407, -0.0335, -0.0110],
         [-0.0456, -0.0344, -0.0808, -0.0267,  0.0537],
         ...,
         [ 0.1085,  0.1093,  0.0936,  0.0811,  0.1048],
         [-0.0194, -0.0733, -0.0313,  0.0601,  0.0291],
         [ 0.0105, -0.0227,  0.0217, -0.0788, -0.0869]],

        ...,

        [[-0.1066, -0.1235, -0.0683, -0.0201, -0.0205],
         [ 0.0015, -0.1134, -0.1067, -0.0395, -0.0742],
         [-0.0331, -0.0316, -0.0650,  0.0110, -0.0598],
         ...,
         [-0.0363, -0.0643,  0.0404, -0.0297, -0.0228],
         [-0.1064, -0.1552, -0.0990, -0.1355, -0.0274],
         [ 0.0057,  0.0240, -0.0707,  0.0386, -0.0162]],

        [[-0.0421, -0.1046, -0.0609, -0.0385,  0.0253],
         [ 0.0471, -0.0282,  0.0220, -0.0431, -0.0185],
         [-0.0491, -0.0864, -0.0589, -0.0091, -0.0916],
         ...,
         [ 0.0427,  0.0019, -0.0041,  0.0193,  0.0527],
         [ 0.0302, -0.0511, -0.0697, -0.0061, -0.0036],
         [-0.1027, -0.1102,  0.0382, -0.0230,  0.0123]],

        [[-0.0198,  0.0117,  0.0147,  0.0880,  0.0179],
         [-0.0117, -0.1129, -0.0991, -0.0434, -0.0345],
         [-0.0184,  0.0025, -0.1005, -0.0307, -0.0351],
         ...,
         [ 0.0595,  0.0403, -0.0082, -0.0463, -0.0094],
         [-0.0393, -0.0437,  0.0034,  0.0577, -0.0284],
         [-0.0890, -0.0473, -0.0429,  0.0779,  0.0254]]]), 'conv5.bias': tensor([ 0.0284,  0.0615, -0.0788, -0.0596,  0.0492,  0.0231, -0.0796,  0.0332,
         0.0077,  0.0442, -0.0164, -0.0479,  0.0099, -0.0451, -0.0079,  0.0032,
        -0.0951, -0.0734,  0.0577,  0.0567, -0.0539, -0.0895,  0.0106,  0.0118,
         0.0612, -0.0239,  0.0564, -0.0154,  0.0470,  0.0061, -0.0766, -0.0496,
         0.0611, -0.0748,  0.0257, -0.0531,  0.0367, -0.0661, -0.0591, -0.0141,
        -0.0255, -0.0621,  0.0286, -0.0410,  0.0477, -0.0701,  0.0410,  0.0778,
         0.0066, -0.0363]), 'linear1.weight': tensor([[-0.0009,  0.0022,  0.0263,  ...,  0.0015, -0.0095, -0.0095],
        [-0.0100,  0.0092, -0.0006,  ..., -0.0194, -0.0407, -0.0468],
        [ 0.0044, -0.0094,  0.0336,  ...,  0.0256,  0.0065,  0.0003],
        ...,
        [-0.0158,  0.0327,  0.0386,  ...,  0.0018, -0.0040, -0.0012],
        [-0.0126, -0.0093, -0.0148,  ..., -0.0114, -0.0134, -0.0226],
        [ 0.0024,  0.0043,  0.0110,  ..., -0.0460, -0.0219, -0.0104]]), 'linear1.bias': tensor([-0.0214, -0.0073, -0.0047,  ..., -0.0191,  0.0638, -0.0309]), 'linear2.weight': tensor([[ 0.0136,  0.0671,  0.0165,  ...,  0.0347,  0.0135, -0.0008]]), 'linear2.bias': tensor([0.0408])})]
